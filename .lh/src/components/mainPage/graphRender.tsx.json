{
    "sourceFile": "src/components/mainPage/graphRender.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1708267897959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708268066222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,34 @@\n+import React from 'react';\n+\n+const nodes = [{ id: 1 }, { id: 2 }, { id: 3 }];\n+const links = [{ from: 1, to: 2 }, { from: 2, to: 3 }];\n+\n+const GraphRender = () => {\n+  return (\n+    <svg width=\"100%\" height=\"500px\" style={{ border: '1px solid black' }}>\n+      {links.map((link, index) => (\n+        <line\n+          key={index}\n+          x1={nodes.find(node => node.id === link.from).id * 150}\n+          y1={50}\n+          x2={nodes.find(node => node.id === link.to).id * 150}\n+          y2={50}\n+          stroke=\"black\"\n+        />\n+      ))}\n+      {nodes.map(node => (\n+        <circle\n+          key={node.id}\n+          cx={node.id * 150}\n+          cy={50}\n+          r={20}\n+          stroke=\"black\"\n+          strokeWidth={2}\n+          fill=\"red\"\n+        />\n+      ))}\n+    </svg>\n+  );\n+};\n+\n+export default GraphRender;\n"
                },
                {
                    "date": 1708268073242,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,26 @@\n-import React from 'react';\n+import React from \"react\";\n \n const nodes = [{ id: 1 }, { id: 2 }, { id: 3 }];\n-const links = [{ from: 1, to: 2 }, { from: 2, to: 3 }];\n+const links = [\n+  { from: 1, to: 2 },\n+  { from: 2, to: 3 },\n+];\n \n const GraphRender = () => {\n   return (\n-    <svg width=\"100%\" height=\"500px\" style={{ border: '1px solid black' }}>\n+    <svg width=\"100%\" height=\"500px\" style={{ border: \"1px solid black\" }}>\n       {links.map((link, index) => (\n         <line\n           key={index}\n-          x1={nodes.find(node => node.id === link.from).id * 150}\n+          x1={nodes.find((node) => node.id === link.from).id * 150}\n           y1={50}\n-          x2={nodes.find(node => node.id === link.to).id * 150}\n+          x2={nodes.find((node) => node.id === link.to).id * 150}\n           y2={50}\n           stroke=\"black\"\n         />\n       ))}\n-      {nodes.map(node => (\n+      {nodes.map((node) => (\n         <circle\n           key={node.id}\n           cx={node.id * 150}\n           cy={50}\n"
                },
                {
                    "date": 1708268962777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,37 +1,81 @@\n-import React from \"react\";\n+// GraphRender.tsx\n+import React, { useEffect, useRef } from 'react';\n+import * as d3 from 'd3';\n \n-const nodes = [{ id: 1 }, { id: 2 }, { id: 3 }];\n-const links = [\n-  { from: 1, to: 2 },\n-  { from: 2, to: 3 },\n-];\n+const GraphRender = () => {\n+  const d3Container = useRef(null);\n \n-const GraphRender = () => {\n+  useEffect(() => {\n+    if (d3Container.current) {\n+      // 示例数据\n+      const nodes = [\n+        { id: 'Node 1' },\n+        { id: 'Node 2' },\n+        { id: 'Node 3' },\n+      ];\n+\n+      const links = [\n+        { source: 'Node 1', target: 'Node 2' },\n+        { source: 'Node 2', target: 'Node 3' },\n+      ];\n+\n+      // 设置SVG\n+      const svg = d3.select(d3Container.current)\n+        .attr('width', '100%')\n+        .attr('height', '500px')\n+        .call(d3.zoom().on('zoom', (event) => {\n+          svg.attr('transform', event.transform);\n+        }))\n+        .append('g');\n+\n+      // 绘制链接\n+      svg.selectAll(\".link\")\n+        .data(links)\n+        .enter()\n+        .append(\"line\")\n+        .attr(\"class\", \"link\")\n+        .style(\"stroke\", \"#999\")\n+        .style(\"stroke-opacity\", 0.6)\n+        .style(\"stroke-width\", (d) => Math.sqrt(d.value));\n+\n+      // 绘制节点\n+      svg.selectAll(\".node\")\n+        .data(nodes)\n+        .enter()\n+        .append(\"circle\")\n+        .attr(\"class\", \"node\")\n+        .attr(\"r\", 5)\n+        .style(\"fill\", \"#69b3a2\")\n+        .call(d3.drag()\n+          .on(\"start\", dragstarted)\n+          .on(\"drag\", dragged)\n+          .on(\"end\", dragended));\n+\n+      function dragstarted(event, d) {\n+        if (!event.active) svg.alphaTarget(0.3).restart();\n+        d.fx = d.x;\n+        d.fy = d.y;\n+      }\n+\n+      function dragged(event, d) {\n+        d.fx = event.x;\n+        d.fy = event.y;\n+      }\n+\n+      function dragended(event, d) {\n+        if (!event.active) svg.alphaTarget(0);\n+        d.fx = null;\n+        d.fy = null;\n+      }\n+    }\n+  }, []);\n+\n   return (\n-    <svg width=\"100%\" height=\"500px\" style={{ border: \"1px solid black\" }}>\n-      {links.map((link, index) => (\n-        <line\n-          key={index}\n-          x1={nodes.find((node) => node.id === link.from).id * 150}\n-          y1={50}\n-          x2={nodes.find((node) => node.id === link.to).id * 150}\n-          y2={50}\n-          stroke=\"black\"\n-        />\n-      ))}\n-      {nodes.map((node) => (\n-        <circle\n-          key={node.id}\n-          cx={node.id * 150}\n-          cy={50}\n-          r={20}\n-          stroke=\"black\"\n-          strokeWidth={2}\n-          fill=\"red\"\n-        />\n-      ))}\n-    </svg>\n+    <svg\n+      className=\"d3-component\"\n+      ref={d3Container}\n+    />\n   );\n };\n \n export default GraphRender;\n"
                },
                {
                    "date": 1708269086899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,80 +1,106 @@\n-// GraphRender.tsx\n-import React, { useEffect, useRef } from \"react\";\n-import * as d3 from \"d3\";\n+=import React, { useEffect, useRef, useState } from 'react';\n+import * as d3 from 'd3';\n \n-const GraphRender = () => {\n-  const d3Container = useRef(null);\n+// 定义节点和链接的接口\n+interface Node {\n+  id: string;\n+  group?: number;\n+}\n \n+interface Link {\n+  source: string;\n+  target: string;\n+  value?: number;\n+}\n+\n+const GraphRender: React.FC = () => {\n+  const d3Container = useRef<SVGSVGElement | null>(null);\n+\n   useEffect(() => {\n     if (d3Container.current) {\n-      // 示例数据\n-      const nodes = [{ id: \"Node 1\" }, { id: \"Node 2\" }, { id: \"Node 3\" }];\n+      // 数据\n+      const nodes: Node[] = [\n+        { id: 'Node 1' },\n+        { id: 'Node 2' },\n+        { id: 'Node 3' },\n+      ];\n \n-      const links = [\n-        { source: \"Node 1\", target: \"Node 2\" },\n-        { source: \"Node 2\", target: \"Node 3\" },\n+      const links: Link[] = [\n+        { source: 'Node 1', target: 'Node 2' },\n+        { source: 'Node 2', target: 'Node 3' },\n       ];\n \n-      // 设置SVG\n-      const svg = d3\n-        .select(d3Container.current)\n-        .attr(\"width\", \"100%\")\n-        .attr(\"height\", \"500px\")\n-        .call(\n-          d3.zoom().on(\"zoom\", (event) => {\n-            svg.attr(\"transform\", event.transform);\n-          })\n-        )\n-        .append(\"g\");\n+      const width = d3Container.current.clientWidth;\n+      const height = d3Container.current.clientHeight;\n \n-      // 绘制链接\n-      svg\n-        .selectAll(\".link\")\n+      // 创建力布局\n+      const simulation = d3.forceSimulation(nodes)\n+        .force(\"link\", d3.forceLink(links).id((d: Node) => d.id))\n+        .force(\"charge\", d3.forceManyBody())\n+        .force(\"center\", d3.forceCenter(width / 2, height / 2));\n+\n+      // 创建SVG\n+      const svg = d3.select(d3Container.current);\n+\n+      // 创建链接\n+      const link = svg.append(\"g\")\n+        .attr(\"class\", \"links\")\n+        .selectAll(\"line\")\n         .data(links)\n-        .enter()\n-        .append(\"line\")\n-        .attr(\"class\", \"link\")\n-        .style(\"stroke\", \"#999\")\n-        .style(\"stroke-opacity\", 0.6)\n-        .style(\"stroke-width\", (d) => Math.sqrt(d.value));\n+        .enter().append(\"line\")\n+        .attr(\"stroke-width\", 2)\n+        .attr(\"stroke\", \"#999\");\n \n-      // 绘制节点\n-      svg\n-        .selectAll(\".node\")\n+      // 创建节点\n+      const node = svg.append(\"g\")\n+        .attr(\"class\", \"nodes\")\n+        .selectAll(\"circle\")\n         .data(nodes)\n-        .enter()\n-        .append(\"circle\")\n-        .attr(\"class\", \"node\")\n+        .enter().append(\"circle\")\n         .attr(\"r\", 5)\n-        .style(\"fill\", \"#69b3a2\")\n-        .call(\n-          d3\n-            .drag()\n-            .on(\"start\", dragstarted)\n-            .on(\"drag\", dragged)\n-            .on(\"end\", dragended)\n-        );\n+        .attr(\"fill\", \"#69b3a2\");\n \n-      function dragstarted(event, d) {\n-        if (!event.active) svg.alphaTarget(0.3).restart();\n-        d.fx = d.x;\n-        d.fy = d.y;\n-      }\n+      // 设置力布局的tick事件\n+      simulation.on(\"tick\", () => {\n+        link\n+          .attr(\"x1\", (d: any) => d.source.x)\n+          .attr(\"y1\", (d: any) => d.source.y)\n+          .attr(\"x2\", (d: any) => d.target.x)\n+          .attr(\"y2\", (d: any) => d.target.y);\n \n-      function dragged(event, d) {\n-        d.fx = event.x;\n-        d.fy = event.y;\n-      }\n+        node\n+          .attr(\"cx\", (d: any) => d.x)\n+          .attr(\"cy\", (d: any) => d.y);\n+      });\n \n-      function dragended(event, d) {\n-        if (!event.active) svg.alphaTarget(0);\n-        d.fx = null;\n-        d.fy = null;\n-      }\n+      // 处理拖动事件\n+      node.call(d3.drag<SVGCircleElement, Node>()\n+        .on(\"start\", (event, d) => {\n+          if (!event.active) simulation.alphaTarget(0.3).restart();\n+          d.fx = d.x;\n+          d.fy = d.y;\n+        })\n+        .on(\"drag\", (event, d) => {\n+          d.fx = event.x;\n+          d.fy = event.y;\n+        })\n+        .on(\"end\", (event, d) => {\n+          if (!event.active) simulation.alphaTarget(0);\n+          d.fx = null;\n+          d.fy = null;\n+        })\n+      );\n     }\n   }, []);\n \n-  return <svg className=\"d3-component\" ref={d3Container} />;\n+  return (\n+    <svg\n+      className=\"d3-component\"\n+      width=\"100%\"\n+      height=\"100%\"\n+      ref={d3Container}\n+    />\n+  );\n };\n \n export default GraphRender;\n"
                },
                {
                    "date": 1708269106345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-=import React, { useEffect, useRef, useState } from 'react';\n+import React, { useEffect, useRef, useState } from 'react';\n import * as d3 from 'd3';\n \n // 定义节点和链接的接口\n interface Node {\n"
                }
            ],
            "date": 1708267897959,
            "name": "Commit-0",
            "content": ""
        }
    ]
}