{
    "sourceFile": "src/components/mainPage/advisorCardComponents/tags.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1708343108798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708343369727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,35 +1,40 @@\n-import React from \"react\";\n-import { Chip, Stack } from \"@mui/material\";\n+import React, { useState } from 'react';\n+import { Chip, Stack } from '@mui/material';\n \n-// 随机颜色生成器，用于为标签生成随机颜色\n+// 随机颜色生成器\n const getRandomColor = () => {\n-  const colors = [\n-    \"#FF6384\",\n-    \"#36A2EB\",\n-    \"#FFCE56\",\n-    \"#cc65fe\",\n-    \"#ff7043\",\n-    \"#4caf50\",\n-    \"#2196f3\",\n-  ];\n+  const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#cc65fe', '#ff7043', '#4caf50', '#2196f3'];\n   return colors[Math.floor(Math.random() * colors.length)];\n };\n \n-const Tags = ({ tags }) => {\n+const Tags = ({ tags, onClickTag }) => {\n+  const [hoveredTag, setHoveredTag] = useState(null);\n+\n   return (\n-    <Stack direction=\"row\" spacing={1} sx={{ flexWrap: \"wrap\" }}>\n-      {tags.map((tag, index) => (\n-        <Chip\n-          key={index}\n-          label={tag}\n-          sx={{\n-            backgroundColor: getRandomColor(),\n-            color: \"white\",\n-            fontWeight: \"bold\",\n-          }}\n-        />\n-      ))}\n+    <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap' }}>\n+      {tags.map((tag, index) => {\n+        const bgColor = getRandomColor();\n+        return (\n+          <Chip\n+            key={index}\n+            label={tag}\n+            onClick={() => onClickTag(tag)} // 点击标签时调用onClickTag函数，传递标签文本\n+            onMouseEnter={() => setHoveredTag(tag)} // 鼠标悬浮时设置hoveredTag状态\n+            onMouseLeave={() => setHoveredTag(null)} // 鼠标离开时重置hoveredTag状态\n+            sx={{\n+              backgroundColor: hoveredTag === tag ? '#fff' : bgColor, // 如果当前标签被悬浮，背景设为白色，否则使用随机颜色\n+              color: hoveredTag === tag ? bgColor : '#fff', // 文本颜色与背景颜色对调\n+              fontWeight: 'bold',\n+              cursor: 'pointer', // 鼠标悬浮时显示手形图标\n+              '&:hover': {\n+                backgroundColor: '#fff', // 鼠标悬浮时背景色变为白色\n+                color: bgColor, // 鼠标悬浮时文本颜色变为背景色\n+              },\n+            }}\n+          />\n+        );\n+      })}\n     </Stack>\n   );\n };\n \n"
                },
                {
                    "date": 1708343541854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,37 @@\n-import React, { useState } from \"react\";\n-import { Chip, Stack } from \"@mui/material\";\n+import React from 'react';\n+import { Chip, Stack } from '@mui/material';\n \n // 随机颜色生成器\n const getRandomColor = () => {\n-  const colors = [\n-    \"#FF6384\",\n-    \"#36A2EB\",\n-    \"#FFCE56\",\n-    \"#cc65fe\",\n-    \"#ff7043\",\n-    \"#4caf50\",\n-    \"#2196f3\",\n-  ];\n+  const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#cc65fe', '#ff7043', '#4caf50', '#2196f3'];\n   return colors[Math.floor(Math.random() * colors.length)];\n };\n \n const Tags = ({ tags, onClickTag }) => {\n-  const [hoveredTag, setHoveredTag] = useState(null);\n-\n   return (\n-    <Stack direction=\"row\" spacing={1} sx={{ flexWrap: \"wrap\" }}>\n+    <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap' }}>\n       {tags.map((tag, index) => {\n-        const bgColor = getRandomColor();\n+        const borderColor = getRandomColor();\n         return (\n           <Chip\n             key={index}\n             label={tag}\n-            onClick={() => onClickTag(tag)} // 点击标签时调用onClickTag函数，传递标签文本\n-            onMouseEnter={() => setHoveredTag(tag)} // 鼠标悬浮时设置hoveredTag状态\n-            onMouseLeave={() => setHoveredTag(null)} // 鼠标离开时重置hoveredTag状态\n+            onClick={() => onClickTag(tag)}\n+            variant=\"outlined\"\n             sx={{\n-              backgroundColor: hoveredTag === tag ? \"#fff\" : bgColor, // 如果当前标签被悬浮，背景设为白色，否则使用随机颜色\n-              color: hoveredTag === tag ? bgColor : \"#fff\", // 文本颜色与背景颜色对调\n-              fontWeight: \"bold\",\n-              cursor: \"pointer\", // 鼠标悬浮时显示手形图标\n-              \"&:hover\": {\n-                backgroundColor: \"#fff\", // 鼠标悬浮时背景色变为白色\n-                color: bgColor, // 鼠标悬浮时文本颜色变为背景色\n+              border: `2px solid ${borderColor}`,\n+              color: borderColor,\n+              fontWeight: 'bold',\n+              cursor: 'pointer',\n+              borderRadius: '4px', // 调整圆角大小\n+              '&:hover': {\n+                backgroundColor: borderColor, // 鼠标悬浮时背景色变为边框颜色\n+                color: '#fff', // 鼠标悬浮时文本颜色变为白色\n               },\n+              // 长方形形状，可通过调整padding和fontSize来进一步定制\n+              padding: '0 8px',\n+              height: '32px',\n             }}\n           />\n         );\n       })}\n"
                }
            ],
            "date": 1708343108798,
            "name": "Commit-0",
            "content": "import React from 'react';\nimport { Chip, Stack } from '@mui/material';\n\n// 随机颜色生成器，用于为标签生成随机颜色\nconst getRandomColor = () => {\n  const colors = ['#FF6384', '#36A2EB', '#FFCE56', '#cc65fe', '#ff7043', '#4caf50', '#2196f3'];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\n\nconst Tags = ({ tags }) => {\n  return (\n    <Stack direction=\"row\" spacing={1} sx={{ flexWrap: 'wrap' }}>\n      {tags.map((tag, index) => (\n        <Chip\n          key={index}\n          label={tag}\n          sx={{ backgroundColor: getRandomColor(), color: 'white', fontWeight: 'bold' }}\n        />\n      ))}\n    </Stack>\n  );\n};\n\nexport default Tags;\n"
        }
    ]
}