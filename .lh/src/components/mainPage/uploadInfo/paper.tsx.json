{
    "sourceFile": "src/components/mainPage/uploadInfo/paper.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1711816299813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1711816452838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,29 +68,73 @@\n     >\n       <DialogContent>\n         {submitPaperOpen ? (\n           <>\n+<TextField\n+                label=\"Paper Name\"\n+                fullWidth\n+                variant=\"outlined\"\n+                value={newPaper.name}\n+                onChange={(e) =>\n+                    setNewPaper({ ...newPaper, name: e.target.value })\n+                }\n+            />\n             <TextField\n-              label=\"Paper Name\"\n-              fullWidth\n-              variant=\"outlined\"\n-              sx={{ mt: 2 }}\n-              value={newPaper.name}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, name: e.target.value })\n-              }\n+                label=\"Year\"\n+                fullWidth\n+                variant=\"outlined\"\n+                value={newPaper.year}\n+                onChange={(e) =>\n+                    setNewPaper({ ...newPaper, year: e.target.value })\n+                }\n             />\n             <TextField\n-              label=\"Year\"\n-              fullWidth\n-              variant=\"outlined\"\n-              sx={{ mt: 2 }}\n-              value={newPaper.year}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, year: e.target.value })\n-              }\n+                label=\"URL\"\n+                fullWidth\n+                variant=\"outlined\"\n+                value={newPaper.url}\n+                onChange={(e) =>\n+                    setNewPaper({ ...newPaper, url: e.target.value })\n+                }\n             />\n-          </>\n+            <TextField\n+                label=\"Abstract\"\n+                fullWidth\n+                multiline\n+                rows={4}\n+                variant=\"outlined\"\n+                value={newPaper.abstract}\n+                onChange={(e) =>\n+                    setNewPaper({ ...newPaper, abstract: e.target.value })\n+                }\n+            />\n+            <Autocomplete\n+                multiple\n+                options={authorSearchResult}\n+                getOptionLabel={(option) => `${option.name} - ${option.position} - ${option.affiliation}`}\n+                value={newPaper.authors}\n+                onChange={(event, newValue) => {\n+                    setNewPaper({ ...newPaper, authors: newValue });\n+                }}\n+                onInputChange={(event, newInputValue) => {\n+                    fetchAuthors(newInputValue);\n+                }}\n+                renderTags={(tagValue, getTagProps) =>\n+                    tagValue.map((option, index) => (\n+                        <Chip\n+                            label={`${option.name} - ${option.position} - ${option.affiliation}`}\n+                            {...getTagProps({ index })}\n+                        />\n+                    ))\n+                }\n+                renderInput={(params) => (\n+                    <TextField\n+                        {...params}\n+                        variant=\"outlined\"\n+                        label=\"Authors\"\n+                    />\n+                )}\n+            />\n         ) : (\n           <Autocomplete\n             freeSolo\n             options={paperSearchResult}\n"
                },
                {
                    "date": 1711816463559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n                         label=\"Authors\"\n                     />\n                 )}\n             />\n+          </>\n         ) : (\n           <Autocomplete\n             freeSolo\n             options={paperSearchResult}\n"
                },
                {
                    "date": 1711816487596,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n   const [paperSearchResult, setPaperSearchResult] = useState([]);\n   const [submitPaperOpen, setSubmitPaperOpen] = useState(false);\n   const [selectedPaper, setSelectedPaper] = useState(null);\n   const [paperDialogOpen, setPaperDialogOpen] = useState(false);\n+  const [authorSearchResult, setAuthorSearchResult] = useState([]);\n   const fetchPaperDetails = async (searchText) => {\n     if (!searchText.trim()) return;\n     const response = await fetch(\"/api/searchPaper\", {\n       method: \"POST\",\n"
                },
                {
                    "date": 1711816665726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,224 +14,179 @@\n   List,\n   ListItem,\n   ListItemText,\n   IconButton,\n-  DialogTitle,\n-  DialogContentText,\n } from \"@mui/material\";\n import CloseIcon from \"@mui/icons-material/Close\";\n import AddIcon from \"@mui/icons-material/Add\";\n-import Relation from \"./relation\";\n \n const Papers = ({ papers, setPapers, newPaper, setNewPaper, errors }) => {\n   const [paperSearchResult, setPaperSearchResult] = useState([]);\n   const [submitPaperOpen, setSubmitPaperOpen] = useState(false);\n-  const [selectedPaper, setSelectedPaper] = useState(null);\n   const [paperDialogOpen, setPaperDialogOpen] = useState(false);\n   const [authorSearchResult, setAuthorSearchResult] = useState([]);\n-  const fetchPaperDetails = async (searchText) => {\n-    if (!searchText.trim()) return;\n-    const response = await fetch(\"/api/searchPaper\", {\n-      method: \"POST\",\n-      headers: { \"Content-Type\": \"application/json\" },\n-      body: JSON.stringify({ name: searchText }),\n-    });\n-    const data = await response.json();\n-    setPaperSearchResult(Array.isArray(data) ? data : []);\n-  };\n+\n   const handlePaperDialogOpen = () => {\n     setPaperDialogOpen(true);\n   };\n \n   const handleRemovePaper = (index) => {\n     setPapers((prevPapers) => prevPapers.filter((_, i) => i !== index));\n   };\n \n-  const handleOpenSubmitPaper = () => {\n-    setSubmitPaperOpen(true);\n-  };\n-\n   const handlePaperDialogClose = () => {\n+    setPaperDialogOpen(false);\n     if (submitPaperOpen) {\n-      // clear new paper data\n-      setNewPaper({ name: \"\", year: \"\" });\n-      setSubmitPaperOpen(false); // Return to search paper view\n-    } else {\n-      setPaperDialogOpen(false); // Close dialog\n+      setSubmitPaperOpen(false);\n+      setNewPaper({ ...newPaper, authors: [] });\n     }\n   };\n \n+  const fetchAuthors = async (searchText) => {\n+    if (!searchText.trim()) return;\n+    const response = await fetch(\"/api/searchAdvisor\", {\n+      method: \"POST\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+      body: JSON.stringify({ name: searchText }),\n+    });\n+    const data = await response.json();\n+    setAuthorSearchResult(data);\n+  };\n+\n+  const handleAuthorChange = (event, newValue) => {\n+    setNewPaper({ ...newPaper, authors: newValue });\n+  };\n+\n+  const handleAuthorSearch = (event, newInputValue) => {\n+    fetchAuthors(newInputValue);\n+  };\n+\n   const renderPaperDialog = () => (\n     <Dialog\n       open={paperDialogOpen}\n       onClose={handlePaperDialogClose}\n       maxWidth=\"sm\"\n       fullWidth\n     >\n+      <DialogTitle>{submitPaperOpen ? \"Submit New Paper\" : \"Add Paper\"}</DialogTitle>\n       <DialogContent>\n-        {submitPaperOpen ? (\n-          <>\n+        <Grid container spacing={2}>\n+          <Grid item xs={12}>\n             <TextField\n               label=\"Paper Name\"\n               fullWidth\n               variant=\"outlined\"\n+              margin=\"dense\"\n               value={newPaper.name}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, name: e.target.value })\n-              }\n+              onChange={(e) => setNewPaper({ ...newPaper, name: e.target.value })}\n             />\n+          </Grid>\n+          <Grid item xs={12}>\n             <TextField\n               label=\"Year\"\n               fullWidth\n               variant=\"outlined\"\n+              margin=\"dense\"\n               value={newPaper.year}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, year: e.target.value })\n-              }\n+              onChange={(e) => setNewPaper({ ...newPaper, year: e.target.value })}\n             />\n-            <TextField\n-              label=\"URL\"\n-              fullWidth\n-              variant=\"outlined\"\n-              value={newPaper.url}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, url: e.target.value })\n-              }\n-            />\n-            <TextField\n-              label=\"Abstract\"\n-              fullWidth\n-              multiline\n-              rows={4}\n-              variant=\"outlined\"\n-              value={newPaper.abstract}\n-              onChange={(e) =>\n-                setNewPaper({ ...newPaper, abstract: e.target.value })\n-              }\n-            />\n-            <Autocomplete\n-              multiple\n-              options={authorSearchResult}\n-              getOptionLabel={(option) =>\n-                `${option.name} - ${option.position} - ${option.affiliation}`\n-              }\n-              value={newPaper.authors}\n-              onChange={(event, newValue) => {\n-                setNewPaper({ ...newPaper, authors: newValue });\n-              }}\n-              onInputChange={(event, newInputValue) => {\n-                fetchAuthors(newInputValue);\n-              }}\n-              renderTags={(tagValue, getTagProps) =>\n-                tagValue.map((option, index) => (\n-                  <Chip\n-                    label={`${option.name} - ${option.position} - ${option.affiliation}`}\n-                    {...getTagProps({ index })}\n-                  />\n-                ))\n-              }\n-              renderInput={(params) => (\n-                <TextField {...params} variant=\"outlined\" label=\"Authors\" />\n-              )}\n-            />\n-          </>\n-        ) : (\n-          <Autocomplete\n-            freeSolo\n-            options={paperSearchResult}\n-            getOptionLabel={(option) => `${option.name} - ${option.year}`}\n-            onInputChange={(event, newValue) => {\n-              console.log(\"fetching paper details\", newValue);\n-              fetchPaperDetails(newValue);\n-            }}\n-            onChange={(event, newValue) => {\n-              setSelectedPaper(newValue);\n-              // clear errors\n-              if (newValue) {\n-                setErrors({ ...errors, paper: \"\" });\n-              }\n-            }}\n-            renderInput={(params) => (\n-              <TextField\n-                {...params}\n-                label=\"Search Paper\"\n-                variant=\"outlined\"\n-                fullWidth\n-                error={errors.paper}\n-                helperText={errors.paper}\n-              />\n-            )}\n-          />\n-        )}\n-      </DialogContent>\n-\n-      <DialogActions>\n-        <Grid container justifyContent=\"center\" spacing={2}>\n-          <Grid item>\n-            <Button onClick={handlePaperDialogClose}>Cancel</Button>\n           </Grid>\n-          {!submitPaperOpen && (\n-            <Grid item>\n-              <Button onClick={() => addPaper(selectedPaper)}>Add Paper</Button>\n-            </Grid>\n+          {submitPaperOpen && (\n+            <>\n+              <Grid item xs={12}>\n+                <TextField\n+                  label=\"URL\"\n+                  fullWidth\n+                  variant=\"outlined\"\n+                  margin=\"dense\"\n+                  value={newPaper.url}\n+                  onChange={(e) => setNewPaper({ ...newPaper, url: e.target.value })}\n+                />\n+              </Grid>\n+              <Grid item xs={12}>\n+                <TextField\n+                  label=\"Abstract\"\n+                  fullWidth\n+                  variant=\"outlined\"\n+                  margin=\"dense\"\n+                  multiline\n+                  rows={4}\n+                  value={newPaper.abstract}\n+                  onChange={(e) =>\n+                    setNewPaper({ ...newPaper, abstract: e.target.value })\n+                  }\n+                />\n+              </Grid>\n+              <Grid item xs={12}>\n+                <Autocomplete\n+                  multiple\n+                  options={authorSearchResult}\n+                  getOptionLabel={(option) =>\n+                    `${option.name} - ${option.position} - ${option.affiliation}`\n+                  }\n+                  value={newPaper.authors}\n+                  onChange={handleAuthorChange}\n+                  onInputChange={handleAuthorSearch}\n+                  renderTags={(value, getTagProps) =>\n+                    value.map((option, index) => (\n+                      <Chip\n+                        key={index}\n+                        label={`${option.name} - ${option.position} - ${option.affiliation}`}\n+                        {...getTagProps({ index })}\n+                      />\n+                    ))\n+                  }\n+                  renderInput={(params) => (\n+                    <TextField\n+                      {...params}\n+                      variant=\"outlined\"\n+                      label=\"Authors\"\n+                      margin=\"dense\"\n+                    />\n+                  )}\n+                />\n+              </Grid>\n+            </>\n           )}\n-          {submitPaperOpen ? (\n-            <Grid item>\n-              <Button onClick={addPaper}>Confirm Submit</Button>\n-            </Grid>\n-          ) : (\n-            <Grid item>\n-              <Button onClick={handleOpenSubmitPaper}>Submit New Paper</Button>\n-            </Grid>\n-          )}\n         </Grid>\n+      </DialogContent>\n+      <DialogActions>\n+        <Button onClick={handlePaperDialogClose}>Cancel</Button>\n+        {submitPaperOpen && (\n+          <Button onClick={() => {}}>Confirm Submit</Button>\n+        )}\n+        {!submitPaperOpen && (\n+          <Button onClick={handleOpenSubmitPaper}>Submit New Paper</Button>\n+        )}\n       </DialogActions>\n     </Dialog>\n   );\n \n-  const addPaper = () => {\n-    // check whether a paper is selected\n-    console.log(selectedPaper);\n-    if (!selectedPaper) {\n-      setErrors({ paper: \"Please select a paper\" });\n-      return;\n-    }\n-    // check whether the paper is already added\n-    if (papers.find((paper) => paper._id === selectedPaper._id)) {\n-      setErrors({ paper: \"This paper is already added\" });\n-      return;\n-    }\n-    setPapers([...papers, selectedPaper]);\n-    console.log(papers);\n-    setPaperDialogOpen(false);\n-    setSubmitPaperOpen(false);\n-    setSelectedPaper(null);\n-  };\n-\n   return (\n     <Box>\n-      <Typography variant=\"h6\" sx={{ mt: 2, mb: 2 }}>\n-        Collaborated Papers\n-      </Typography>\n-      <Button startIcon={<AddIcon />} onClick={handlePaperDialogOpen}>\n-        Add Paper\n-      </Button>\n-      <List>\n-        {papers.map((paper, index) => (\n-          <ListItem\n-            key={index}\n-            secondaryAction={\n-              <IconButton edge=\"end\" onClick={() => handleRemovePaper(index)}>\n-                <CloseIcon />\n-              </IconButton>\n-            }\n-          >\n-            <ListItemText primary={paper?.name} secondary={paper?.year} />\n-          </ListItem>\n-        ))}\n-      </List>\n-\n-      {renderPaperDialog()}\n+      <CardContent>\n+        <Typography variant=\"h6\" gutterBottom>\n+          Collaborated Papers\n+        </Typography>\n+        <Button startIcon={<AddIcon />} onClick={handlePaperDialogOpen}>\n+          Add Paper\n+        </Button>\n+        <List>\n+          {papers.map((paper, index) => (\n+            <ListItem\n+              key={index}\n+              secondaryAction={\n+                <IconButton edge=\"end\" onClick={() => handleRemovePaper(index)}>\n+                  <CloseIcon />\n+                </IconButton>\n+              }\n+            >\n+              <ListItemText primary={paper?.name} secondary={paper?.year} />\n+            </ListItem>\n+          ))}\n+        </List>\n+        {renderPaperDialog()}\n+      </CardContent>\n     </Box>\n   );\n };\n \n"
                },
                {
                    "date": 1711816686947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,185 +14,224 @@\n   List,\n   ListItem,\n   ListItemText,\n   IconButton,\n+  DialogTitle,\n+  DialogContentText,\n } from \"@mui/material\";\n import CloseIcon from \"@mui/icons-material/Close\";\n import AddIcon from \"@mui/icons-material/Add\";\n+import Relation from \"./relation\";\n \n const Papers = ({ papers, setPapers, newPaper, setNewPaper, errors }) => {\n   const [paperSearchResult, setPaperSearchResult] = useState([]);\n   const [submitPaperOpen, setSubmitPaperOpen] = useState(false);\n+  const [selectedPaper, setSelectedPaper] = useState(null);\n   const [paperDialogOpen, setPaperDialogOpen] = useState(false);\n   const [authorSearchResult, setAuthorSearchResult] = useState([]);\n-\n+  const fetchPaperDetails = async (searchText) => {\n+    if (!searchText.trim()) return;\n+    const response = await fetch(\"/api/searchPaper\", {\n+      method: \"POST\",\n+      headers: { \"Content-Type\": \"application/json\" },\n+      body: JSON.stringify({ name: searchText }),\n+    });\n+    const data = await response.json();\n+    setPaperSearchResult(Array.isArray(data) ? data : []);\n+  };\n   const handlePaperDialogOpen = () => {\n     setPaperDialogOpen(true);\n   };\n \n   const handleRemovePaper = (index) => {\n     setPapers((prevPapers) => prevPapers.filter((_, i) => i !== index));\n   };\n \n+  const handleOpenSubmitPaper = () => {\n+    setSubmitPaperOpen(true);\n+  };\n+\n   const handlePaperDialogClose = () => {\n-    setPaperDialogOpen(false);\n     if (submitPaperOpen) {\n-      setSubmitPaperOpen(false);\n-      setNewPaper({ ...newPaper, authors: [] });\n+      // clear new paper data\n+      setNewPaper({ name: \"\", year: \"\" });\n+      setSubmitPaperOpen(false); // Return to search paper view\n+    } else {\n+      setPaperDialogOpen(false); // Close dialog\n     }\n   };\n \n-  const fetchAuthors = async (searchText) => {\n-    if (!searchText.trim()) return;\n-    const response = await fetch(\"/api/searchAdvisor\", {\n-      method: \"POST\",\n-      headers: { \"Content-Type\": \"application/json\" },\n-      body: JSON.stringify({ name: searchText }),\n-    });\n-    const data = await response.json();\n-    setAuthorSearchResult(data);\n-  };\n-\n-  const handleAuthorChange = (event, newValue) => {\n-    setNewPaper({ ...newPaper, authors: newValue });\n-  };\n-\n-  const handleAuthorSearch = (event, newInputValue) => {\n-    fetchAuthors(newInputValue);\n-  };\n-\n   const renderPaperDialog = () => (\n     <Dialog\n       open={paperDialogOpen}\n       onClose={handlePaperDialogClose}\n       maxWidth=\"sm\"\n       fullWidth\n     >\n-      <DialogTitle>\n-        {submitPaperOpen ? \"Submit New Paper\" : \"Add Paper\"}\n-      </DialogTitle>\n       <DialogContent>\n-        <Grid container spacing={2}>\n-          <Grid item xs={12}>\n+        {submitPaperOpen ? (\n+          <>\n             <TextField\n               label=\"Paper Name\"\n               fullWidth\n               variant=\"outlined\"\n-              margin=\"dense\"\n               value={newPaper.name}\n               onChange={(e) =>\n                 setNewPaper({ ...newPaper, name: e.target.value })\n               }\n             />\n-          </Grid>\n-          <Grid item xs={12}>\n             <TextField\n               label=\"Year\"\n               fullWidth\n               variant=\"outlined\"\n-              margin=\"dense\"\n               value={newPaper.year}\n               onChange={(e) =>\n                 setNewPaper({ ...newPaper, year: e.target.value })\n               }\n             />\n+            <TextField\n+              label=\"URL\"\n+              fullWidth\n+              variant=\"outlined\"\n+              value={newPaper.url}\n+              onChange={(e) =>\n+                setNewPaper({ ...newPaper, url: e.target.value })\n+              }\n+            />\n+            <TextField\n+              label=\"Abstract\"\n+              fullWidth\n+              multiline\n+              rows={4}\n+              variant=\"outlined\"\n+              value={newPaper.abstract}\n+              onChange={(e) =>\n+                setNewPaper({ ...newPaper, abstract: e.target.value })\n+              }\n+            />\n+            <Autocomplete\n+              multiple\n+              options={authorSearchResult}\n+              getOptionLabel={(option) =>\n+                `${option.name} - ${option.position} - ${option.affiliation}`\n+              }\n+              value={newPaper.authors}\n+              onChange={(event, newValue) => {\n+                setNewPaper({ ...newPaper, authors: newValue });\n+              }}\n+              onInputChange={(event, newInputValue) => {\n+                fetchAuthors(newInputValue);\n+              }}\n+              renderTags={(tagValue, getTagProps) =>\n+                tagValue.map((option, index) => (\n+                  <Chip\n+                    label={`${option.name} - ${option.position} - ${option.affiliation}`}\n+                    {...getTagProps({ index })}\n+                  />\n+                ))\n+              }\n+              renderInput={(params) => (\n+                <TextField {...params} variant=\"outlined\" label=\"Authors\" />\n+              )}\n+            />\n+          </>\n+        ) : (\n+          <Autocomplete\n+            freeSolo\n+            options={paperSearchResult}\n+            getOptionLabel={(option) => `${option.name} - ${option.year}`}\n+            onInputChange={(event, newValue) => {\n+              console.log(\"fetching paper details\", newValue);\n+              fetchPaperDetails(newValue);\n+            }}\n+            onChange={(event, newValue) => {\n+              setSelectedPaper(newValue);\n+              // clear errors\n+              if (newValue) {\n+                setErrors({ ...errors, paper: \"\" });\n+              }\n+            }}\n+            renderInput={(params) => (\n+              <TextField\n+                {...params}\n+                label=\"Search Paper\"\n+                variant=\"outlined\"\n+                fullWidth\n+                error={errors.paper}\n+                helperText={errors.paper}\n+              />\n+            )}\n+          />\n+        )}\n+      </DialogContent>\n+\n+      <DialogActions>\n+        <Grid container justifyContent=\"center\" spacing={2}>\n+          <Grid item>\n+            <Button onClick={handlePaperDialogClose}>Cancel</Button>\n           </Grid>\n-          {submitPaperOpen && (\n-            <>\n-              <Grid item xs={12}>\n-                <TextField\n-                  label=\"URL\"\n-                  fullWidth\n-                  variant=\"outlined\"\n-                  margin=\"dense\"\n-                  value={newPaper.url}\n-                  onChange={(e) =>\n-                    setNewPaper({ ...newPaper, url: e.target.value })\n-                  }\n-                />\n-              </Grid>\n-              <Grid item xs={12}>\n-                <TextField\n-                  label=\"Abstract\"\n-                  fullWidth\n-                  variant=\"outlined\"\n-                  margin=\"dense\"\n-                  multiline\n-                  rows={4}\n-                  value={newPaper.abstract}\n-                  onChange={(e) =>\n-                    setNewPaper({ ...newPaper, abstract: e.target.value })\n-                  }\n-                />\n-              </Grid>\n-              <Grid item xs={12}>\n-                <Autocomplete\n-                  multiple\n-                  options={authorSearchResult}\n-                  getOptionLabel={(option) =>\n-                    `${option.name} - ${option.position} - ${option.affiliation}`\n-                  }\n-                  value={newPaper.authors}\n-                  onChange={handleAuthorChange}\n-                  onInputChange={handleAuthorSearch}\n-                  renderTags={(value, getTagProps) =>\n-                    value.map((option, index) => (\n-                      <Chip\n-                        key={index}\n-                        label={`${option.name} - ${option.position} - ${option.affiliation}`}\n-                        {...getTagProps({ index })}\n-                      />\n-                    ))\n-                  }\n-                  renderInput={(params) => (\n-                    <TextField\n-                      {...params}\n-                      variant=\"outlined\"\n-                      label=\"Authors\"\n-                      margin=\"dense\"\n-                    />\n-                  )}\n-                />\n-              </Grid>\n-            </>\n+          {!submitPaperOpen && (\n+            <Grid item>\n+              <Button onClick={() => addPaper(selectedPaper)}>Add Paper</Button>\n+            </Grid>\n           )}\n+          {submitPaperOpen ? (\n+            <Grid item>\n+              <Button onClick={addPaper}>Confirm Submit</Button>\n+            </Grid>\n+          ) : (\n+            <Grid item>\n+              <Button onClick={handleOpenSubmitPaper}>Submit New Paper</Button>\n+            </Grid>\n+          )}\n         </Grid>\n-      </DialogContent>\n-      <DialogActions>\n-        <Button onClick={handlePaperDialogClose}>Cancel</Button>\n-        {submitPaperOpen && <Button onClick={() => {}}>Confirm Submit</Button>}\n-        {!submitPaperOpen && (\n-          <Button onClick={handleOpenSubmitPaper}>Submit New Paper</Button>\n-        )}\n       </DialogActions>\n     </Dialog>\n   );\n \n+  const addPaper = () => {\n+    // check whether a paper is selected\n+    console.log(selectedPaper);\n+    if (!selectedPaper) {\n+      setErrors({ paper: \"Please select a paper\" });\n+      return;\n+    }\n+    // check whether the paper is already added\n+    if (papers.find((paper) => paper._id === selectedPaper._id)) {\n+      setErrors({ paper: \"This paper is already added\" });\n+      return;\n+    }\n+    setPapers([...papers, selectedPaper]);\n+    console.log(papers);\n+    setPaperDialogOpen(false);\n+    setSubmitPaperOpen(false);\n+    setSelectedPaper(null);\n+  };\n+\n   return (\n     <Box>\n-      <CardContent>\n-        <Typography variant=\"h6\" gutterBottom>\n-          Collaborated Papers\n-        </Typography>\n-        <Button startIcon={<AddIcon />} onClick={handlePaperDialogOpen}>\n-          Add Paper\n-        </Button>\n-        <List>\n-          {papers.map((paper, index) => (\n-            <ListItem\n-              key={index}\n-              secondaryAction={\n-                <IconButton edge=\"end\" onClick={() => handleRemovePaper(index)}>\n-                  <CloseIcon />\n-                </IconButton>\n-              }\n-            >\n-              <ListItemText primary={paper?.name} secondary={paper?.year} />\n-            </ListItem>\n-          ))}\n-        </List>\n-        {renderPaperDialog()}\n-      </CardContent>\n+      <Typography variant=\"h6\" sx={{ mt: 2, mb: 2 }}>\n+        Collaborated Papers\n+      </Typography>\n+      <Button startIcon={<AddIcon />} onClick={handlePaperDialogOpen}>\n+        Add Paper\n+      </Button>\n+      <List>\n+        {papers.map((paper, index) => (\n+          <ListItem\n+            key={index}\n+            secondaryAction={\n+              <IconButton edge=\"end\" onClick={() => handleRemovePaper(index)}>\n+                <CloseIcon />\n+              </IconButton>\n+            }\n+          >\n+            <ListItemText primary={paper?.name} secondary={paper?.year} />\n+          </ListItem>\n+        ))}\n+      </List>\n+\n+      {renderPaperDialog()}\n     </Box>\n   );\n };\n \n"
                }
            ],
            "date": 1711816299813,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport {\n  Box,\n  Button,\n  CardContent,\n  Typography,\n  Grid,\n  TextField,\n  Autocomplete,\n  Chip,\n  Dialog,\n  DialogContent,\n  DialogActions,\n  List,\n  ListItem,\n  ListItemText,\n  IconButton,\n  DialogTitle,\n  DialogContentText,\n} from \"@mui/material\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport Relation from \"./relation\";\n\nconst Papers = ({ papers, setPapers, newPaper, setNewPaper, errors }) => {\n  const [paperSearchResult, setPaperSearchResult] = useState([]);\n  const [submitPaperOpen, setSubmitPaperOpen] = useState(false);\n  const [selectedPaper, setSelectedPaper] = useState(null);\n  const [paperDialogOpen, setPaperDialogOpen] = useState(false);\n  const fetchPaperDetails = async (searchText) => {\n    if (!searchText.trim()) return;\n    const response = await fetch(\"/api/searchPaper\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ name: searchText }),\n    });\n    const data = await response.json();\n    setPaperSearchResult(Array.isArray(data) ? data : []);\n  };\n  const handlePaperDialogOpen = () => {\n    setPaperDialogOpen(true);\n  };\n\n  const handleRemovePaper = (index) => {\n    setPapers((prevPapers) => prevPapers.filter((_, i) => i !== index));\n  };\n\n  const handleOpenSubmitPaper = () => {\n    setSubmitPaperOpen(true);\n  };\n\n  const handlePaperDialogClose = () => {\n    if (submitPaperOpen) {\n      // clear new paper data\n      setNewPaper({ name: \"\", year: \"\" });\n      setSubmitPaperOpen(false); // Return to search paper view\n    } else {\n      setPaperDialogOpen(false); // Close dialog\n    }\n  };\n\n  const renderPaperDialog = () => (\n    <Dialog\n      open={paperDialogOpen}\n      onClose={handlePaperDialogClose}\n      maxWidth=\"sm\"\n      fullWidth\n    >\n      <DialogContent>\n        {submitPaperOpen ? (\n          <>\n            <TextField\n              label=\"Paper Name\"\n              fullWidth\n              variant=\"outlined\"\n              sx={{ mt: 2 }}\n              value={newPaper.name}\n              onChange={(e) =>\n                setNewPaper({ ...newPaper, name: e.target.value })\n              }\n            />\n            <TextField\n              label=\"Year\"\n              fullWidth\n              variant=\"outlined\"\n              sx={{ mt: 2 }}\n              value={newPaper.year}\n              onChange={(e) =>\n                setNewPaper({ ...newPaper, year: e.target.value })\n              }\n            />\n          </>\n        ) : (\n          <Autocomplete\n            freeSolo\n            options={paperSearchResult}\n            getOptionLabel={(option) => `${option.name} - ${option.year}`}\n            onInputChange={(event, newValue) => {\n              console.log(\"fetching paper details\", newValue);\n              fetchPaperDetails(newValue);\n            }}\n            onChange={(event, newValue) => {\n              setSelectedPaper(newValue);\n              // clear errors\n              if (newValue) {\n                setErrors({ ...errors, paper: \"\" });\n              }\n            }}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Search Paper\"\n                variant=\"outlined\"\n                fullWidth\n                error={errors.paper}\n                helperText={errors.paper}\n              />\n            )}\n          />\n        )}\n      </DialogContent>\n\n      <DialogActions>\n        <Grid container justifyContent=\"center\" spacing={2}>\n          <Grid item>\n            <Button onClick={handlePaperDialogClose}>Cancel</Button>\n          </Grid>\n          {!submitPaperOpen && (\n            <Grid item>\n              <Button onClick={() => addPaper(selectedPaper)}>Add Paper</Button>\n            </Grid>\n          )}\n          {submitPaperOpen ? (\n            <Grid item>\n              <Button onClick={addPaper}>Confirm Submit</Button>\n            </Grid>\n          ) : (\n            <Grid item>\n              <Button onClick={handleOpenSubmitPaper}>Submit New Paper</Button>\n            </Grid>\n          )}\n        </Grid>\n      </DialogActions>\n    </Dialog>\n  );\n\n  const addPaper = () => {\n    // check whether a paper is selected\n    console.log(selectedPaper);\n    if (!selectedPaper) {\n      setErrors({ paper: \"Please select a paper\" });\n      return;\n    }\n    // check whether the paper is already added\n    if (papers.find((paper) => paper._id === selectedPaper._id)) {\n      setErrors({ paper: \"This paper is already added\" });\n      return;\n    }\n    setPapers([...papers, selectedPaper]);\n    console.log(papers);\n    setPaperDialogOpen(false);\n    setSubmitPaperOpen(false);\n    setSelectedPaper(null);\n  };\n\n  return (\n    <Box>\n      <Typography variant=\"h6\" sx={{ mt: 2, mb: 2 }}>\n        Collaborated Papers\n      </Typography>\n      <Button startIcon={<AddIcon />} onClick={handlePaperDialogOpen}>\n        Add Paper\n      </Button>\n      <List>\n        {papers.map((paper, index) => (\n          <ListItem\n            key={index}\n            secondaryAction={\n              <IconButton edge=\"end\" onClick={() => handleRemovePaper(index)}>\n                <CloseIcon />\n              </IconButton>\n            }\n          >\n            <ListItemText primary={paper?.name} secondary={paper?.year} />\n          </ListItem>\n        ))}\n      </List>\n\n      {renderPaperDialog()}\n    </Box>\n  );\n};\n\nexport default Papers;\n"
        }
    ]
}