{
    "sourceFile": "src/components/mainPage/dataRender/graphRender.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1708501877160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708501891556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n }\n \n let currentMain = 0; // 记录主要advisor的ID\n \n-const advisors: Advisor[] = require(\"data/advisors.json\");\n+const advisors: Advisor[] = require(\"@src/data/advisors.json\");\n \n const advisorsReader = (advisor_id: number) => {\n   const nodes: any[] = [];\n   const links: any[] = [];\n"
                },
                {
                    "date": 1708501902225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import ReactECharts from \"echarts-for-react\";\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  advisor_id: number;\n+  name: string;\n+  connections: {\n+    advisor_id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"@/src/data/advisors.json\");\n+\n+const advisorsReader = (advisor_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = advisor_id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor.advisor_id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor.advisor_id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor.advisor_id === connection.advisor_id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor.advisor_id === connection.advisor_id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?.advisor_id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor.advisor_id),\n+          target: String(connectedAdvisor?.advisor_id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, advisor_id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, advisor_id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(advisor_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
                },
                {
                    "date": 1708501909080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n }\n \n let currentMain = 0; // 记录主要advisor的ID\n \n-const advisors: Advisor[] = require(\"@/src/data/advisors.json\");\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n const advisorsReader = (advisor_id: number) => {\n   const nodes: any[] = [];\n   const links: any[] = [];\n@@ -394,401 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-import ReactECharts from \"echarts-for-react\";\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  advisor_id: number;\n-  name: string;\n-  connections: {\n-    advisor_id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"@src/data/advisors.json\");\n-\n-const advisorsReader = (advisor_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = advisor_id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor.advisor_id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor.advisor_id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor.advisor_id === connection.advisor_id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor.advisor_id === connection.advisor_id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?.advisor_id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor.advisor_id),\n-          target: String(connectedAdvisor?.advisor_id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, advisor_id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, advisor_id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(advisor_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: false,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
                },
                {
                    "date": 1708503422707,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  advisor_id: number;\n+  name: string;\n+  connections: {\n+    advisor_id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (advisor_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = advisor_id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor.advisor_id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor.advisor_id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor.advisor_id === connection.advisor_id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor.advisor_id === connection.advisor_id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?.advisor_id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor.advisor_id),\n+          target: String(connectedAdvisor?.advisor_id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, advisor_id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, advisor_id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(advisor_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
                }
            ],
            "date": 1708501877160,
            "name": "Commit-0",
            "content": "import React, { useEffect, useRef, useState } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport * as echarts from \"echarts/core\";\nimport { GraphChart } from \"echarts/charts\";\nimport { useRouter } from \"next/router\";\n\nimport { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n\nimport { SVGRenderer } from \"echarts/renderers\";\n\nconst generateGraphData = (nodesCount: number) => {\n  const nodes = [];\n  const links = [];\n\n  // 主节点\n  nodes.push({\n    name: \"Main Node\",\n    category: 0,\n    symbolSize: 70,\n    itemStyle: { color: \"red\" },\n  });\n\n  // 其他节点\n  for (let i = 1; i <= nodesCount; i++) {\n    nodes.push({\n      name: `Node ${i}`,\n      category: 1,\n      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n      itemStyle: { color: \"grey\" },\n    });\n    links.push({\n      source: \"Main Node\",\n      target: `Node ${i}`,\n    });\n  }\n\n  return { nodes, links };\n};\n\n// 注册必要的组件\necharts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\ninterface Advisor {\n  advisor_id: number;\n  name: string;\n  connections: {\n    advisor_id: number;\n    relation: Array<{\n      class: string;\n      role: string;\n      duration: {\n        start: { year: number; month: number };\n        end: { year: number; month: number };\n      };\n    }>;\n    collaborations: Array<{\n      papername: string;\n      year: number;\n      url: string;\n    }>;\n    latestCollaboration: number;\n    relationFactor: number;\n  }[];\n}\n\nlet currentMain = 0; // 记录主要advisor的ID\n\nconst advisors: Advisor[] = require(\"data/advisors.json\");\n\nconst advisorsReader = (advisor_id: number) => {\n  const nodes: any[] = [];\n  const links: any[] = [];\n  currentMain = advisor_id; // 更新主要advisor的ID\n  let minYear = new Date().getFullYear(); // 初始化为当前年份\n  let maxYear = 0; // 初始化为0\n  const currentYear = new Date().getFullYear();\n  const minRelationFactor = Math.min(\n    ...advisors.flatMap((advisor) =>\n      advisor.connections.map((conn) => conn.relationFactor)\n    )\n  );\n  const maxRelationFactor = Math.max(\n    ...advisors.flatMap((advisor) =>\n      advisor.connections.map((conn) => conn.relationFactor)\n    )\n  );\n\n  // 找到与currentMain匹配的advisor节点\n  const mainAdvisor = advisors.find(\n    (advisor) => advisor.advisor_id === currentMain\n  );\n\n  if (mainAdvisor) {\n    nodes.push({\n      id: String(mainAdvisor.advisor_id),\n      symbolSize: 200, // main节点的大小\n      itemStyle: { color: \"red\" }, // main节点为红色\n      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n      ...mainAdvisor,\n    });\n\n    mainAdvisor.connections.forEach((connection) => {\n      const connectedAdvisor = advisors.find(\n        (advisor) => advisor.advisor_id === connection.advisor_id\n      );\n      if (connectedAdvisor) {\n        const connectedAdvisor = advisors.find(\n          (advisor) => advisor.advisor_id === connection.advisor_id\n        );\n\n        const latestYear = connection.collaborations.reduce(\n          (max, collab) => Math.max(max, collab.year),\n          0\n        );\n\n        minYear = Math.min(minYear, latestYear);\n        maxYear = Math.max(maxYear, latestYear);\n\n        const symbolSize = 20 + connection.relationFactor * 0.5;\n\n        nodes.push({\n          id: String(connectedAdvisor?.advisor_id),\n          symbolSize: symbolSize,\n          latestCollaboration: latestYear,\n          ...connectedAdvisor,\n        });\n\n        links.push({\n          source: String(mainAdvisor.advisor_id),\n          target: String(connectedAdvisor?.advisor_id),\n          value: connection.relationFactor,\n          lineStyle: {\n            width:\n              1 +\n              (4 * (connection.relationFactor - minRelationFactor)) /\n                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n            curveness: 0.1, // 连线的曲度\n          },\n          tooltip: {\n            show: true,\n            formatter: () =>\n              `Relation factor: ${\n                connection.relationFactor\n              }<br/>${connection.relation\n                .map(\n                  (rel) =>\n                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n                )\n                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n                .map(\n                  (collab) =>\n                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n                )\n                .join(\", \")}`,\n          },\n        });\n      }\n    });\n  }\n\n  return { nodes, links, minYear, maxYear, advisor_id };\n};\n\n// @ts-ignore\nconst GraphRender = ({ onNodeHover, onNodeClick, advisor_id }) => {\n  const chartRef = useRef(null);\n  const [option, setOption] = useState({}); // 用于存储图表配置\n  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n  const router = useRouter();\n\n  useEffect(() => {\n    if (chartRef.current && !myChart) {\n      const initializedChart = echarts.init(chartRef.current, null, {\n        renderer: \"svg\",\n      });\n      // @ts-ignore\n      setMyChart(initializedChart); // 保存 echarts 实例\n    }\n\n    if (myChart) {\n      const { nodes, links, minYear, maxYear } = advisorsReader(advisor_id);\n\n      // 更新节点样式，为选中节点添加边框\n      // @ts-ignore\n      const updateNodesStyle = (nodes, selectedNodeId) => {\n        // @ts-ignore\n        return nodes.map((node) => {\n          if (node.id === selectedNodeId) {\n            return {\n              ...node,\n              itemStyle: {\n                ...node.itemStyle,\n                borderColor: \"blue\",\n                borderWidth: 3,\n                borderType: \"solid\",\n              },\n            };\n          }\n          return {\n            ...node,\n            itemStyle: {\n              ...node.itemStyle,\n              borderColor: \"none\",\n              borderWidth: 0,\n            },\n          };\n        });\n      };\n\n      nodes.forEach((node) => {\n        node.label = {\n          show: true,\n          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n          offset: [0, 10 + node.symbolSize / 4],\n        };\n      });\n\n      const updatedNodes = nodes.map((node) => {\n        // 主节点保持红色，其他节点颜色由 visualMap 控制\n        if (node.id !== currentMain) {\n          return {\n            ...node,\n            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n          };\n        }\n        return node;\n      });\n\n      const initialOption = {\n        title: {\n          text: \"科研合作网络图\",\n          top: \"bottom\",\n          left: \"right\",\n        },\n        visualMap: {\n          show: true,\n          type: \"continuous\",\n          min: minYear,\n          max: maxYear,\n          calculable: false,\n          orient: \"horizontal\",\n          left: \"80%\",\n\n          inRange: {\n            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n          },\n          textStyle: {\n            color: \"#333\",\n          },\n          // 显示两端的数值\n          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n          textGap: 5, // 文本与滑块之间的距离\n        },\n        tooltip: {\n          show: true,\n          formatter: (params: any) => {\n            if (params.dataType === \"edge\") {\n              return params.data.tooltip;\n            }\n            return params.data.name;\n          },\n        },\n        legend: {\n          data: [\"Main Node\", \"Other\"],\n        },\n        series: [\n          {\n            name: \"科研合作\",\n            type: \"graph\",\n            layout: \"force\",\n            layoutAnimation: false,\n            data: updateNodesStyle(updatedNodes, selectedNodeId),\n            links: links,\n            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n            roam: true,\n            label: {\n              show: true,\n              position: \"top\", // 将标签放置在节点的上方\n              formatter: \"{b}\", // 使用节点的name作为标签文本\n            },\n            force: {\n              repulsion: 500,\n              edgeLength: 400,\n            },\n            lineStyle: {\n              color: \"source\",\n              curveness: 0.3,\n            },\n            emphasis: {\n              focus: \"self\", // 鼠标悬浮时只强调当前节点\n              itemStyle: {\n                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n                borderWidth: 3, // 强调时的边框宽度\n                borderType: \"solid\", // 边框类型\n                shadowBlur: 10, // 阴影的模糊大小\n                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n              },\n            },\n            // 设置选中状态（如果需要）的样式\n          },\n        ],\n      };\n\n      setOption(initialOption); // 设置图表配置\n      // @ts-ignore\n      myChart.setOption(initialOption); // 初始化图表\n\n      // 监听节点的鼠标悬停事件\n      // @ts-ignore\n      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n        if (params.dataType === \"node\") {\n          // 只有当节点未被选中时，才应用悬浮样式\n          // @ts-ignore\n          if (!selectedNode || params.data.id !== selectedNode.id) {\n            // 应用悬浮样式\n            onNodeHover(params.data);\n          }\n        }\n      });\n\n      // 监听鼠标离开图表事件\n      // @ts-ignore\n      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n        if (params.dataType === \"node\") {\n          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n          // @ts-ignore\n          if (!selectedNode || params.data.id !== selectedNode.id) {\n            // 恢复节点原样式\n            onNodeHover(null); // 鼠标离开时清除选中的节点\n          }\n        }\n      });\n\n      // 处理节点点击事件\n      // @ts-ignore\n      myChart.on(\"click\", function (params: any) {\n        if (params.dataType === \"node\") {\n          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n          onNodeClick(params.data);\n        }\n        if (params.dataType === \"edge\") {\n          // 如果是边（edge）的点击事件，不执行任何操作\n          console.log(\"Edge click detected, action will be ignored.\");\n          setSelectedNodeId(null); // 更新选中节点的ID\n          onNodeClick(null);\n          return; // 直接返回，不执行后续代码\n        }\n        // 重新应用图表配置以更新节点样式\n        // @ts-ignore\n        myChart.setOption({\n          series: [\n            {\n              data: updateNodesStyle(nodes, selectedNodeId),\n            },\n          ],\n        });\n      });\n\n      // @ts-ignore\n      myChart.on(\"graphRoam\", function (event) {\n        if (event.zoom) {\n          // @ts-ignore\n          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n          setZoomFactor(zoomLevel); // 更新缩放因子状态\n          // @ts-ignore\n          myChart.setOption({\n            series: [\n              {\n                label: {\n                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n                },\n              },\n            ],\n          });\n        }\n      });\n\n      // 清理工作\n\n      return () => {\n        // @ts-ignore\n        myChart.off(\"graphRoam\");\n        // @ts-ignore\n        myChart.off(\"mouseover\");\n        // @ts-ignore\n        myChart.off(\"mouseout\");\n      };\n    }\n  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n\n  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n};\n\nexport default GraphRender;\n"
        }
    ]
}