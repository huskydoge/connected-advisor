{
  "sourceFile": "src/components/mainPage/dataRender/graphRender.tsx",
  "activeCommit": 0,
  "commits": [
    {
      "activePatchIndex": 161,
      "patches": [
        {
          "date": 1708501877160,
          "content": "Index: \n===================================================================\n--- \n+++ \n"
        },
        {
          "date": 1708501891556,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n }\n \n let currentMain = 0; // 记录主要advisor的ID\n \n-const advisors: Advisor[] = require(\"data/advisors.json\");\n+const advisors: Advisor[] = require(\"@src/data/advisors.json\");\n \n const advisorsReader = (_id: number) => {\n   const nodes: any[] = [];\n   const links: any[] = [];\n"
        },
        {
          "date": 1708501902225,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+import ReactECharts from \"echarts-for-react\";\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"@/src/data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708501909080,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n }\n \n let currentMain = 0; // 记录主要advisor的ID\n \n-const advisors: Advisor[] = require(\"@/src/data/advisors.json\");\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n const advisorsReader = (_id: number) => {\n   const nodes: any[] = [];\n   const links: any[] = [];\n@@ -394,401 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-import ReactECharts from \"echarts-for-react\";\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"@src/data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: false,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708503422707,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524227147,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,405 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-import ReactECharts from \"echarts-for-react\";\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: false,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524264204,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524318798,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,401 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: false,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524340728,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n+  return <div ref={chartRef} style={{ width: \"60vw\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708524351470,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          calculable: false,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"60vw\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524362169,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,405 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"60vw\", height: \"90vh\" }} />;\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: false,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"60vw\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524443491,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -238,9 +238,9 @@\n           show: true,\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n-          calculable: false,\n+          calculable: true,\n           orient: \"horizontal\",\n           left: \"80%\",\n \n           inRange: {\n"
        },
        {
          "date": 1708524450522,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -241,8 +241,9 @@\n           max: maxYear,\n           calculable: true,\n           orient: \"horizontal\",\n           left: \"80%\",\n+          bottom\": \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n"
        },
        {
          "date": 1708524472593,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"80%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524493263,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"90%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"100vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524508576,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"90%\",\n+          left: \"99%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n@@ -390,803 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"100vh\" }} />;\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          calculable: true,\n-          orient: \"horizontal\",\n-          left: \"80%\",\n-          bottom\": \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"90vh\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524526063,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"90%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524531466,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"90%\",\n+          left: \"85%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n@@ -394,401 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"99%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524883174,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,416 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  function updateVisualMapPosition() {\n+    // 获取视窗宽度和高度\n+    const windowWidth = window.innerWidth;\n+    const windowHeight = window.innerHeight;\n+\n+    // 动态计算 visualMap 的位置\n+    // 示例：将 visualMap 位置设置为视窗底部和左侧的一定比例或固定值\n+    const bottom = Math.max(30, windowHeight * 0.05) + \"px\"; // 至少30px或视窗高度的5%\n+    const left = Math.max(20, windowWidth * 0.05) + \"px\"; // 至少20px或视窗宽度的5%\n+\n+    // 更新图表配置\n+    myChart.setOption({\n+      visualMap: {\n+        bottom: bottom,\n+        left: left,\n+      },\n+    });\n+  }\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"85%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708524892279,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,9 +180,10 @@\n     const bottom = Math.max(30, windowHeight * 0.05) + \"px\"; // 至少30px或视窗高度的5%\n     const left = Math.max(20, windowWidth * 0.05) + \"px\"; // 至少20px或视窗宽度的5%\n \n     // 更新图表配置\n-    myChart.setOption({\n+    // @ts-ignore\n+    myChart?.setOption({\n       visualMap: {\n         bottom: bottom,\n         left: left,\n       },\n@@ -413,401 +414,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"85%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708524913437,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,425 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  function updateVisualMapPosition() {\n+    // 获取视窗宽度和高度\n+    const windowWidth = window.innerWidth;\n+    const windowHeight = window.innerHeight;\n+\n+    // 动态计算 visualMap 的位置\n+    // 示例：将 visualMap 位置设置为视窗底部和左侧的一定比例或固定值\n+    const bottom = Math.max(30, windowHeight * 0.05) + \"px\"; // 至少30px或视窗高度的5%\n+    const left = Math.max(20, windowWidth * 0.05) + \"px\"; // 至少20px或视窗宽度的5%\n+\n+    // 更新图表配置\n+    // @ts-ignore\n+    myChart?.setOption({\n+      visualMap: {\n+        bottom: bottom,\n+        left: left,\n+      },\n+    });\n+  }\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 在初始化时更新位置\n+      updateVisualMapPosition();\n+\n+      // 监听窗口 resize 事件以响应视窗大小变化\n+      window.addEventListener(\"resize\", () => {\n+        updateVisualMapPosition();\n+      });\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"85%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525119615,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -422,421 +422,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  function updateVisualMapPosition() {\n-    // 获取视窗宽度和高度\n-    const windowWidth = window.innerWidth;\n-    const windowHeight = window.innerHeight;\n-\n-    // 动态计算 visualMap 的位置\n-    // 示例：将 visualMap 位置设置为视窗底部和左侧的一定比例或固定值\n-    const bottom = Math.max(30, windowHeight * 0.05) + \"px\"; // 至少30px或视窗高度的5%\n-    const left = Math.max(20, windowWidth * 0.05) + \"px\"; // 至少20px或视窗宽度的5%\n-\n-    // 更新图表配置\n-    // @ts-ignore\n-    myChart?.setOption({\n-      visualMap: {\n-        bottom: bottom,\n-        left: left,\n-      },\n-    });\n-  }\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"85%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708525141385,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,28 +169,8 @@\n   const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n   const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n   const router = useRouter();\n \n-  function updateVisualMapPosition() {\n-    // 获取视窗宽度和高度\n-    const windowWidth = window.innerWidth;\n-    const windowHeight = window.innerHeight;\n-\n-    // 动态计算 visualMap 的位置\n-    // 示例：将 visualMap 位置设置为视窗底部和左侧的一定比例或固定值\n-    const bottom = Math.max(30, windowHeight * 0.05) + \"px\"; // 至少30px或视窗高度的5%\n-    const left = Math.max(20, windowWidth * 0.05) + \"px\"; // 至少20px或视窗宽度的5%\n-\n-    // 更新图表配置\n-    // @ts-ignore\n-    myChart?.setOption({\n-      visualMap: {\n-        bottom: bottom,\n-        left: left,\n-      },\n-    });\n-  }\n-\n   useEffect(() => {\n     if (chartRef.current && !myChart) {\n       const initializedChart = echarts.init(chartRef.current, null, {\n         renderer: \"svg\",\n@@ -201,16 +181,8 @@\n \n     if (myChart) {\n       const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n \n-      // 在初始化时更新位置\n-      updateVisualMapPosition();\n-\n-      // 监听窗口 resize 事件以响应视窗大小变化\n-      window.addEventListener(\"resize\", () => {\n-        updateVisualMapPosition();\n-      });\n-\n       // 更新节点样式，为选中节点添加边框\n       // @ts-ignore\n       const updateNodesStyle = (nodes, selectedNodeId) => {\n         // @ts-ignore\n@@ -267,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"85%\",\n+          left: \"90%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525147168,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"90%\",\n+          left: \"9rem\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525153885,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"9rem\",\n+          left: \"90rem\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525166533,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"90rem\",\n+          left: \"1rem\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525179380,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,11 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"1rem\",\n-          bottom: \"10%\",\n-\n+          left: \"center\",\n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n           textStyle: {\n"
        },
        {
          "date": 1708525187370,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"center\",\n+          left: \"left\",\n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n           textStyle: {\n"
        },
        {
          "date": 1708525194022,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,395 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"left:20%\",\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525201322,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"left:20%\",\n+          left: \"1%\",\n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n           textStyle: {\n@@ -392,399 +392,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"left\",\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708525226944,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"1%\",\n+          left: \"center\",\n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n           textStyle: {\n"
        },
        {
          "date": 1708525232224,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,395 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"center\",\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525237666,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"center\",\n+          bottom: 20,\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525243458,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,395 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525255794,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,396 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+\n+          left: \"80%\",\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525270546,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"9%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100vh\", height: \"100vh\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525283453,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -394,1981 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100vh\", height: \"100vh\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-\n-          left: \"80%\",\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"center\",\n-          bottom: 20,\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"center\",\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"center\",\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708525290359,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"9%\",\n+          left: \"1%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525296667,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"1%\",\n+          left: \"5%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525354698,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -239,9 +239,9 @@\n           type: \"continuous\",\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n-          left: \"5%\",\n+          left: \"3%\",\n           bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n"
        },
        {
          "date": 1708525400900,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"100vh\", height: \"100vh\" }} />;\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708525417921,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n           left: \"3%\",\n-          bottom: \"10%\",\n+          bottom: \"1%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n"
        },
        {
          "date": 1708525424549,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -240,9 +240,9 @@\n           min: minYear,\n           max: maxYear,\n           orient: \"horizontal\",\n           left: \"3%\",\n-          bottom: \"1%\",\n+          bottom: \"10%\",\n \n           inRange: {\n             color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n           },\n"
        },
        {
          "date": 1708525453926,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"80%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708525461039,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"80%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"60%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708525471672,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"60%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"40%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708525478311,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"60%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525484724,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"70%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525491311,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+const generateGraphData = (nodesCount: number) => {\n+  const nodes = [];\n+  const links = [];\n+\n+  // 主节点\n+  nodes.push({\n+    name: \"Main Node\",\n+    category: 0,\n+    symbolSize: 70,\n+    itemStyle: { color: \"red\" },\n+  });\n+\n+  // 其他节点\n+  for (let i = 1; i <= nodesCount; i++) {\n+    nodes.push({\n+      name: `Node ${i}`,\n+      category: 1,\n+      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n+      itemStyle: { color: \"grey\" },\n+    });\n+    links.push({\n+      source: \"Main Node\",\n+      target: `Node ${i}`,\n+    });\n+  }\n+\n+  return { nodes, links };\n+};\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"80%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708525501667,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,1199 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"80%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"98%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"70%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"60%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"40%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708525513319,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"98%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"90%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708525552898,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -390,8 +390,8 @@\n       };\n     }\n   }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n \n-  return <div ref={chartRef} style={{ width: \"90%\", height: \"100%\" }} />;\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n"
        },
        {
          "date": 1708528668855,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,37 +7,8 @@\n import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n \n import { SVGRenderer } from \"echarts/renderers\";\n \n-const generateGraphData = (nodesCount: number) => {\n-  const nodes = [];\n-  const links = [];\n-\n-  // 主节点\n-  nodes.push({\n-    name: \"Main Node\",\n-    category: 0,\n-    symbolSize: 70,\n-    itemStyle: { color: \"red\" },\n-  });\n-\n-  // 其他节点\n-  for (let i = 1; i <= nodesCount; i++) {\n-    nodes.push({\n-      name: `Node ${i}`,\n-      category: 1,\n-      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n-      itemStyle: { color: \"grey\" },\n-    });\n-    links.push({\n-      source: \"Main Node\",\n-      target: `Node ${i}`,\n-    });\n-  }\n-\n-  return { nodes, links };\n-};\n-\n // 注册必要的组件\n echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n interface Advisor {\n   _id: number;\n"
        },
        {
          "date": 1708529255772,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,369 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708529267890,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,370 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // Step2: push connected advisors of main node to nodes\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708529452155,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,10 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n+  let graphDegree = 1; // default graph degree is 1\n+\n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n@@ -127,377 +129,10 @@\n           },\n         });\n       }\n     });\n-  }\n \n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then continue to push the connected advisors\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n@@ -736,372 +371,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708529488753,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,9 @@\n         });\n       }\n     });\n \n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then continue to push the connected advisors\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708529518061,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,9 +130,11 @@\n         });\n       }\n     });\n \n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708529525339,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     });\n \n     // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists)\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708529538071,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,376 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1; // default graph degree is 1\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // Step2: push connected advisors of main node to nodes\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections)\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708529590918,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -132,9 +132,9 @@\n     });\n \n     // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections)\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n@@ -373,380 +373,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1; // default graph degree is 1\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // Step2: push connected advisors of main node to nodes\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists)\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708529620921,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,8 +133,9 @@\n \n     // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n     // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708529872980,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,11 @@\n   );\n \n   let graphDegree = 1; // default graph degree is 1\n \n+  let nodesSet = new Set(); // 存储节点ID，确保不重复\n+  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n+\n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n"
        },
        {
          "date": 1708529897542,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,8 +64,30 @@\n \n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n+  function addNode(advisor, connection = null) {\n+    let symbolSize = 20; // 默认大小\n+    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n+    if (connection) {\n+      latestYear = connection.collaborations.reduce(\n+        (max, collab) => Math.max(max, collab.year),\n+        0\n+      );\n+      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n+    }\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      itemStyle: {\n+        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n+      }, // 主节点为红色\n+      latestCollaboration: latestYear,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n"
        },
        {
          "date": 1708529905451,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n-  function addNode(advisor, connection = null) {\n+  function addNode(advisor: any, connection = null) {\n     let symbolSize = 20; // 默认大小\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n"
        },
        {
          "date": 1708529953307,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,47 @@\n     });\n     nodesSet.add(advisor._id);\n   }\n \n+  function addLink(sourceId, targetId, connection) {\n+    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksMap.has(linkKey)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - minRelationFactor)) /\n+              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+          curveness: 0.1, // 连线的曲度\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () =>\n+            `Relation factor: ${\n+              connection.relationFactor\n+            }<br/>${connection.relation\n+              .map(\n+                (rel) =>\n+                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+              )\n+              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+              .map(\n+                (collab) =>\n+                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+              )\n+              .join(\", \")}`,\n+        },\n+      });\n+      linksMap.set(linkKey, true);\n+    }\n+  }\n+\n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n"
        },
        {
          "date": 1708529974958,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,8 +86,9 @@\n     });\n     nodesSet.add(advisor._id);\n   }\n \n+  // @ts-ignore\n   function addLink(sourceId, targetId, connection) {\n     const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n       sourceId,\n       targetId\n"
        },
        {
          "date": 1708530018210,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,72 +128,23 @@\n   }\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n+    // Step2: push connected advisors of main node to nodes\n+    addNode(mainAdvisor);\n \n-    // Step2: push connected advisors of main node to nodes\n+    // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(connectedAdvisor, connection);\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n         );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n       }\n     });\n \n     // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n"
        },
        {
          "date": 1708530085319,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n   function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n+    let symbolSize = 200; // 默认大小\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n         (max, collab) => Math.max(max, collab.year),\n"
        },
        {
          "date": 1708530109903,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n-  function addNode(advisor: any, connection = null) {\n+  function addNode(advisor: any, connection = null, symbolSize = 20) {\n     let symbolSize = 200; // 默认大小\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n"
        },
        {
          "date": 1708530117770,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,8 @@\n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n   function addNode(advisor: any, connection = null, symbolSize = 20) {\n-    let symbolSize = 200; // 默认大小\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n         (max, collab) => Math.max(max, collab.year),\n"
        },
        {
          "date": 1708530131150,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     // Step2: push connected advisors of main node to nodes\n-    addNode(mainAdvisor);\n+    addNode(mainAdvisor, (symbolSize = 200));\n \n     // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n"
        },
        {
          "date": 1708530184827,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n \n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n-  function addNode(advisor: any, connection = null, symbolSize = 20) {\n+  function addNode(advisor: any, symbolSize = 20, connection = null) {\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n         (max, collab) => Math.max(max, collab.year),\n@@ -128,9 +128,9 @@\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     // Step2: push connected advisors of main node to nodes\n-    addNode(mainAdvisor, (symbolSize = 200));\n+    addNode(advisor: mainAdvisor, 200);\n \n     // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n"
        },
        {
          "date": 1708530203786,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     // Step2: push connected advisors of main node to nodes\n-    addNode(advisor: mainAdvisor, 200);\n+    addNode(mainAdvisor, 200);\n \n     // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n"
        },
        {
          "date": 1708530291288,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,10 @@\n \n   let nodesSet = new Set(); // 存储节点ID，确保不重复\n   let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n \n-  function addNode(advisor: any, symbolSize = 20, connection = null) {\n+  function addNode(advisor: any, connection = null) {\n+    let symbolSize = 20; // 默认大小\n     let latestYear = new Date().getFullYear(); // 默认最近合作时间\n     if (connection) {\n       latestYear = connection.collaborations.reduce(\n         (max, collab) => Math.max(max, collab.year),\n@@ -128,9 +129,9 @@\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     // Step2: push connected advisors of main node to nodes\n-    addNode(mainAdvisor, 200);\n+    addNode(mainAdvisor);\n \n     // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n"
        },
        {
          "date": 1708530299620,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,401 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1; // default graph degree is 1\n+\n+  let nodesSet = new Set(); // 存储节点ID，确保不重复\n+  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n+\n+  function addNode(advisor: any, connection = null) {\n+    let symbolSize = 20; // 默认大小\n+    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n+    if (connection) {\n+      latestYear = connection.collaborations.reduce(\n+        (max, collab) => Math.max(max, collab.year),\n+        0\n+      );\n+      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n+    }\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      itemStyle: {\n+        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n+      }, // 主节点为红色\n+      latestCollaboration: latestYear,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n+  // @ts-ignore\n+  function addLink(sourceId, targetId, connection) {\n+    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksMap.has(linkKey)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - minRelationFactor)) /\n+              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+          curveness: 0.1, // 连线的曲度\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () =>\n+            `Relation factor: ${\n+              connection.relationFactor\n+            }<br/>${connection.relation\n+              .map(\n+                (rel) =>\n+                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+              )\n+              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+              .map(\n+                (collab) =>\n+                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+              )\n+              .join(\", \")}`,\n+        },\n+      });\n+      linksMap.set(linkKey, true);\n+    }\n+  }\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // Step2: push connected advisors of main node to nodes\n+    addNode(mainAdvisor);\n+\n+    // 添加主顾问的直接连接\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(connectedAdvisor, connection);\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708530317694,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1; // default graph degree is 1\n+\n+  let nodesSet = new Set(); // 存储节点ID，确保不重复\n+  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n+\n+  function addNode(advisor: any, connection = null) {\n+    let symbolSize = 20; // 默认大小\n+    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n+    if (connection) {\n+      latestYear = connection.collaborations.reduce(\n+        (max, collab) => Math.max(max, collab.year),\n+        0\n+      );\n+      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n+    }\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      itemStyle: {\n+        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n+      }, // 主节点为红色\n+      latestCollaboration: latestYear,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n+  // @ts-ignore\n+  function addLink(sourceId, targetId, connection) {\n+    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksMap.has(linkKey)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - minRelationFactor)) /\n+              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+          curveness: 0.1, // 连线的曲度\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () =>\n+            `Relation factor: ${\n+              connection.relationFactor\n+            }<br/>${connection.relation\n+              .map(\n+                (rel) =>\n+                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+              )\n+              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+              .map(\n+                (collab) =>\n+                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+              )\n+              .join(\", \")}`,\n+        },\n+      });\n+      linksMap.set(linkKey, true);\n+    }\n+  }\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // 添加主顾问的直接连接\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(connectedAdvisor, connection);\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708530608557,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n     nodes.push({\n       id: String(advisor._id),\n       symbolSize: symbolSize,\n       itemStyle: {\n-        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n+        color: advisor._id === mainAdvisor?._id ? \"red\" : \"blue\",\n       }, // 主节点为红色\n       latestCollaboration: latestYear,\n       ...advisor,\n     });\n@@ -395,798 +395,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1; // default graph degree is 1\n-\n-  let nodesSet = new Set(); // 存储节点ID，确保不重复\n-  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n-\n-  function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n-    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n-    if (connection) {\n-      latestYear = connection.collaborations.reduce(\n-        (max, collab) => Math.max(max, collab.year),\n-        0\n-      );\n-      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n-    }\n-    nodes.push({\n-      id: String(advisor._id),\n-      symbolSize: symbolSize,\n-      itemStyle: {\n-        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n-      }, // 主节点为红色\n-      latestCollaboration: latestYear,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  // @ts-ignore\n-  function addLink(sourceId, targetId, connection) {\n-    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksMap.has(linkKey)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - minRelationFactor)) /\n-              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-          curveness: 0.1, // 连线的曲度\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () =>\n-            `Relation factor: ${\n-              connection.relationFactor\n-            }<br/>${connection.relation\n-              .map(\n-                (rel) =>\n-                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-              )\n-              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-              .map(\n-                (collab) =>\n-                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-              )\n-              .join(\", \")}`,\n-        },\n-      });\n-      linksMap.set(linkKey, true);\n-    }\n-  }\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // Step2: push connected advisors of main node to nodes\n-    addNode(mainAdvisor);\n-\n-    // 添加主顾问的直接连接\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(connectedAdvisor, connection);\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1; // default graph degree is 1\n-\n-  let nodesSet = new Set(); // 存储节点ID，确保不重复\n-  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n-\n-  function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n-    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n-    if (connection) {\n-      latestYear = connection.collaborations.reduce(\n-        (max, collab) => Math.max(max, collab.year),\n-        0\n-      );\n-      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n-    }\n-    nodes.push({\n-      id: String(advisor._id),\n-      symbolSize: symbolSize,\n-      itemStyle: {\n-        color: advisor._id === mainAdvisor._id ? \"red\" : \"blue\",\n-      }, // 主节点为红色\n-      latestCollaboration: latestYear,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  // @ts-ignore\n-  function addLink(sourceId, targetId, connection) {\n-    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksMap.has(linkKey)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - minRelationFactor)) /\n-              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-          curveness: 0.1, // 连线的曲度\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () =>\n-            `Relation factor: ${\n-              connection.relationFactor\n-            }<br/>${connection.relation\n-              .map(\n-                (rel) =>\n-                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-              )\n-              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-              .map(\n-                (collab) =>\n-                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-              )\n-              .join(\", \")}`,\n-        },\n-      });\n-      linksMap.set(linkKey, true);\n-    }\n-  }\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    // Step2: push connected advisors of main node to nodes\n-    addNode(mainAdvisor);\n-\n-    // 添加主顾问的直接连接\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(connectedAdvisor, connection);\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708530680431,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1; // default graph degree is 1\n+\n+  let nodesSet = new Set(); // 存储节点ID，确保不重复\n+  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n+\n+  function addNode(advisor: any, connection = null) {\n+    let symbolSize = 20; // 默认大小\n+    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n+    if (connection) {\n+      latestYear = connection.collaborations.reduce(\n+        (max, collab) => Math.max(max, collab.year),\n+        0\n+      );\n+      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n+    }\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      itemStyle: {\n+        color: advisor._id === mainAdvisor?._id ? \"red\" : \"blue\",\n+      }, // 主节点为红色\n+      latestCollaboration: latestYear,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n+  // @ts-ignore\n+  function addLink(sourceId, targetId, connection) {\n+    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksMap.has(linkKey)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - minRelationFactor)) /\n+              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+          curveness: 0.1, // 连线的曲度\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () =>\n+            `Relation factor: ${\n+              connection.relationFactor\n+            }<br/>${connection.relation\n+              .map(\n+                (rel) =>\n+                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+              )\n+              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+              .map(\n+                (collab) =>\n+                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+              )\n+              .join(\", \")}`,\n+        },\n+      });\n+      linksMap.set(linkKey, true);\n+    }\n+  }\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // 添加主顾问的直接连接\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(connectedAdvisor, connection);\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 1,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708530705316,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,398 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1; // default graph degree is 1\n+\n+  let nodesSet = new Set(); // 存储节点ID，确保不重复\n+  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n+\n+  function addNode(advisor: any, connection = null) {\n+    let symbolSize = 20; // 默认大小\n+    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n+    if (connection) {\n+      latestYear = connection.collaborations.reduce(\n+        (max, collab) => Math.max(max, collab.year),\n+        0\n+      );\n+      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n+    }\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      itemStyle: {\n+        color: advisor._id === mainAdvisor?._id ? \"red\" : \"grey\",\n+      }, // 主节点为红色\n+      latestCollaboration: latestYear,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n+  // @ts-ignore\n+  function addLink(sourceId, targetId, connection) {\n+    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksMap.has(linkKey)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - minRelationFactor)) /\n+              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+          curveness: 0.1, // 连线的曲度\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () =>\n+            `Relation factor: ${\n+              connection.relationFactor\n+            }<br/>${connection.relation\n+              .map(\n+                (rel) =>\n+                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+              )\n+              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+              .map(\n+                (collab) =>\n+                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+              )\n+              .join(\", \")}`,\n+        },\n+      });\n+      linksMap.set(linkKey, true);\n+    }\n+  }\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // 添加主顾问的直接连接\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(connectedAdvisor, connection);\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 1,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708530732583,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,11 +77,8 @@\n     }\n     nodes.push({\n       id: String(advisor._id),\n       symbolSize: symbolSize,\n-      itemStyle: {\n-        color: advisor._id === mainAdvisor?._id ? \"red\" : \"grey\",\n-      }, // 主节点为红色\n       latestCollaboration: latestYear,\n       ...advisor,\n     });\n     nodesSet.add(advisor._id);\n@@ -395,800 +392,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1; // default graph degree is 1\n-\n-  let nodesSet = new Set(); // 存储节点ID，确保不重复\n-  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n-\n-  function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n-    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n-    if (connection) {\n-      latestYear = connection.collaborations.reduce(\n-        (max, collab) => Math.max(max, collab.year),\n-        0\n-      );\n-      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n-    }\n-    nodes.push({\n-      id: String(advisor._id),\n-      symbolSize: symbolSize,\n-      itemStyle: {\n-        color: advisor._id === mainAdvisor?._id ? \"red\" : \"blue\",\n-      }, // 主节点为红色\n-      latestCollaboration: latestYear,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  // @ts-ignore\n-  function addLink(sourceId, targetId, connection) {\n-    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksMap.has(linkKey)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - minRelationFactor)) /\n-              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-          curveness: 0.1, // 连线的曲度\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () =>\n-            `Relation factor: ${\n-              connection.relationFactor\n-            }<br/>${connection.relation\n-              .map(\n-                (rel) =>\n-                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-              )\n-              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-              .map(\n-                (collab) =>\n-                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-              )\n-              .join(\", \")}`,\n-        },\n-      });\n-      linksMap.set(linkKey, true);\n-    }\n-  }\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // 添加主顾问的直接连接\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(connectedAdvisor, connection);\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 1,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1; // default graph degree is 1\n-\n-  let nodesSet = new Set(); // 存储节点ID，确保不重复\n-  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n-\n-  function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n-    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n-    if (connection) {\n-      latestYear = connection.collaborations.reduce(\n-        (max, collab) => Math.max(max, collab.year),\n-        0\n-      );\n-      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n-    }\n-    nodes.push({\n-      id: String(advisor._id),\n-      symbolSize: symbolSize,\n-      itemStyle: {\n-        color: advisor._id === mainAdvisor?._id ? \"red\" : \"blue\",\n-      }, // 主节点为红色\n-      latestCollaboration: latestYear,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  // @ts-ignore\n-  function addLink(sourceId, targetId, connection) {\n-    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksMap.has(linkKey)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - minRelationFactor)) /\n-              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-          curveness: 0.1, // 连线的曲度\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () =>\n-            `Relation factor: ${\n-              connection.relationFactor\n-            }<br/>${connection.relation\n-              .map(\n-                (rel) =>\n-                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-              )\n-              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-              .map(\n-                (collab) =>\n-                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-              )\n-              .join(\", \")}`,\n-        },\n-      });\n-      linksMap.set(linkKey, true);\n-    }\n-  }\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // 添加主顾问的直接连接\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(connectedAdvisor, connection);\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708530907901,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,73 +59,8 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  let graphDegree = 1; // default graph degree is 1\n-\n-  let nodesSet = new Set(); // 存储节点ID，确保不重复\n-  let linksMap = new Map(); // 存储节点间的连接，确保不重复添加连接\n-\n-  function addNode(advisor: any, connection = null) {\n-    let symbolSize = 20; // 默认大小\n-    let latestYear = new Date().getFullYear(); // 默认最近合作时间\n-    if (connection) {\n-      latestYear = connection.collaborations.reduce(\n-        (max, collab) => Math.max(max, collab.year),\n-        0\n-      );\n-      symbolSize += connection.relationFactor * 0.5; // 根据relationFactor调整大小\n-    }\n-    nodes.push({\n-      id: String(advisor._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestYear,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  // @ts-ignore\n-  function addLink(sourceId, targetId, connection) {\n-    const linkKey = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksMap.has(linkKey)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - minRelationFactor)) /\n-              (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-          curveness: 0.1, // 连线的曲度\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () =>\n-            `Relation factor: ${\n-              connection.relationFactor\n-            }<br/>${connection.relation\n-              .map(\n-                (rel) =>\n-                  `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-              )\n-              .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-              .map(\n-                (collab) =>\n-                  `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-              )\n-              .join(\", \")}`,\n-        },\n-      });\n-      linksMap.set(linkKey, true);\n-    }\n-  }\n-\n-  // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n       symbolSize: 200, // main节点的大小\n@@ -133,27 +68,65 @@\n       latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n       ...mainAdvisor,\n     });\n \n-    // 添加主顾问的直接连接\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(connectedAdvisor, connection);\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n         );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n       }\n     });\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n@@ -190,9 +163,9 @@\n               ...node,\n               itemStyle: {\n                 ...node.itemStyle,\n                 borderColor: \"blue\",\n-                borderWidth: 1,\n+                borderWidth: 3,\n                 borderType: \"solid\",\n               },\n             };\n           }\n"
        },
        {
          "date": 1708530999904,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,167 @@\n       }\n     });\n   }\n \n+  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+  if (graphDegree === 1) {\n+    return;\n+  } else if (graphDegree === 2) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          newNodes.push({\n+            id: String(connectedAdvisor._id),\n+            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n+            latestCollaboration: connectedAdvisor.latestCollaboration,\n+            ...connectedAdvisor,\n+          });\n+\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  } else if (graphDegree === 3) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newNodes.push({\n+                id: String(connectedAdvisor2._id),\n+                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n+                latestCollaboration: connectedAdvisor2.latestCollaboration,\n+                ...connectedAdvisor2,\n+              });\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+  }\n+\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n"
        },
        {
          "date": 1708531020737,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,10 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n+  let graphDegree = 1;\n+\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n       symbolSize: 200, // main节点的大小\n"
        },
        {
          "date": 1708531032236,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,529 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 1;\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+  if (graphDegree === 1) {\n+    return;\n+  } else if (graphDegree === 2) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          newNodes.push({\n+            id: String(connectedAdvisor._id),\n+            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n+            latestCollaboration: connectedAdvisor.latestCollaboration,\n+            ...connectedAdvisor,\n+          });\n+\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  } else if (graphDegree === 3) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newNodes.push({\n+                id: String(connectedAdvisor2._id),\n+                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n+                latestCollaboration: connectedAdvisor2.latestCollaboration,\n+                ...connectedAdvisor2,\n+              });\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708531103423,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,14 +134,14 @@\n   if (graphDegree === 1) {\n     return;\n   } else if (graphDegree === 2) {\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes = [];\n-    const newLinks = [];\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n     const connectionsSet = new Set(); // to store the connections\n \n     nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n+      if (node.id !== String(mainAdvisor?._id)) {\n         const connectedAdvisor = advisors.find(\n           (advisor) => advisor._id === node.id\n         );\n         if (connectedAdvisor) {\n@@ -212,14 +212,14 @@\n \n     // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n   } else if (graphDegree === 3) {\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes = [];\n-    const newLinks = [];\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n     const connectionsSet = new Set(); // to store the connections\n \n     nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n+      if (node.id !== String(mainAdvisor?._id)) {\n         const connectedAdvisor = advisors.find(\n           (advisor) => advisor._id === node.id\n         );\n         if (connectedAdvisor) {\n@@ -526,533 +526,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 1;\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-  if (graphDegree === 1) {\n-    return;\n-  } else if (graphDegree === 2) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes = [];\n-    const newLinks = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          newNodes.push({\n-            id: String(connectedAdvisor._id),\n-            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n-            latestCollaboration: connectedAdvisor.latestCollaboration,\n-            ...connectedAdvisor,\n-          });\n-\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  } else if (graphDegree === 3) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes = [];\n-    const newLinks = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newNodes.push({\n-                id: String(connectedAdvisor2._id),\n-                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n-                latestCollaboration: connectedAdvisor2.latestCollaboration,\n-                ...connectedAdvisor2,\n-              });\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708531166781,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -131,9 +131,8 @@\n   }\n \n   // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n   if (graphDegree === 1) {\n-    return;\n   } else if (graphDegree === 2) {\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n     const newNodes: any[] = [];\n     const newLinks: any[] = [];\n"
        },
        {
          "date": 1708531178871,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  let graphDegree = 1;\n+  let graphDegree = 2;\n \n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n"
        },
        {
          "date": 1708531225380,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,530 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 2;\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+  if (graphDegree === 1) {\n+  } else if (graphDegree === 2) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor?._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          newNodes.push({\n+            id: String(connectedAdvisor._id),\n+            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n+            latestCollaboration: connectedAdvisor.latestCollaboration,\n+            ...connectedAdvisor,\n+          });\n+\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  } else if (graphDegree === 3) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor?._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newNodes.push({\n+                id: String(connectedAdvisor2._id),\n+                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n+                latestCollaboration: connectedAdvisor2.latestCollaboration,\n+                ...connectedAdvisor2,\n+              });\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+  }\n+\n+  console.log(links);\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708531270899,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,532 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 2;\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+  if (graphDegree === 1) {\n+  } else if (graphDegree === 2) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor?._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          newNodes.push({\n+            id: String(connectedAdvisor._id),\n+            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n+            latestCollaboration: connectedAdvisor.latestCollaboration,\n+            ...connectedAdvisor,\n+          });\n+\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+\n+    console.log(nodes);\n+\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+  } else if (graphDegree === 3) {\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    const newNodes: any[] = [];\n+    const newLinks: any[] = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor?._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newNodes.push({\n+                id: String(connectedAdvisor2._id),\n+                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n+                latestCollaboration: connectedAdvisor2.latestCollaboration,\n+                ...connectedAdvisor2,\n+              });\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+  }\n+\n+  console.log(links);\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708531315422,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -208,9 +208,9 @@\n \n     nodes.push(...newNodes);\n     links.push(...newLinks);\n \n-    console.log(nodes);\n+    console.log(2);\n \n     // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n   } else if (graphDegree === 3) {\n     // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n@@ -529,1062 +529,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 2;\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-  if (graphDegree === 1) {\n-  } else if (graphDegree === 2) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          newNodes.push({\n-            id: String(connectedAdvisor._id),\n-            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n-            latestCollaboration: connectedAdvisor.latestCollaboration,\n-            ...connectedAdvisor,\n-          });\n-\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  } else if (graphDegree === 3) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newNodes.push({\n-                id: String(connectedAdvisor2._id),\n-                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n-                latestCollaboration: connectedAdvisor2.latestCollaboration,\n-                ...connectedAdvisor2,\n-              });\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-  }\n-\n-  console.log(links);\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 2;\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-  if (graphDegree === 1) {\n-  } else if (graphDegree === 2) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          newNodes.push({\n-            id: String(connectedAdvisor._id),\n-            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n-            latestCollaboration: connectedAdvisor.latestCollaboration,\n-            ...connectedAdvisor,\n-          });\n-\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  } else if (graphDegree === 3) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newNodes.push({\n-                id: String(connectedAdvisor2._id),\n-                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n-                latestCollaboration: connectedAdvisor2.latestCollaboration,\n-                ...connectedAdvisor2,\n-              });\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708531419588,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,8 +61,9 @@\n   );\n \n   let graphDegree = 2;\n \n+  // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n       symbolSize: 200, // main节点的大小\n@@ -70,17 +71,33 @@\n       latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n       ...mainAdvisor,\n     });\n \n-    mainAdvisor.connections.forEach((connection) => {\n+    // Step2: push connected advisors of main node to nodes\n+    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+    if (graphDegree > 1) {\n+      pushConnectedAdvisorsOfAddedNodes(\n+        nodes,\n+        links,\n+        minYear,\n+        maxYear,\n+        graphDegree\n+      );\n+    }\n+  }\n+\n+  // Function to push connected advisors of a given advisor to nodes\n+  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n+    advisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n       if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n         const latestYear = connection.collaborations.reduce(\n           (max, collab) => Math.max(max, collab.year),\n           0\n         );\n@@ -97,9 +114,9 @@\n           ...connectedAdvisor,\n         });\n \n         links.push({\n-          source: String(mainAdvisor._id),\n+          source: String(advisor._id),\n           target: String(connectedAdvisor?._id),\n           value: connection.relationFactor,\n           lineStyle: {\n             width:\n@@ -129,29 +146,26 @@\n       }\n     });\n   }\n \n-  // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-  if (graphDegree === 1) {\n-  } else if (graphDegree === 2) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n+  // Function to push connected advisors of added nodes to nodes and links\n+  function pushConnectedAdvisorsOfAddedNodes(\n+    nodes,\n+    links,\n+    minYear,\n+    maxYear,\n+    graphDegree\n+  ) {\n+    const newNodes = [];\n+    const newLinks = [];\n     const connectionsSet = new Set(); // to store the connections\n \n     nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n+      if (node.id !== String(mainAdvisor._id)) {\n         const connectedAdvisor = advisors.find(\n           (advisor) => advisor._id === node.id\n         );\n         if (connectedAdvisor) {\n-          newNodes.push({\n-            id: String(connectedAdvisor._id),\n-            symbolSize: 20 + connectedAdvisor.relationFactor * 0.5,\n-            latestCollaboration: connectedAdvisor.latestCollaboration,\n-            ...connectedAdvisor,\n-          });\n-\n           connectedAdvisor.connections.forEach((connection) => {\n             const connectedAdvisor2 = advisors.find(\n               (advisor) => advisor._id === connection._id\n             );\n@@ -168,81 +182,8 @@\n \n               minYear = Math.min(minYear, latestYear);\n               maxYear = Math.max(maxYear, latestYear);\n \n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-\n-    console.log(2);\n-\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-  } else if (graphDegree === 3) {\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    const newNodes: any[] = [];\n-    const newLinks: any[] = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor?._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n               newNodes.push({\n                 id: String(connectedAdvisor2._id),\n                 symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n                 latestCollaboration: connectedAdvisor2.latestCollaboration,\n@@ -281,18 +222,27 @@\n                 },\n               });\n             }\n           });\n+\n+          // If the graph degree is 3, continue to push the connected advisors of these newly added nodes\n+          if (graphDegree === 3) {\n+            pushConnectedAdvisors(\n+              connectedAdvisor,\n+              newNodes,\n+              newLinks,\n+              minYear,\n+              maxYear\n+            );\n+          }\n         }\n       }\n     });\n \n     nodes.push(...newNodes);\n     links.push(...newLinks);\n   }\n \n-  console.log(links);\n-\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n"
        },
        {
          "date": 1708531538747,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,482 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  let graphDegree = 3;\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // Step2: push connected advisors of main node to nodes\n+    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+    if (graphDegree > 1) {\n+      pushConnectedAdvisorsOfAddedNodes(\n+        nodes,\n+        links,\n+        minYear,\n+        maxYear,\n+        graphDegree\n+      );\n+    }\n+  }\n+\n+  // Function to push connected advisors of a given advisor to nodes\n+  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n+    advisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(advisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  // Function to push connected advisors of added nodes to nodes and links\n+  function pushConnectedAdvisorsOfAddedNodes(\n+    nodes,\n+    links,\n+    minYear,\n+    maxYear,\n+    graphDegree\n+  ) {\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n+\n+    nodes.forEach((node) => {\n+      if (node.id !== String(mainAdvisor._id)) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === node.id\n+        );\n+        if (connectedAdvisor) {\n+          connectedAdvisor.connections.forEach((connection) => {\n+            const connectedAdvisor2 = advisors.find(\n+              (advisor) => advisor._id === connection._id\n+            );\n+            if (\n+              connectedAdvisor2 &&\n+              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n+            ) {\n+              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n+\n+              const latestYear = connection.collaborations.reduce(\n+                (max, collab) => Math.max(max, collab.year),\n+                0\n+              );\n+\n+              minYear = Math.min(minYear, latestYear);\n+              maxYear = Math.max(maxYear, latestYear);\n+\n+              newNodes.push({\n+                id: String(connectedAdvisor2._id),\n+                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n+                latestCollaboration: connectedAdvisor2.latestCollaboration,\n+                ...connectedAdvisor2,\n+              });\n+\n+              newLinks.push({\n+                source: String(node.id),\n+                target: String(connectedAdvisor2._id),\n+                value: connection.relationFactor,\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n+              });\n+            }\n+          });\n+\n+          // If the graph degree is 3, continue to push the connected advisors of these newly added nodes\n+          if (graphDegree === 3) {\n+            pushConnectedAdvisors(\n+              connectedAdvisor,\n+              newNodes,\n+              newLinks,\n+              minYear,\n+              maxYear\n+            );\n+          }\n+        }\n+      }\n+    });\n+\n+    nodes.push(...newNodes);\n+    links.push(...newLinks);\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708531641539,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,521 +60,16 @@\n     (advisor) => advisor._id === currentMain\n   );\n \n   let graphDegree = 3;\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // Step2: push connected advisors of main node to nodes\n-    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-    if (graphDegree > 1) {\n-      pushConnectedAdvisorsOfAddedNodes(\n-        nodes,\n-        links,\n-        minYear,\n-        maxYear,\n-        graphDegree\n-      );\n-    }\n-  }\n-\n   // Function to push connected advisors of a given advisor to nodes\n-  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n-    advisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(advisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  // Function to push connected advisors of added nodes to nodes and links\n-  function pushConnectedAdvisorsOfAddedNodes(\n-    nodes,\n-    links,\n-    minYear,\n-    maxYear,\n-    graphDegree\n+  function pushConnectedAdvisors(\n+    advisor: Advisor,\n+    nodes: AdvisorNode[],\n+    links: Link[],\n+    minYear: number,\n+    maxYear: number\n   ) {\n-    const newNodes = [];\n-    const newLinks = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newNodes.push({\n-                id: String(connectedAdvisor2._id),\n-                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n-                latestCollaboration: connectedAdvisor2.latestCollaboration,\n-                ...connectedAdvisor2,\n-              });\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-\n-          // If the graph degree is 3, continue to push the connected advisors of these newly added nodes\n-          if (graphDegree === 3) {\n-            pushConnectedAdvisors(\n-              connectedAdvisor,\n-              newNodes,\n-              newLinks,\n-              minYear,\n-              maxYear\n-            );\n-          }\n-        }\n-      }\n-    });\n-\n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  let graphDegree = 2;\n-\n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    // Step2: push connected advisors of main node to nodes\n-    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n-    if (graphDegree > 1) {\n-      pushConnectedAdvisorsOfAddedNodes(\n-        nodes,\n-        links,\n-        minYear,\n-        maxYear,\n-        graphDegree\n-      );\n-    }\n-  }\n-\n-  // Function to push connected advisors of a given advisor to nodes\n-  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n     advisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n@@ -588,59 +83,38 @@\n         maxYear = Math.max(maxYear, latestYear);\n \n         const symbolSize = 20 + connection.relationFactor * 0.5;\n \n+        // Add the connected advisor to the nodes list\n         nodes.push({\n           id: String(connectedAdvisor?._id),\n           symbolSize: symbolSize,\n           latestCollaboration: latestYear,\n           ...connectedAdvisor,\n         });\n \n+        // Add the connection between the advisor and the connected advisor to the links list\n         links.push({\n           source: String(advisor._id),\n           target: String(connectedAdvisor?._id),\n           value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n+          // ...\n         });\n       }\n     });\n   }\n \n   // Function to push connected advisors of added nodes to nodes and links\n   function pushConnectedAdvisorsOfAddedNodes(\n-    nodes,\n-    links,\n-    minYear,\n-    maxYear,\n-    graphDegree\n+    nodes: AdvisorNode[],\n+    links: Link[],\n+    minYear: number,\n+    maxYear: number,\n+    graphDegree: number\n   ) {\n-    const newNodes = [];\n-    const newLinks = [];\n-    const connectionsSet = new Set(); // to store the connections\n+    const newNodes: AdvisorNode[] = [];\n+    const newLinks: Link[] = [];\n+    const connectionsSet = new Set<string>(); // to store the connections\n \n     nodes.forEach((node) => {\n       if (node.id !== String(mainAdvisor._id)) {\n         const connectedAdvisor = advisors.find(\n@@ -664,45 +138,22 @@\n \n               minYear = Math.min(minYear, latestYear);\n               maxYear = Math.max(maxYear, latestYear);\n \n+              // Add the connected advisor to the newNodes list\n               newNodes.push({\n                 id: String(connectedAdvisor2._id),\n                 symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n                 latestCollaboration: connectedAdvisor2.latestCollaboration,\n                 ...connectedAdvisor2,\n               });\n \n+              // Add the connection between the node and the connected advisor to the newLinks list\n               newLinks.push({\n                 source: String(node.id),\n                 target: String(connectedAdvisor2._id),\n                 value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n+                // ...\n               });\n             }\n           });\n \n@@ -719,12 +170,12 @@\n         }\n       }\n     });\n \n+    // Add the new nodes and links to the original nodes and links lists\n     nodes.push(...newNodes);\n     links.push(...newLinks);\n   }\n-\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n"
        },
        {
          "date": 1708531651857,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,16 +60,39 @@\n     (advisor) => advisor._id === currentMain\n   );\n \n   let graphDegree = 3;\n+\n+  // Step1: push main advisor to nodes\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    // Step2: push connected advisors of main node to nodes\n+    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n+\n+    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n+    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n+    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n+    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+    if (graphDegree > 1) {\n+      pushConnectedAdvisorsOfAddedNodes(\n+        nodes,\n+        links,\n+        minYear,\n+        maxYear,\n+        graphDegree\n+      );\n+    }\n+  }\n+\n   // Function to push connected advisors of a given advisor to nodes\n-  function pushConnectedAdvisors(\n-    advisor: Advisor,\n-    nodes: AdvisorNode[],\n-    links: Link[],\n-    minYear: number,\n-    maxYear: number\n-  ) {\n+  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n     advisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n@@ -83,38 +106,59 @@\n         maxYear = Math.max(maxYear, latestYear);\n \n         const symbolSize = 20 + connection.relationFactor * 0.5;\n \n-        // Add the connected advisor to the nodes list\n         nodes.push({\n           id: String(connectedAdvisor?._id),\n           symbolSize: symbolSize,\n           latestCollaboration: latestYear,\n           ...connectedAdvisor,\n         });\n \n-        // Add the connection between the advisor and the connected advisor to the links list\n         links.push({\n           source: String(advisor._id),\n           target: String(connectedAdvisor?._id),\n           value: connection.relationFactor,\n-          // ...\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n         });\n       }\n     });\n   }\n \n   // Function to push connected advisors of added nodes to nodes and links\n   function pushConnectedAdvisorsOfAddedNodes(\n-    nodes: AdvisorNode[],\n-    links: Link[],\n-    minYear: number,\n-    maxYear: number,\n-    graphDegree: number\n+    nodes,\n+    links,\n+    minYear,\n+    maxYear,\n+    graphDegree\n   ) {\n-    const newNodes: AdvisorNode[] = [];\n-    const newLinks: Link[] = [];\n-    const connectionsSet = new Set<string>(); // to store the connections\n+    const newNodes = [];\n+    const newLinks = [];\n+    const connectionsSet = new Set(); // to store the connections\n \n     nodes.forEach((node) => {\n       if (node.id !== String(mainAdvisor._id)) {\n         const connectedAdvisor = advisors.find(\n@@ -138,22 +182,45 @@\n \n               minYear = Math.min(minYear, latestYear);\n               maxYear = Math.max(maxYear, latestYear);\n \n-              // Add the connected advisor to the newNodes list\n               newNodes.push({\n                 id: String(connectedAdvisor2._id),\n                 symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n                 latestCollaboration: connectedAdvisor2.latestCollaboration,\n                 ...connectedAdvisor2,\n               });\n \n-              // Add the connection between the node and the connected advisor to the newLinks list\n               newLinks.push({\n                 source: String(node.id),\n                 target: String(connectedAdvisor2._id),\n                 value: connection.relationFactor,\n-                // ...\n+                lineStyle: {\n+                  width:\n+                    1 +\n+                    (4 * (connection.relationFactor - minRelationFactor)) /\n+                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+                  curveness: 0.1, // 连线的曲度\n+                },\n+                tooltip: {\n+                  show: true,\n+                  formatter: () =>\n+                    `Relation factor: ${\n+                      connection.relationFactor\n+                    }<br/>${connection.relation\n+                      .map(\n+                        (rel) =>\n+                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                      )\n+                      .join(\n+                        \"; \"\n+                      )}<br/>Collaborations: ${connection.collaborations\n+                      .map(\n+                        (collab) =>\n+                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                      )\n+                      .join(\", \")}`,\n+                },\n               });\n             }\n           });\n \n@@ -170,12 +237,12 @@\n         }\n       }\n     });\n \n-    // Add the new nodes and links to the original nodes and links lists\n     nodes.push(...newNodes);\n     links.push(...newLinks);\n   }\n+\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n"
        },
        {
          "date": 1708532064704,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  let graphDegree = 3;\n+  let graphDegree = 1;\n \n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n"
        },
        {
          "date": 1708532070357,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,42 @@\n let currentMain = 0; // 记录主要advisor的ID\n \n const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: Connection[];\n+  // 可以添加其他需要的属性\n+}\n+\n+interface Connection {\n+  _id: number;\n+  relationFactor: number;\n+  collaborations: { year: number; url: string; papername: string }[];\n+}\n+\n+interface Link {\n+  source: string;\n+  target: string;\n+  value: number;\n+  lineStyle: {\n+    width: number;\n+    curveness: number;\n+  };\n+  tooltip: {\n+    show: boolean;\n+    formatter: () => string;\n+  };\n+}\n+\n+interface Node extends Advisor {\n+  id: string;\n+  symbolSize: number;\n+  itemStyle: { color: string };\n+  latestCollaboration: number;\n+}\n+\n const advisorsReader = (_id: number) => {\n   const nodes: any[] = [];\n   const links: any[] = [];\n   currentMain = _id; // 更新主要advisor的ID\n"
        },
        {
          "date": 1708532130724,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,16 +39,29 @@\n \n interface Advisor {\n   _id: number;\n   name: string;\n-  connections: Connection[];\n+  connections: connection[];\n   // 可以添加其他需要的属性\n }\n \n interface Connection {\n   _id: number;\n+  relation: {\n+    class: string;\n+    role: string;\n+    duration: {\n+      start: { year: number; month: number };\n+      end: { year: number; month: number };\n+    };\n+  }[];\n+  collaborations: {\n+    papername: string;\n+    year: number;\n+    url: string;\n+  }[];\n+  latestCollaboration: number;\n   relationFactor: number;\n-  collaborations: { year: number; url: string; papername: string }[];\n }\n \n interface Link {\n   source: string;\n"
        },
        {
          "date": 1708532162617,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n interface Advisor {\n   _id: number;\n   name: string;\n-  connections: connection[];\n+  connections: Connection[];\n   // 可以添加其他需要的属性\n }\n \n interface Connection {\n@@ -85,9 +85,9 @@\n }\n \n const advisorsReader = (_id: number) => {\n   const nodes: any[] = [];\n-  const links: any[] = [];\n+\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n   const currentYear = new Date().getFullYear();\n@@ -101,8 +101,92 @@\n       advisor.connections.map((conn) => conn.relationFactor)\n     )\n   );\n \n+  // 假设 advisors 是 Advisor[] 类型，包含了所有顾问的数据\n+  let nodes: Node[] = [];\n+  let links: Link[] = [];\n+  let nodesSet = new Set<number>();\n+  let linksSet = new Set<string>();\n+\n+  function generateGraphData(\n+    mainAdvisor: Advisor,\n+    graphDegree: number,\n+    advisors: Advisor[]\n+  ): { nodes: Node[]; links: Link[] } {\n+    // Step1: 添加主顾问节点\n+    addNode(mainAdvisor, 200, \"red\");\n+\n+    // Step2: 添加主顾问的直接连接\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(\n+          connectedAdvisor,\n+          20 + connection.relationFactor * 0.5,\n+          \"blue\",\n+          connection\n+        );\n+        addLink(\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    // Step3 & Step4: 根据图的度添加更多的节点和连接\n+    if (graphDegree > 1) {\n+      // 实现二度和三度连接的逻辑\n+    }\n+\n+    return { nodes, links };\n+  }\n+\n+  function addNode(\n+    advisor: Advisor,\n+    symbolSize: number,\n+    color: string,\n+    connection?: Connection\n+  ) {\n+    const latestYear = connection\n+      ? connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          new Date().getFullYear()\n+        )\n+      : new Date().getFullYear();\n+    nodes.push({\n+      ...advisor,\n+      id: String(advisor._id),\n+      symbolSize,\n+      itemStyle: { color },\n+      latestCollaboration: latestYear,\n+    });\n+    nodesSet.add(advisor._id);\n+  }\n+\n+  function addLink(sourceId: number, targetId: number, connection: Connection) {\n+    const linkId = `${sourceId}-${targetId}`;\n+    if (!linksSet.has(linkId)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width: 1 + (4 * (connection.relationFactor - 1)) / 10, // 示例，需要根据实际逻辑调整\n+          curveness: 0.1,\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () => `Custom formatter`, // 根据需要实现\n+        },\n+      });\n+      linksSet.add(linkId);\n+    }\n+  }\n+\n   // 找到与currentMain匹配的advisor节点\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n"
        },
        {
          "date": 1708532192082,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,8 +106,9 @@\n   let nodes: Node[] = [];\n   let links: Link[] = [];\n   let nodesSet = new Set<number>();\n   let linksSet = new Set<string>();\n+  let graphDegree = 1;\n \n   function generateGraphData(\n     mainAdvisor: Advisor,\n     graphDegree: number,\n@@ -190,10 +191,8 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  let graphDegree = 1;\n-\n   // Step1: push main advisor to nodes\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n"
        },
        {
          "date": 1708532201951,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,10 +84,8 @@\n   latestCollaboration: number;\n }\n \n const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n   const currentYear = new Date().getFullYear();\n"
        },
        {
          "date": 1708532421306,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,187 +188,125 @@\n   // 找到与currentMain匹配的advisor节点\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n+  function generateGraphData(\n+    mainAdvisor: Advisor,\n+    graphDegree: number,\n+    advisors: Advisor[]\n+  ): { nodes: Node[]; links: Link[] } {\n+    // Step1: 添加主顾问节点\n+    addNode(mainAdvisor, 200, \"red\");\n \n-  // Step1: push main advisor to nodes\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n+    // Step2: 添加主顾问的直接连接\n+    addConnections(mainAdvisor, advisors);\n \n-    // Step2: push connected advisors of main node to nodes\n-    pushConnectedAdvisors(mainAdvisor, nodes, links, minYear, maxYear);\n-\n-    // Step3: judge by the Graph Degree Option, if the degree is 1, then stop; if the degree is 2, then:\n-    // Step3.1 continue to push the connected advisors of these just added nodes (besides the main node) to nodes\n-    // Step3.2  push the connections between these just added nodes and the main node to links (judge if the connection already exists, so there we need a set to store the connections; attention: no matter the order of source and target, a link is unique by its endpoints)\n-    // Step4: if the degree is 3, then continue to push the connected advisors of these just added nodes to nodes, and push the connections between these just added nodes and the main node to links\n+    // Step3 & Step4: 根据图的度添加更多的节点和连接\n     if (graphDegree > 1) {\n-      pushConnectedAdvisorsOfAddedNodes(\n-        nodes,\n-        links,\n-        minYear,\n-        maxYear,\n-        graphDegree\n-      );\n+      let additionalNodes = [...nodes]; // 复制当前节点列表以避免在迭代时修改\n+      additionalNodes.forEach((node) => {\n+        if (node._id !== mainAdvisor._id) {\n+          let advisor = advisors.find(\n+            (a) => a._id === parseInt(node.id)\n+          );\n+          if (advisor) {\n+            addConnections(advisor, advisors, graphDegree === 3);\n+          }\n+        }\n+      });\n     }\n+\n+    return { nodes, links };\n   }\n \n-  // Function to push connected advisors of a given advisor to nodes\n-  function pushConnectedAdvisors(advisor, nodes, links, minYear, maxYear) {\n+  function addConnections(\n+    advisor: Advisor,\n+    advisors: Advisor[],\n+    includeSecondary = false\n+  ) {\n     advisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n+        (a) => a._id === connection._id\n       );\n-      if (connectedAdvisor) {\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n+      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n+        addNode(\n+          connectedAdvisor,\n+          20 + connection.relationFactor * 0.5,\n+          \"blue\",\n+          connection\n         );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n+        addLink(advisor._id, connectedAdvisor._id, connection);\n+      }\n+      // For graphDegree 3, add secondary connections\n+      if (includeSecondary) {\n+        connectedAdvisor?.connections.forEach((secondaryConnection) => {\n+          const secondaryAdvisor = advisors.find(\n+            (a) => a._id === secondaryConnection._id\n+          );\n+          if (secondaryAdvisor && !nodesSet.has(secondaryAdvisor._id)) {\n+            addNode(\n+              secondaryAdvisor,\n+              15 + secondaryConnection.relationFactor * 0.5,\n+              \"green\",\n+              secondaryConnection\n+            );\n+            addLink(\n+              connectedAdvisor!._id,\n+              secondaryAdvisor._id,\n+              secondaryConnection\n+            );\n+          }\n         });\n-\n-        links.push({\n-          source: String(advisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n       }\n     });\n   }\n \n-  // Function to push connected advisors of added nodes to nodes and links\n-  function pushConnectedAdvisorsOfAddedNodes(\n-    nodes,\n-    links,\n-    minYear,\n-    maxYear,\n-    graphDegree\n+  function addNode(\n+    advisor: Advisor,\n+    symbolSize: number,\n+    color: string,\n+    connection?: Connection\n   ) {\n-    const newNodes = [];\n-    const newLinks = [];\n-    const connectionsSet = new Set(); // to store the connections\n-\n-    nodes.forEach((node) => {\n-      if (node.id !== String(mainAdvisor._id)) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === node.id\n-        );\n-        if (connectedAdvisor) {\n-          connectedAdvisor.connections.forEach((connection) => {\n-            const connectedAdvisor2 = advisors.find(\n-              (advisor) => advisor._id === connection._id\n-            );\n-            if (\n-              connectedAdvisor2 &&\n-              !connectionsSet.has(`${node.id}-${connectedAdvisor2._id}`)\n-            ) {\n-              connectionsSet.add(`${node.id}-${connectedAdvisor2._id}`);\n-\n-              const latestYear = connection.collaborations.reduce(\n-                (max, collab) => Math.max(max, collab.year),\n-                0\n-              );\n-\n-              minYear = Math.min(minYear, latestYear);\n-              maxYear = Math.max(maxYear, latestYear);\n-\n-              newNodes.push({\n-                id: String(connectedAdvisor2._id),\n-                symbolSize: 20 + connectedAdvisor2.relationFactor * 0.5,\n-                latestCollaboration: connectedAdvisor2.latestCollaboration,\n-                ...connectedAdvisor2,\n-              });\n-\n-              newLinks.push({\n-                source: String(node.id),\n-                target: String(connectedAdvisor2._id),\n-                value: connection.relationFactor,\n-                lineStyle: {\n-                  width:\n-                    1 +\n-                    (4 * (connection.relationFactor - minRelationFactor)) /\n-                      (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-                  curveness: 0.1, // 连线的曲度\n-                },\n-                tooltip: {\n-                  show: true,\n-                  formatter: () =>\n-                    `Relation factor: ${\n-                      connection.relationFactor\n-                    }<br/>${connection.relation\n-                      .map(\n-                        (rel) =>\n-                          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                      )\n-                      .join(\n-                        \"; \"\n-                      )}<br/>Collaborations: ${connection.collaborations\n-                      .map(\n-                        (collab) =>\n-                          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                      )\n-                      .join(\", \")}`,\n-                },\n-              });\n-            }\n-          });\n-\n-          // If the graph degree is 3, continue to push the connected advisors of these newly added nodes\n-          if (graphDegree === 3) {\n-            pushConnectedAdvisors(\n-              connectedAdvisor,\n-              newNodes,\n-              newLinks,\n-              minYear,\n-              maxYear\n-            );\n-          }\n-        }\n-      }\n+    const latestYear = connection\n+      ? connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          new Date().getFullYear()\n+        )\n+      : new Date().getFullYear();\n+    nodes.push({\n+      ...advisor,\n+      id: String(advisor._id),\n+      symbolSize,\n+      itemStyle: { color },\n+      latestCollaboration: latestYear,\n     });\n+    nodesSet.add(advisor._id);\n+  }\n \n-    nodes.push(...newNodes);\n-    links.push(...newLinks);\n+  function addLink(sourceId: number, targetId: number, connection: Connection) {\n+    const linkId = `${Math.min(sourceId, targetId)}-${Math.max(\n+      sourceId,\n+      targetId\n+    )}`;\n+    if (!linksSet.has(linkId)) {\n+      links.push({\n+        source: String(sourceId),\n+        target: String(targetId),\n+        value: connection.relationFactor,\n+        lineStyle: {\n+          width:\n+            1 +\n+            (4 * (connection.relationFactor - 1)) /\n+              (maxRelationFactor - minRelationFactor), // 需要定义 minRelationFactor 和 maxRelationFactor\n+          curveness: 0.1,\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: () => `Custom formatter`, // 根据需要实现\n+        },\n+      });\n+      linksSet.add(linkId);\n+    }\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708532436809,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -259,56 +259,8 @@\n       }\n     });\n   }\n \n-  function addNode(\n-    advisor: Advisor,\n-    symbolSize: number,\n-    color: string,\n-    connection?: Connection\n-  ) {\n-    const latestYear = connection\n-      ? connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          new Date().getFullYear()\n-        )\n-      : new Date().getFullYear();\n-    nodes.push({\n-      ...advisor,\n-      id: String(advisor._id),\n-      symbolSize,\n-      itemStyle: { color },\n-      latestCollaboration: latestYear,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  function addLink(sourceId: number, targetId: number, connection: Connection) {\n-    const linkId = `${Math.min(sourceId, targetId)}-${Math.max(\n-      sourceId,\n-      targetId\n-    )}`;\n-    if (!linksSet.has(linkId)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width:\n-            1 +\n-            (4 * (connection.relationFactor - 1)) /\n-              (maxRelationFactor - minRelationFactor), // 需要定义 minRelationFactor 和 maxRelationFactor\n-          curveness: 0.1,\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () => `Custom formatter`, // 根据需要实现\n-        },\n-      });\n-      linksSet.add(linkId);\n-    }\n-  }\n-\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n"
        },
        {
          "date": 1708532521740,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,368 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708532673089,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,381 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  const nodes: any[] = [];\n+  const links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+  };\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708532695459,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     symbolSize: number,\n     latestCollaboration: number\n   ) => {\n     nodes.push({\n-      id: String(advisor._id),\n+      id: String(advisor?._id),\n       symbolSize: symbolSize,\n       latestCollaboration: latestCollaboration,\n       ...advisor,\n     });\n@@ -378,872 +378,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: Connection[];\n-  // 可以添加其他需要的属性\n-}\n-\n-interface Connection {\n-  _id: number;\n-  relation: {\n-    class: string;\n-    role: string;\n-    duration: {\n-      start: { year: number; month: number };\n-      end: { year: number; month: number };\n-    };\n-  }[];\n-  collaborations: {\n-    papername: string;\n-    year: number;\n-    url: string;\n-  }[];\n-  latestCollaboration: number;\n-  relationFactor: number;\n-}\n-\n-interface Link {\n-  source: string;\n-  target: string;\n-  value: number;\n-  lineStyle: {\n-    width: number;\n-    curveness: number;\n-  };\n-  tooltip: {\n-    show: boolean;\n-    formatter: () => string;\n-  };\n-}\n-\n-interface Node extends Advisor {\n-  id: string;\n-  symbolSize: number;\n-  itemStyle: { color: string };\n-  latestCollaboration: number;\n-}\n-\n-const advisorsReader = (_id: number) => {\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 假设 advisors 是 Advisor[] 类型，包含了所有顾问的数据\n-  let nodes: Node[] = [];\n-  let links: Link[] = [];\n-  let nodesSet = new Set<number>();\n-  let linksSet = new Set<string>();\n-  let graphDegree = 1;\n-\n-  function generateGraphData(\n-    mainAdvisor: Advisor,\n-    graphDegree: number,\n-    advisors: Advisor[]\n-  ): { nodes: Node[]; links: Link[] } {\n-    // Step1: 添加主顾问节点\n-    addNode(mainAdvisor, 200, \"red\");\n-\n-    // Step2: 添加主顾问的直接连接\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(\n-          connectedAdvisor,\n-          20 + connection.relationFactor * 0.5,\n-          \"blue\",\n-          connection\n-        );\n-        addLink(\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    // Step3 & Step4: 根据图的度添加更多的节点和连接\n-    if (graphDegree > 1) {\n-      // 实现二度和三度连接的逻辑\n-    }\n-\n-    return { nodes, links };\n-  }\n-\n-  function addNode(\n-    advisor: Advisor,\n-    symbolSize: number,\n-    color: string,\n-    connection?: Connection\n-  ) {\n-    const latestYear = connection\n-      ? connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          new Date().getFullYear()\n-        )\n-      : new Date().getFullYear();\n-    nodes.push({\n-      ...advisor,\n-      id: String(advisor._id),\n-      symbolSize,\n-      itemStyle: { color },\n-      latestCollaboration: latestYear,\n-    });\n-    nodesSet.add(advisor._id);\n-  }\n-\n-  function addLink(sourceId: number, targetId: number, connection: Connection) {\n-    const linkId = `${sourceId}-${targetId}`;\n-    if (!linksSet.has(linkId)) {\n-      links.push({\n-        source: String(sourceId),\n-        target: String(targetId),\n-        value: connection.relationFactor,\n-        lineStyle: {\n-          width: 1 + (4 * (connection.relationFactor - 1)) / 10, // 示例，需要根据实际逻辑调整\n-          curveness: 0.1,\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: () => `Custom formatter`, // 根据需要实现\n-        },\n-      });\n-      linksSet.add(linkId);\n-    }\n-  }\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-  function generateGraphData(\n-    mainAdvisor: Advisor,\n-    graphDegree: number,\n-    advisors: Advisor[]\n-  ): { nodes: Node[]; links: Link[] } {\n-    // Step1: 添加主顾问节点\n-    addNode(mainAdvisor, 200, \"red\");\n-\n-    // Step2: 添加主顾问的直接连接\n-    addConnections(mainAdvisor, advisors);\n-\n-    // Step3 & Step4: 根据图的度添加更多的节点和连接\n-    if (graphDegree > 1) {\n-      let additionalNodes = [...nodes]; // 复制当前节点列表以避免在迭代时修改\n-      additionalNodes.forEach((node) => {\n-        if (node._id !== mainAdvisor._id) {\n-          let advisor = advisors.find(\n-            (a) => a._id === parseInt(node.id)\n-          );\n-          if (advisor) {\n-            addConnections(advisor, advisors, graphDegree === 3);\n-          }\n-        }\n-      });\n-    }\n-\n-    return { nodes, links };\n-  }\n-\n-  function addConnections(\n-    advisor: Advisor,\n-    advisors: Advisor[],\n-    includeSecondary = false\n-  ) {\n-    advisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (a) => a._id === connection._id\n-      );\n-      if (connectedAdvisor && !nodesSet.has(connectedAdvisor._id)) {\n-        addNode(\n-          connectedAdvisor,\n-          20 + connection.relationFactor * 0.5,\n-          \"blue\",\n-          connection\n-        );\n-        addLink(advisor._id, connectedAdvisor._id, connection);\n-      }\n-      // For graphDegree 3, add secondary connections\n-      if (includeSecondary) {\n-        connectedAdvisor?.connections.forEach((secondaryConnection) => {\n-          const secondaryAdvisor = advisors.find(\n-            (a) => a._id === secondaryConnection._id\n-          );\n-          if (secondaryAdvisor && !nodesSet.has(secondaryAdvisor._id)) {\n-            addNode(\n-              secondaryAdvisor,\n-              15 + secondaryConnection.relationFactor * 0.5,\n-              \"green\",\n-              secondaryConnection\n-            );\n-            addLink(\n-              connectedAdvisor!._id,\n-              secondaryAdvisor._id,\n-              secondaryConnection\n-            );\n-          }\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708532714660,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,9 @@\n     (advisor) => advisor._id === currentMain\n   );\n \n   const addNode = (\n+    nodes: any[],\n     advisor: Advisor,\n     symbolSize: number,\n     latestCollaboration: number\n   ) => {\n"
        },
        {
          "date": 1708532721421,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,8 +71,9 @@\n       symbolSize: symbolSize,\n       latestCollaboration: latestCollaboration,\n       ...advisor,\n     });\n+    return nodes;\n   };\n \n   if (mainAdvisor) {\n     nodes.push({\n"
        },
        {
          "date": 1708532821524,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,10 +37,10 @@\n \n const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n const advisorsReader = (_id: number) => {\n-  const nodes: any[] = [];\n-  const links: any[] = [];\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n   const currentYear = new Date().getFullYear();\n@@ -102,8 +102,10 @@\n         maxYear = Math.max(maxYear, latestYear);\n \n         const symbolSize = 20 + connection.relationFactor * 0.5;\n \n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+\n         nodes.push({\n           id: String(connectedAdvisor?._id),\n           symbolSize: symbolSize,\n           latestCollaboration: latestYear,\n"
        },
        {
          "date": 1708532829221,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,386 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    return nodes;\n+  };\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+\n+        nodes.push({\n+          id: String(connectedAdvisor?._id),\n+          symbolSize: symbolSize,\n+          latestCollaboration: latestYear,\n+          ...connectedAdvisor,\n+        });\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708532836109,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,379 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    return nodes;\n+  };\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708533121340,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,387 +74,42 @@\n     });\n     return nodes;\n   };\n \n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n+  function addLink(sourceId: number, targetId: number, connection: Connection) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n \n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n     });\n   }\n \n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    return nodes;\n-  };\n-\n   if (mainAdvisor) {\n     nodes.push({\n       id: String(mainAdvisor._id),\n       symbolSize: 200, // main节点的大小\n@@ -484,15 +139,8 @@\n \n         // @ts-ignore\n         nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n \n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n         links.push({\n           source: String(mainAdvisor._id),\n           target: String(connectedAdvisor?._id),\n           value: connection.relationFactor,\n@@ -762,389 +410,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    return nodes;\n-  };\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-\n-        nodes.push({\n-          id: String(connectedAdvisor?._id),\n-          symbolSize: symbolSize,\n-          latestCollaboration: latestYear,\n-          ...connectedAdvisor,\n-        });\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708533141626,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    return nodes;\n+  };\n+  // @ts-ignore\n+  function addLink(sourceId: number, targetId: number, connection: Connection) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+\n+        links.push({\n+          source: String(mainAdvisor._id),\n+          target: String(connectedAdvisor?._id),\n+          value: connection.relationFactor,\n+          lineStyle: {\n+            width:\n+              1 +\n+              (4 * (connection.relationFactor - minRelationFactor)) /\n+                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n+            curveness: 0.1, // 连线的曲度\n+          },\n+          tooltip: {\n+            show: true,\n+            formatter: () =>\n+              `Relation factor: ${\n+                connection.relationFactor\n+              }<br/>${connection.relation\n+                .map(\n+                  (rel) =>\n+                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+                )\n+                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+                .map(\n+                  (collab) =>\n+                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+                )\n+                .join(\", \")}`,\n+          },\n+        });\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708533170439,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n       ...advisor,\n     });\n     return nodes;\n   };\n+\n   // @ts-ignore\n   function addLink(sourceId: number, targetId: number, connection: Connection) {\n     const width =\n       1 +\n@@ -410,417 +411,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    return nodes;\n-  };\n-\n-  function addLink(sourceId: number, targetId: number, connection: Connection) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708533175873,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,9 +75,14 @@\n     return nodes;\n   };\n \n   // @ts-ignore\n-  function addLink(sourceId: number, targetId: number, connection: Connection) {\n+  function addLink(\n+    links,\n+    sourceId: number,\n+    targetId: number,\n+    connection: Connection\n+  ) {\n     const width =\n       1 +\n       (4 * (connection.relationFactor - minRelationFactor)) /\n         (maxRelationFactor - minRelationFactor);\n"
        },
        {
          "date": 1708533233881,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,9 +76,9 @@\n   };\n \n   // @ts-ignore\n   function addLink(\n-    links,\n+    links: any[],\n     sourceId: number,\n     targetId: number,\n     connection: Connection\n   ) {\n@@ -112,8 +112,9 @@\n         show: true,\n         formatter: formatter,\n       },\n     });\n+    return links;\n   }\n \n   if (mainAdvisor) {\n     nodes.push({\n@@ -174,8 +175,15 @@\n                 )\n                 .join(\", \")}`,\n           },\n         });\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          connectedAdvisor._id,\n+          connection\n+        );\n       }\n     });\n   }\n \n"
        },
        {
          "date": 1708533242388,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,397 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    return nodes;\n+  };\n+\n+  // @ts-ignore\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: Connection\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    return links;\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708533247601,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,8 +149,9 @@\n         //@ts-ignore\n         links = addLink(\n           links,\n           mainAdvisor._id,\n+          // @ts-ignore\n           connectedAdvisor?._id,\n           connection\n         );\n       }\n"
        },
        {
          "date": 1708533321453,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,400 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    return nodes;\n+  };\n+\n+  // @ts-ignore\n+  import { Connection } from \"../types\"; // Import the 'Connection' type from the appropriate module\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    return links;\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          // @ts-ignore\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708533331682,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,8 @@\n     });\n     return nodes;\n   };\n \n-  // @ts-ignore\n-  import { Connection } from \"../types\"; // Import the 'Connection' type from the appropriate module\n-\n   function addLink(\n     links: any[],\n     sourceId: number,\n     targetId: number,\n@@ -91,14 +88,14 @@\n     const formatter = `Relation factor: ${\n       connection.relationFactor\n     }<br/>${connection.relation\n       .map(\n-        (rel) =>\n+        (rel: any) =>\n           `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n       )\n       .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n       .map(\n-        (collab) =>\n+        (collab: any) =>\n           `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n       )\n       .join(\", \")}`;\n \n@@ -397,829 +394,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    return nodes;\n-  };\n-\n-  // @ts-ignore\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: Connection\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    return links;\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    return nodes;\n-  };\n-\n-  // @ts-ignore\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: Connection\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    return links;\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-\n-        links.push({\n-          source: String(mainAdvisor._id),\n-          target: String(connectedAdvisor?._id),\n-          value: connection.relationFactor,\n-          lineStyle: {\n-            width:\n-              1 +\n-              (4 * (connection.relationFactor - minRelationFactor)) /\n-                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n-            curveness: 0.1, // 连线的曲度\n-          },\n-          tooltip: {\n-            show: true,\n-            formatter: () =>\n-              `Relation factor: ${\n-                connection.relationFactor\n-              }<br/>${connection.relation\n-                .map(\n-                  (rel) =>\n-                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-                )\n-                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-                .map(\n-                  (collab) =>\n-                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-                )\n-                .join(\", \")}`,\n-          },\n-        });\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          connectedAdvisor._id,\n-          connection\n-        );\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708533414986,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,10 @@\n \n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n   const currentYear = new Date().getFullYear();\n"
        },
        {
          "date": 1708533434621,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,8 +125,10 @@\n       latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n       ...mainAdvisor,\n     });\n \n+    nodesSet.add(mainAdvisor._id);\n+\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n"
        },
        {
          "date": 1708533455907,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,8 +73,9 @@\n       symbolSize: symbolSize,\n       latestCollaboration: latestCollaboration,\n       ...advisor,\n     });\n+    nodesSet.add(advisor._id);\n     return nodes;\n   };\n \n   function addLink(\n"
        },
        {
          "date": 1708533498509,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,12 @@\n         show: true,\n         formatter: formatter,\n       },\n     });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n     return links;\n   }\n \n   if (mainAdvisor) {\n"
        },
        {
          "date": 1708533543841,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,413 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>();\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n+      linkSet\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+    return links;\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    nodesSet.add(mainAdvisor._id);\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          // @ts-ignore\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708533553351,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,8 +67,11 @@\n     advisor: Advisor,\n     symbolSize: number,\n     latestCollaboration: number\n   ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n     nodes.push({\n       id: String(advisor?._id),\n       symbolSize: symbolSize,\n       latestCollaboration: latestCollaboration,\n@@ -410,410 +413,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>();\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-    return links;\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    nodesSet.add(mainAdvisor._id);\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708533622311,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,9 @@\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n+  let graphDegree = 1; // 初始化为1\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n     ...advisors.flatMap((advisor) =>\n       advisor.connections.map((conn) => conn.relationFactor)\n@@ -142,8 +143,9 @@\n     });\n \n     nodesSet.add(mainAdvisor._id);\n \n+\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n@@ -173,8 +175,10 @@\n           connection\n         );\n       }\n     });\n+\n+    if graphDegree >= 2\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708533712069,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,9 +176,12 @@\n         );\n       }\n     });\n \n-    if graphDegree >= 2\n+    if (graphDegree >= 2) {\n+\n+      let new\n+    }\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n"
        },
        {
          "date": 1708533743344,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodesSet = new Set<number>();\n+  let extendedNodesSet = new Set<number>();\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n@@ -143,9 +144,8 @@\n     });\n \n     nodesSet.add(mainAdvisor._id);\n \n-\n     mainAdvisor.connections.forEach((connection) => {\n       const connectedAdvisor = advisors.find(\n         (advisor) => advisor._id === connection._id\n       );\n@@ -177,10 +177,8 @@\n       }\n     });\n \n     if (graphDegree >= 2) {\n-\n-      let new\n     }\n   }\n \n   return { nodes, links, minYear, maxYear, _id };\n"
        },
        {
          "date": 1708533908133,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,10 @@\n \n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n-  let nodesSet = new Set<number>();\n+  let nodeQueue: number[] = [];\n+\n   let extendedNodesSet = new Set<number>();\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n"
        },
        {
          "date": 1708533936418,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n \n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n-  let nodeQueue: number[] = [];\n+  let nodeQueue: Advisor[] = [];\n \n   let extendedNodesSet = new Set<number>();\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n@@ -64,8 +64,10 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n+  nodeQueue.push(currentMain);\n+\n   const addNode = (\n     nodes: any[],\n     advisor: Advisor,\n     symbolSize: number,\n"
        },
        {
          "date": 1708533942195,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  nodeQueue.push(currentMain);\n+  nodeQueue.push(mainAdvisor);\n \n   const addNode = (\n     nodes: any[],\n     advisor: Advisor,\n"
        },
        {
          "date": 1708533961627,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n   const mainAdvisor = advisors.find(\n     (advisor) => advisor._id === currentMain\n   );\n \n-  nodeQueue.push(mainAdvisor);\n+  nodeQueue.push(mainAdvisor | null);\n \n   const addNode = (\n     nodes: any[],\n     advisor: Advisor,\n"
        },
        {
          "date": 1708533967913,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,425 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+\n+  let extendedNodesSet = new Set<number>();\n+  let linkSet = new Set<string>();\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 1; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n+      linkSet\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+    return links;\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    nodesSet.add(mainAdvisor._id);\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          // @ts-ignore\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    if (graphDegree >= 2) {\n+    }\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534090430,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodeQueue: Advisor[] = [];\n-\n+  let nodeSet = new Set<number>();\n   let extendedNodesSet = new Set<number>();\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n@@ -137,430 +137,41 @@\n     );\n     return links;\n   }\n \n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    nodesSet.add(mainAdvisor._id);\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+    if (currentAdvisor) {\n+      currentAdvisor.connections.forEach((connection) => {\n         const connectedAdvisor = advisors.find(\n           (advisor) => advisor._id === connection._id\n         );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n \n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n \n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n \n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n           // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    if (graphDegree >= 2) {\n-    }\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n         }\n-        return node;\n       });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n+      graphDegree--;\n     }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-\n-  let extendedNodesSet = new Set<number>();\n-  let linkSet = new Set<string>();\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 1; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  nodeQueue.push(mainAdvisor | null);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n-      linkSet\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-    return links;\n   }\n \n   if (mainAdvisor) {\n     nodes.push({\n"
        },
        {
          "date": 1708534098282,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n const advisorsReader = (_id: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodeQueue: Advisor[] = [];\n-  let nodeSet = new Set<number>();\n+  let nodesSet = new Set<number>();\n   let extendedNodesSet = new Set<number>();\n   let linkSet = new Set<string>();\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n"
        },
        {
          "date": 1708534165654,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,459 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 1; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+    nodes.push({\n+      id: String(advisor?._id),\n+      symbolSize: symbolSize,\n+      latestCollaboration: latestCollaboration,\n+      ...advisor,\n+    });\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n+      linkSet\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+    if (currentAdvisor) {\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    nodesSet.add(mainAdvisor._id);\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          // @ts-ignore\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    if (graphDegree >= 2) {\n+    }\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534245248,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodeQueue: Advisor[] = [];\n   let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n   let graphDegree = 1; // 初始化为1\n@@ -456,464 +456,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let extendedNodesSet = new Set<number>();\n-  let linkSet = new Set<string>();\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 1; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n-      linkSet\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-    if (currentAdvisor) {\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    nodesSet.add(mainAdvisor._id);\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    if (graphDegree >= 2) {\n-    }\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708534311524,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,14 +75,25 @@\n   ) => {\n     if (nodesSet.has(advisor._id)) {\n       return nodes;\n     }\n-    nodes.push({\n-      id: String(advisor?._id),\n-      symbolSize: symbolSize,\n-      latestCollaboration: latestCollaboration,\n-      ...advisor,\n-    });\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n     nodesSet.add(advisor._id);\n     return nodes;\n   };\n \n"
        },
        {
          "date": 1708534368997,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,480 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 1; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n+      linkSet\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  if (mainAdvisor) {\n+    nodes.push({\n+      id: String(mainAdvisor._id),\n+      symbolSize: 200, // main节点的大小\n+      itemStyle: { color: \"red\" }, // main节点为红色\n+      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+      ...mainAdvisor,\n+    });\n+\n+    nodesSet.add(mainAdvisor._id);\n+\n+    mainAdvisor.connections.forEach((connection) => {\n+      const connectedAdvisor = advisors.find(\n+        (advisor) => advisor._id === connection._id\n+      );\n+      if (connectedAdvisor) {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+\n+        const latestYear = connection.collaborations.reduce(\n+          (max, collab) => Math.max(max, collab.year),\n+          0\n+        );\n+\n+        minYear = Math.min(minYear, latestYear);\n+        maxYear = Math.max(maxYear, latestYear);\n+\n+        const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+        // @ts-ignore\n+        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+        //@ts-ignore\n+        links = addLink(\n+          links,\n+          mainAdvisor._id,\n+          // @ts-ignore\n+          connectedAdvisor?._id,\n+          connection\n+        );\n+      }\n+    });\n+\n+    if (graphDegree >= 2) {\n+    }\n+  }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 500,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534420904,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,54 +192,54 @@\n       graphDegree--;\n     }\n   }\n \n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n \n-    nodesSet.add(mainAdvisor._id);\n+  //   nodesSet.add(mainAdvisor._id);\n \n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n \n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n \n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n \n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n \n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n \n-    if (graphDegree >= 2) {\n-    }\n-  }\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n \n   return { nodes, links, minYear, maxYear, _id };\n };\n \n@@ -477,474 +477,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 1; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n-      linkSet\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-    if (currentAdvisor) {\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  if (mainAdvisor) {\n-    nodes.push({\n-      id: String(mainAdvisor._id),\n-      symbolSize: 200, // main节点的大小\n-      itemStyle: { color: \"red\" }, // main节点为红色\n-      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-      ...mainAdvisor,\n-    });\n-\n-    nodesSet.add(mainAdvisor._id);\n-\n-    mainAdvisor.connections.forEach((connection) => {\n-      const connectedAdvisor = advisors.find(\n-        (advisor) => advisor._id === connection._id\n-      );\n-      if (connectedAdvisor) {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-\n-        const latestYear = connection.collaborations.reduce(\n-          (max, collab) => Math.max(max, collab.year),\n-          0\n-        );\n-\n-        minYear = Math.min(minYear, latestYear);\n-        maxYear = Math.max(maxYear, latestYear);\n-\n-        const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-        // @ts-ignore\n-        nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-        //@ts-ignore\n-        links = addLink(\n-          links,\n-          mainAdvisor._id,\n-          // @ts-ignore\n-          connectedAdvisor?._id,\n-          connection\n-        );\n-      }\n-    });\n-\n-    if (graphDegree >= 2) {\n-    }\n-  }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 500,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708534437751,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n-  let graphDegree = 1; // 初始化为1\n+  let graphDegree = 2; // 初始化为1\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n     ...advisors.flatMap((advisor) =>\n       advisor.connections.map((conn) => conn.relationFactor)\n"
        },
        {
          "date": 1708534562584,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,8 +144,12 @@\n     // undirected\n     linkSet.add(\n       `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n     );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n     return links;\n   }\n \n   while (nodeQueue.length > 0 && graphDegree > 0) {\n"
        },
        {
          "date": 1708534651687,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,10 +121,11 @@\n       )\n       .join(\", \")}`;\n \n     if (\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}` in\n-      linkSet\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n     ) {\n       return links;\n     }\n \n"
        },
        {
          "date": 1708534693830,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -368,9 +368,9 @@\n               position: \"top\", // 将标签放置在节点的上方\n               formatter: \"{b}\", // 使用节点的name作为标签文本\n             },\n             force: {\n-              repulsion: 500,\n+              repulsion: 5000,\n               edgeLength: 400,\n             },\n             lineStyle: {\n               color: \"source\",\n"
        },
        {
          "date": 1708534705682,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,485 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 2; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 1000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534729291,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,485 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 2; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534785110,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,485 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+  let graphDegree = 2; // 初始化为1\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708534808610,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,18 +36,17 @@\n let currentMain = 0; // 记录主要advisor的ID\n \n const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n-const advisorsReader = (_id: number) => {\n+const advisorsReader = (_id: number, graphDegree: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodeQueue: Advisor[] = [];\n   let nodesSet = new Set<number>();\n   let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n-  let graphDegree = 2; // 初始化为1\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n     ...advisors.flatMap((advisor) =>\n       advisor.connections.map((conn) => conn.relationFactor)\n@@ -248,9 +247,9 @@\n   return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n+const GraphRender = ({ onNodeHover, onNodeClick, _id, graphDegree }) => {\n   const chartRef = useRef(null);\n   const [option, setOption] = useState({}); // 用于存储图表配置\n   const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n   const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n@@ -267,495 +266,13 @@\n       setMyChart(initializedChart); // 保存 echarts 实例\n     }\n \n     if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 2000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 2; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n+      const { nodes, links, minYear, maxYear } = advisorsReader(\n+        _id,\n+        graphDegree\n       );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n \n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n       // 更新节点样式，为选中节点添加边框\n       // @ts-ignore\n       const updateNodesStyle = (nodes, selectedNodeId) => {\n         // @ts-ignore\n@@ -967,974 +484,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 2; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 1000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  let graphDegree = 2; // 初始化为1\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 5000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708534824351,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,11 @@\n   let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n+  if (!graphDegree) {\n+    graphDegree = 1;\n+  }\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n     ...advisors.flatMap((advisor) =>\n       advisor.connections.map((conn) => conn.relationFactor)\n"
        },
        {
          "date": 1708534832261,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n   currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n-  if (!graphDegree) {\n+  if (!graphDegree || graphDegree < 1) {\n     graphDegree = 1;\n   }\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n"
        },
        {
          "date": 1708535422504,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,497 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number, graphDegree: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+\n+  if (!graphDegree || graphDegree < 1) {\n+    graphDegree = 1;\n+  }\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({\n+  onNodeHover,\n+  onNodeClick,\n+  _id,\n+  graphDegree,\n+  graphType,\n+}) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(\n+        _id,\n+        graphDegree\n+      );\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708535503473,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,503 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number, graphDegree: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+\n+  if (!graphDegree || graphDegree < 1) {\n+    graphDegree = 1;\n+  }\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({\n+  onNodeHover,\n+  onNodeClick,\n+  _id,\n+  graphDegree,\n+  graphType,\n+}) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(\n+        _id,\n+        graphDegree\n+      );\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            edgeSymbol: [\"none\", \"none\"],\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      if (graphType === \"directed\") {\n+        initialOption.series[0].edgeSymbol = [\"circle\", \"arrow\"];\n+        initialOption.series[0].edgeSymbolSize = [4, 10];\n+      }\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708535530881,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,506 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number, graphDegree: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+\n+  if (!graphDegree || graphDegree < 1) {\n+    graphDegree = 1;\n+  }\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({\n+  onNodeHover,\n+  onNodeClick,\n+  _id,\n+  graphDegree,\n+  graphType,\n+}) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(\n+        _id,\n+        graphDegree\n+      );\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            edgeSymbol: [\"none\", \"none\"],\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      if (graphType === \"directed\") {\n+        initialOption.series[0].edgeSymbol = [\"circle\", \"arrow\"];\n+      } else if (graphType === \"undirected\") {\n+        initialOption.series[0].edgeSymbol = [\"none\", \"none\"];\n+      } else {\n+        console.error(\"Invalid graph type.\");\n+      }\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708535801845,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -405,9 +405,9 @@\n         ],\n       };\n \n       if (graphType === \"directed\") {\n-        initialOption.series[0].edgeSymbol = [\"circle\", \"arrow\"];\n+        initialOption.series[0].edgeSymbol = [\"none\", \"arrow\"];\n       } else if (graphType === \"undirected\") {\n         initialOption.series[0].edgeSymbol = [\"none\", \"none\"];\n       } else {\n         console.error(\"Invalid graph type.\");\n@@ -503,1494 +503,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number, graphDegree: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-\n-  if (!graphDegree || graphDegree < 1) {\n-    graphDegree = 1;\n-  }\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({\n-  onNodeHover,\n-  onNodeClick,\n-  _id,\n-  graphDegree,\n-  graphType,\n-}) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(\n-        _id,\n-        graphDegree\n-      );\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            edgeSymbol: [\"none\", \"none\"],\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 2000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      if (graphType === \"directed\") {\n-        initialOption.series[0].edgeSymbol = [\"circle\", \"arrow\"];\n-        initialOption.series[0].edgeSymbolSize = [4, 10];\n-      }\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number, graphDegree: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-\n-  if (!graphDegree || graphDegree < 1) {\n-    graphDegree = 1;\n-  }\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({\n-  onNodeHover,\n-  onNodeClick,\n-  _id,\n-  graphDegree,\n-  graphType,\n-}) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(\n-        _id,\n-        graphDegree\n-      );\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 2000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number, graphDegree: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-  if (!graphDegree || graphDegree < 1) {\n-    graphDegree = 1;\n-  }\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({ onNodeHover, onNodeClick, _id, graphDegree }) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(\n-        _id,\n-        graphDegree\n-      );\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 2000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708535810643,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -375,8 +375,9 @@\n             links: links,\n             categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n             roam: true,\n             edgeSymbol: [\"none\", \"none\"],\n+            edgeSymbolSize: [10, 10],\n             label: {\n               show: true,\n               position: \"top\", // 将标签放置在节点的上方\n               formatter: \"{b}\", // 使用节点的name作为标签文本\n"
        },
        {
          "date": 1708535816591,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,507 @@\n+import React, { useEffect, useRef, useState } from \"react\";\n+\n+import * as echarts from \"echarts/core\";\n+import { GraphChart } from \"echarts/charts\";\n+import { useRouter } from \"next/router\";\n+\n+import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n+\n+import { SVGRenderer } from \"echarts/renderers\";\n+\n+// 注册必要的组件\n+echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n+interface Advisor {\n+  _id: number;\n+  name: string;\n+  connections: {\n+    _id: number;\n+    relation: Array<{\n+      class: string;\n+      role: string;\n+      duration: {\n+        start: { year: number; month: number };\n+        end: { year: number; month: number };\n+      };\n+    }>;\n+    collaborations: Array<{\n+      papername: string;\n+      year: number;\n+      url: string;\n+    }>;\n+    latestCollaboration: number;\n+    relationFactor: number;\n+  }[];\n+}\n+\n+let currentMain = 0; // 记录主要advisor的ID\n+\n+const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n+\n+const advisorsReader = (_id: number, graphDegree: number) => {\n+  let nodes: any[] = [];\n+  let links: any[] = [];\n+  let nodeQueue: Advisor[] = [];\n+  let nodesSet = new Set<number>();\n+  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n+  currentMain = _id; // 更新主要advisor的ID\n+  let minYear = new Date().getFullYear(); // 初始化为当前年份\n+  let maxYear = 0; // 初始化为0\n+\n+  if (!graphDegree || graphDegree < 1) {\n+    graphDegree = 1;\n+  }\n+  const currentYear = new Date().getFullYear();\n+  const minRelationFactor = Math.min(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+  const maxRelationFactor = Math.max(\n+    ...advisors.flatMap((advisor) =>\n+      advisor.connections.map((conn) => conn.relationFactor)\n+    )\n+  );\n+\n+  // 找到与currentMain匹配的advisor节点\n+  const mainAdvisor = advisors.find(\n+    (advisor) => advisor._id === currentMain\n+  );\n+\n+  // @ts-ignore\n+  nodeQueue.push(mainAdvisor);\n+\n+  const addNode = (\n+    nodes: any[],\n+    advisor: Advisor,\n+    symbolSize: number,\n+    latestCollaboration: number\n+  ) => {\n+    if (nodesSet.has(advisor._id)) {\n+      return nodes;\n+    }\n+\n+    if (advisor._id === mainAdvisor?._id) {\n+      nodes.push({\n+        id: String(mainAdvisor._id),\n+        symbolSize: 200, // main节点的大小\n+        itemStyle: { color: \"red\" }, // main节点为红色\n+        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        ...mainAdvisor,\n+      });\n+    } else {\n+      nodes.push({\n+        id: String(advisor?._id),\n+        symbolSize: symbolSize,\n+        latestCollaboration: latestCollaboration,\n+        ...advisor,\n+      });\n+    }\n+    nodesSet.add(advisor._id);\n+    return nodes;\n+  };\n+\n+  function addLink(\n+    links: any[],\n+    sourceId: number,\n+    targetId: number,\n+    connection: any\n+  ) {\n+    const width =\n+      1 +\n+      (4 * (connection.relationFactor - minRelationFactor)) /\n+        (maxRelationFactor - minRelationFactor);\n+    const formatter = `Relation factor: ${\n+      connection.relationFactor\n+    }<br/>${connection.relation\n+      .map(\n+        (rel: any) =>\n+          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n+      )\n+      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n+      .map(\n+        (collab: any) =>\n+          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n+      )\n+      .join(\", \")}`;\n+\n+    if (\n+      linkSet.has(\n+        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+      )\n+    ) {\n+      return links;\n+    }\n+\n+    links.push({\n+      source: String(sourceId),\n+      target: String(targetId),\n+      value: connection.relationFactor,\n+      lineStyle: {\n+        width: width,\n+        curveness: 0.1,\n+      },\n+      tooltip: {\n+        show: true,\n+        formatter: formatter,\n+      },\n+    });\n+    // undirected\n+    linkSet.add(\n+      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n+    );\n+\n+    console.log(links);\n+    console.log(linkSet);\n+\n+    return links;\n+  }\n+\n+  while (nodeQueue.length > 0 && graphDegree > 0) {\n+    const currentAdvisor = nodeQueue.shift();\n+\n+    if (currentAdvisor) {\n+      nodes = addNode(\n+        nodes,\n+        currentAdvisor,\n+        200,\n+        currentAdvisor?.connections.reduce(\n+          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          0\n+        )\n+      );\n+      currentAdvisor.connections.forEach((connection) => {\n+        const connectedAdvisor = advisors.find(\n+          (advisor) => advisor._id === connection._id\n+        );\n+        if (connectedAdvisor) {\n+          const latestYear = connection.collaborations.reduce(\n+            (max, collab) => Math.max(max, collab.year),\n+            0\n+          );\n+\n+          minYear = Math.min(minYear, latestYear);\n+          maxYear = Math.max(maxYear, latestYear);\n+\n+          const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+          // @ts-ignore\n+          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+          //@ts-ignore\n+          links = addLink(\n+            links,\n+            currentAdvisor._id,\n+            // @ts-ignore\n+            connectedAdvisor?._id,\n+            connection\n+          );\n+          nodeQueue.push(connectedAdvisor);\n+        }\n+      });\n+      graphDegree--;\n+    }\n+  }\n+\n+  // if (mainAdvisor) {\n+  //   nodes.push({\n+  //     id: String(mainAdvisor._id),\n+  //     symbolSize: 200, // main节点的大小\n+  //     itemStyle: { color: \"red\" }, // main节点为红色\n+  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     ...mainAdvisor,\n+  //   });\n+\n+  //   nodesSet.add(mainAdvisor._id);\n+\n+  //   mainAdvisor.connections.forEach((connection) => {\n+  //     const connectedAdvisor = advisors.find(\n+  //       (advisor) => advisor._id === connection._id\n+  //     );\n+  //     if (connectedAdvisor) {\n+  //       const connectedAdvisor = advisors.find(\n+  //         (advisor) => advisor._id === connection._id\n+  //       );\n+\n+  //       const latestYear = connection.collaborations.reduce(\n+  //         (max, collab) => Math.max(max, collab.year),\n+  //         0\n+  //       );\n+\n+  //       minYear = Math.min(minYear, latestYear);\n+  //       maxYear = Math.max(maxYear, latestYear);\n+\n+  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+\n+  //       // @ts-ignore\n+  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n+  //       //@ts-ignore\n+  //       links = addLink(\n+  //         links,\n+  //         mainAdvisor._id,\n+  //         // @ts-ignore\n+  //         connectedAdvisor?._id,\n+  //         connection\n+  //       );\n+  //     }\n+  //   });\n+\n+  //   if (graphDegree >= 2) {\n+  //   }\n+  // }\n+\n+  return { nodes, links, minYear, maxYear, _id };\n+};\n+\n+// @ts-ignore\n+const GraphRender = ({\n+  onNodeHover,\n+  onNodeClick,\n+  _id,\n+  graphDegree,\n+  graphType,\n+}) => {\n+  const chartRef = useRef(null);\n+  const [option, setOption] = useState({}); // 用于存储图表配置\n+  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n+  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n+  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n+  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n+  const router = useRouter();\n+\n+  useEffect(() => {\n+    if (chartRef.current && !myChart) {\n+      const initializedChart = echarts.init(chartRef.current, null, {\n+        renderer: \"svg\",\n+      });\n+      // @ts-ignore\n+      setMyChart(initializedChart); // 保存 echarts 实例\n+    }\n+\n+    if (myChart) {\n+      const { nodes, links, minYear, maxYear } = advisorsReader(\n+        _id,\n+        graphDegree\n+      );\n+\n+      // 更新节点样式，为选中节点添加边框\n+      // @ts-ignore\n+      const updateNodesStyle = (nodes, selectedNodeId) => {\n+        // @ts-ignore\n+        return nodes.map((node) => {\n+          if (node.id === selectedNodeId) {\n+            return {\n+              ...node,\n+              itemStyle: {\n+                ...node.itemStyle,\n+                borderColor: \"blue\",\n+                borderWidth: 3,\n+                borderType: \"solid\",\n+              },\n+            };\n+          }\n+          return {\n+            ...node,\n+            itemStyle: {\n+              ...node.itemStyle,\n+              borderColor: \"none\",\n+              borderWidth: 0,\n+            },\n+          };\n+        });\n+      };\n+\n+      nodes.forEach((node) => {\n+        node.label = {\n+          show: true,\n+          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n+          offset: [0, 10 + node.symbolSize / 4],\n+        };\n+      });\n+\n+      const updatedNodes = nodes.map((node) => {\n+        // 主节点保持红色，其他节点颜色由 visualMap 控制\n+        if (node.id !== currentMain) {\n+          return {\n+            ...node,\n+            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+          };\n+        }\n+        return node;\n+      });\n+\n+      const initialOption = {\n+        title: {\n+          text: \"科研合作网络图\",\n+          top: \"bottom\",\n+          left: \"right\",\n+        },\n+        visualMap: {\n+          show: true,\n+          type: \"continuous\",\n+          min: minYear,\n+          max: maxYear,\n+          orient: \"horizontal\",\n+          left: \"3%\",\n+          bottom: \"10%\",\n+\n+          inRange: {\n+            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n+          },\n+          textStyle: {\n+            color: \"#333\",\n+          },\n+          // 显示两端的数值\n+          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n+          textGap: 5, // 文本与滑块之间的距离\n+        },\n+        tooltip: {\n+          show: true,\n+          formatter: (params: any) => {\n+            if (params.dataType === \"edge\") {\n+              return params.data.tooltip;\n+            }\n+            return params.data.name;\n+          },\n+        },\n+        legend: {\n+          data: [\"Main Node\", \"Other\"],\n+        },\n+        series: [\n+          {\n+            name: \"科研合作\",\n+            type: \"graph\",\n+            layout: \"force\",\n+            layoutAnimation: false,\n+            data: updateNodesStyle(updatedNodes, selectedNodeId),\n+            links: links,\n+            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n+            roam: true,\n+            edgeSymbol: [\"none\", \"none\"],\n+            edgeSymbolSize: [10, 20],\n+            label: {\n+              show: true,\n+              position: \"top\", // 将标签放置在节点的上方\n+              formatter: \"{b}\", // 使用节点的name作为标签文本\n+            },\n+            force: {\n+              repulsion: 2000,\n+              edgeLength: 400,\n+            },\n+            lineStyle: {\n+              color: \"source\",\n+              curveness: 0.3,\n+            },\n+            emphasis: {\n+              focus: \"self\", // 鼠标悬浮时只强调当前节点\n+              itemStyle: {\n+                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n+                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n+                borderWidth: 3, // 强调时的边框宽度\n+                borderType: \"solid\", // 边框类型\n+                shadowBlur: 10, // 阴影的模糊大小\n+                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n+              },\n+            },\n+            // 设置选中状态（如果需要）的样式\n+          },\n+        ],\n+      };\n+\n+      if (graphType === \"directed\") {\n+        initialOption.series[0].edgeSymbol = [\"none\", \"arrow\"];\n+      } else if (graphType === \"undirected\") {\n+        initialOption.series[0].edgeSymbol = [\"none\", \"none\"];\n+      } else {\n+        console.error(\"Invalid graph type.\");\n+      }\n+\n+      setOption(initialOption); // 设置图表配置\n+      // @ts-ignore\n+      myChart.setOption(initialOption); // 初始化图表\n+\n+      // 监听节点的鼠标悬停事件\n+      // @ts-ignore\n+      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 只有当节点未被选中时，才应用悬浮样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 应用悬浮样式\n+            onNodeHover(params.data);\n+          }\n+        }\n+      });\n+\n+      // 监听鼠标离开图表事件\n+      // @ts-ignore\n+      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n+        if (params.dataType === \"node\") {\n+          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n+          // @ts-ignore\n+          if (!selectedNode || params.data.id !== selectedNode.id) {\n+            // 恢复节点原样式\n+            onNodeHover(null); // 鼠标离开时清除选中的节点\n+          }\n+        }\n+      });\n+\n+      // 处理节点点击事件\n+      // @ts-ignore\n+      myChart.on(\"click\", function (params: any) {\n+        if (params.dataType === \"node\") {\n+          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n+          onNodeClick(params.data);\n+        }\n+        if (params.dataType === \"edge\") {\n+          // 如果是边（edge）的点击事件，不执行任何操作\n+          console.log(\"Edge click detected, action will be ignored.\");\n+          setSelectedNodeId(null); // 更新选中节点的ID\n+          onNodeClick(null);\n+          return; // 直接返回，不执行后续代码\n+        }\n+        // 重新应用图表配置以更新节点样式\n+        // @ts-ignore\n+        myChart.setOption({\n+          series: [\n+            {\n+              data: updateNodesStyle(nodes, selectedNodeId),\n+            },\n+          ],\n+        });\n+      });\n+\n+      // @ts-ignore\n+      myChart.on(\"graphRoam\", function (event) {\n+        if (event.zoom) {\n+          // @ts-ignore\n+          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n+          setZoomFactor(zoomLevel); // 更新缩放因子状态\n+          // @ts-ignore\n+          myChart.setOption({\n+            series: [\n+              {\n+                label: {\n+                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n+                },\n+              },\n+            ],\n+          });\n+        }\n+      });\n+\n+      // 清理工作\n+\n+      return () => {\n+        // @ts-ignore\n+        myChart.off(\"graphRoam\");\n+        // @ts-ignore\n+        myChart.off(\"mouseover\");\n+        // @ts-ignore\n+        myChart.off(\"mouseout\");\n+      };\n+    }\n+  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n+\n+  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n+};\n+\n+export default GraphRender;\n"
        },
        {
          "date": 1708535890945,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,8 +257,14 @@\n   onNodeClick,\n   _id,\n   graphDegree,\n   graphType,\n+}: {\n+  onNodeHover: Function;\n+  onNodeClick: Function;\n+  _id: string;\n+  graphDegree: number;\n+  graphType: string;\n }) => {\n   const chartRef = useRef(null);\n   const [option, setOption] = useState({}); // 用于存储图表配置\n   const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n@@ -504,511 +510,4 @@\n   return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n };\n \n export default GraphRender;\n-import React, { useEffect, useRef, useState } from \"react\";\n-\n-import * as echarts from \"echarts/core\";\n-import { GraphChart } from \"echarts/charts\";\n-import { useRouter } from \"next/router\";\n-\n-import { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n-\n-import { SVGRenderer } from \"echarts/renderers\";\n-\n-// 注册必要的组件\n-echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n-interface Advisor {\n-  _id: number;\n-  name: string;\n-  connections: {\n-    _id: number;\n-    relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n-    }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n-    }>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n-  }[];\n-}\n-\n-let currentMain = 0; // 记录主要advisor的ID\n-\n-const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n-\n-const advisorsReader = (_id: number, graphDegree: number) => {\n-  let nodes: any[] = [];\n-  let links: any[] = [];\n-  let nodeQueue: Advisor[] = [];\n-  let nodesSet = new Set<number>();\n-  let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n-  let minYear = new Date().getFullYear(); // 初始化为当前年份\n-  let maxYear = 0; // 初始化为0\n-\n-  if (!graphDegree || graphDegree < 1) {\n-    graphDegree = 1;\n-  }\n-  const currentYear = new Date().getFullYear();\n-  const minRelationFactor = Math.min(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-  const maxRelationFactor = Math.max(\n-    ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n-    )\n-  );\n-\n-  // 找到与currentMain匹配的advisor节点\n-  const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n-  );\n-\n-  // @ts-ignore\n-  nodeQueue.push(mainAdvisor);\n-\n-  const addNode = (\n-    nodes: any[],\n-    advisor: Advisor,\n-    symbolSize: number,\n-    latestCollaboration: number\n-  ) => {\n-    if (nodesSet.has(advisor._id)) {\n-      return nodes;\n-    }\n-\n-    if (advisor._id === mainAdvisor?._id) {\n-      nodes.push({\n-        id: String(mainAdvisor._id),\n-        symbolSize: 200, // main节点的大小\n-        itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-        ...mainAdvisor,\n-      });\n-    } else {\n-      nodes.push({\n-        id: String(advisor?._id),\n-        symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n-        ...advisor,\n-      });\n-    }\n-    nodesSet.add(advisor._id);\n-    return nodes;\n-  };\n-\n-  function addLink(\n-    links: any[],\n-    sourceId: number,\n-    targetId: number,\n-    connection: any\n-  ) {\n-    const width =\n-      1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n-        (maxRelationFactor - minRelationFactor);\n-    const formatter = `Relation factor: ${\n-      connection.relationFactor\n-    }<br/>${connection.relation\n-      .map(\n-        (rel: any) =>\n-          `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n-      )\n-      .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n-      .map(\n-        (collab: any) =>\n-          `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n-      )\n-      .join(\", \")}`;\n-\n-    if (\n-      linkSet.has(\n-        `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-      )\n-    ) {\n-      return links;\n-    }\n-\n-    links.push({\n-      source: String(sourceId),\n-      target: String(targetId),\n-      value: connection.relationFactor,\n-      lineStyle: {\n-        width: width,\n-        curveness: 0.1,\n-      },\n-      tooltip: {\n-        show: true,\n-        formatter: formatter,\n-      },\n-    });\n-    // undirected\n-    linkSet.add(\n-      `${Math.min(sourceId, targetId)}-${Math.max(sourceId, targetId)}`\n-    );\n-\n-    console.log(links);\n-    console.log(linkSet);\n-\n-    return links;\n-  }\n-\n-  while (nodeQueue.length > 0 && graphDegree > 0) {\n-    const currentAdvisor = nodeQueue.shift();\n-\n-    if (currentAdvisor) {\n-      nodes = addNode(\n-        nodes,\n-        currentAdvisor,\n-        200,\n-        currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n-          0\n-        )\n-      );\n-      currentAdvisor.connections.forEach((connection) => {\n-        const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n-        );\n-        if (connectedAdvisor) {\n-          const latestYear = connection.collaborations.reduce(\n-            (max, collab) => Math.max(max, collab.year),\n-            0\n-          );\n-\n-          minYear = Math.min(minYear, latestYear);\n-          maxYear = Math.max(maxYear, latestYear);\n-\n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-          // @ts-ignore\n-          nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-          //@ts-ignore\n-          links = addLink(\n-            links,\n-            currentAdvisor._id,\n-            // @ts-ignore\n-            connectedAdvisor?._id,\n-            connection\n-          );\n-          nodeQueue.push(connectedAdvisor);\n-        }\n-      });\n-      graphDegree--;\n-    }\n-  }\n-\n-  // if (mainAdvisor) {\n-  //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n-  //     symbolSize: 200, // main节点的大小\n-  //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n-  //     ...mainAdvisor,\n-  //   });\n-\n-  //   nodesSet.add(mainAdvisor._id);\n-\n-  //   mainAdvisor.connections.forEach((connection) => {\n-  //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n-  //     );\n-  //     if (connectedAdvisor) {\n-  //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n-  //       );\n-\n-  //       const latestYear = connection.collaborations.reduce(\n-  //         (max, collab) => Math.max(max, collab.year),\n-  //         0\n-  //       );\n-\n-  //       minYear = Math.min(minYear, latestYear);\n-  //       maxYear = Math.max(maxYear, latestYear);\n-\n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n-\n-  //       // @ts-ignore\n-  //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n-  //       //@ts-ignore\n-  //       links = addLink(\n-  //         links,\n-  //         mainAdvisor._id,\n-  //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n-  //         connection\n-  //       );\n-  //     }\n-  //   });\n-\n-  //   if (graphDegree >= 2) {\n-  //   }\n-  // }\n-\n-  return { nodes, links, minYear, maxYear, _id };\n-};\n-\n-// @ts-ignore\n-const GraphRender = ({\n-  onNodeHover,\n-  onNodeClick,\n-  _id,\n-  graphDegree,\n-  graphType,\n-}) => {\n-  const chartRef = useRef(null);\n-  const [option, setOption] = useState({}); // 用于存储图表配置\n-  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n-  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n-  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n-  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n-  const router = useRouter();\n-\n-  useEffect(() => {\n-    if (chartRef.current && !myChart) {\n-      const initializedChart = echarts.init(chartRef.current, null, {\n-        renderer: \"svg\",\n-      });\n-      // @ts-ignore\n-      setMyChart(initializedChart); // 保存 echarts 实例\n-    }\n-\n-    if (myChart) {\n-      const { nodes, links, minYear, maxYear } = advisorsReader(\n-        _id,\n-        graphDegree\n-      );\n-\n-      // 更新节点样式，为选中节点添加边框\n-      // @ts-ignore\n-      const updateNodesStyle = (nodes, selectedNodeId) => {\n-        // @ts-ignore\n-        return nodes.map((node) => {\n-          if (node.id === selectedNodeId) {\n-            return {\n-              ...node,\n-              itemStyle: {\n-                ...node.itemStyle,\n-                borderColor: \"blue\",\n-                borderWidth: 3,\n-                borderType: \"solid\",\n-              },\n-            };\n-          }\n-          return {\n-            ...node,\n-            itemStyle: {\n-              ...node.itemStyle,\n-              borderColor: \"none\",\n-              borderWidth: 0,\n-            },\n-          };\n-        });\n-      };\n-\n-      nodes.forEach((node) => {\n-        node.label = {\n-          show: true,\n-          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n-          offset: [0, 10 + node.symbolSize / 4],\n-        };\n-      });\n-\n-      const updatedNodes = nodes.map((node) => {\n-        // 主节点保持红色，其他节点颜色由 visualMap 控制\n-        if (node.id !== currentMain) {\n-          return {\n-            ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n-          };\n-        }\n-        return node;\n-      });\n-\n-      const initialOption = {\n-        title: {\n-          text: \"科研合作网络图\",\n-          top: \"bottom\",\n-          left: \"right\",\n-        },\n-        visualMap: {\n-          show: true,\n-          type: \"continuous\",\n-          min: minYear,\n-          max: maxYear,\n-          orient: \"horizontal\",\n-          left: \"3%\",\n-          bottom: \"10%\",\n-\n-          inRange: {\n-            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n-          },\n-          textStyle: {\n-            color: \"#333\",\n-          },\n-          // 显示两端的数值\n-          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n-          textGap: 5, // 文本与滑块之间的距离\n-        },\n-        tooltip: {\n-          show: true,\n-          formatter: (params: any) => {\n-            if (params.dataType === \"edge\") {\n-              return params.data.tooltip;\n-            }\n-            return params.data.name;\n-          },\n-        },\n-        legend: {\n-          data: [\"Main Node\", \"Other\"],\n-        },\n-        series: [\n-          {\n-            name: \"科研合作\",\n-            type: \"graph\",\n-            layout: \"force\",\n-            layoutAnimation: false,\n-            data: updateNodesStyle(updatedNodes, selectedNodeId),\n-            links: links,\n-            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n-            roam: true,\n-            edgeSymbol: [\"none\", \"none\"],\n-            edgeSymbolSize: [10, 10],\n-            label: {\n-              show: true,\n-              position: \"top\", // 将标签放置在节点的上方\n-              formatter: \"{b}\", // 使用节点的name作为标签文本\n-            },\n-            force: {\n-              repulsion: 2000,\n-              edgeLength: 400,\n-            },\n-            lineStyle: {\n-              color: \"source\",\n-              curveness: 0.3,\n-            },\n-            emphasis: {\n-              focus: \"self\", // 鼠标悬浮时只强调当前节点\n-              itemStyle: {\n-                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n-                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n-                borderWidth: 3, // 强调时的边框宽度\n-                borderType: \"solid\", // 边框类型\n-                shadowBlur: 10, // 阴影的模糊大小\n-                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n-              },\n-            },\n-            // 设置选中状态（如果需要）的样式\n-          },\n-        ],\n-      };\n-\n-      if (graphType === \"directed\") {\n-        initialOption.series[0].edgeSymbol = [\"none\", \"arrow\"];\n-      } else if (graphType === \"undirected\") {\n-        initialOption.series[0].edgeSymbol = [\"none\", \"none\"];\n-      } else {\n-        console.error(\"Invalid graph type.\");\n-      }\n-\n-      setOption(initialOption); // 设置图表配置\n-      // @ts-ignore\n-      myChart.setOption(initialOption); // 初始化图表\n-\n-      // 监听节点的鼠标悬停事件\n-      // @ts-ignore\n-      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 只有当节点未被选中时，才应用悬浮样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 应用悬浮样式\n-            onNodeHover(params.data);\n-          }\n-        }\n-      });\n-\n-      // 监听鼠标离开图表事件\n-      // @ts-ignore\n-      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n-        if (params.dataType === \"node\") {\n-          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n-          // @ts-ignore\n-          if (!selectedNode || params.data.id !== selectedNode.id) {\n-            // 恢复节点原样式\n-            onNodeHover(null); // 鼠标离开时清除选中的节点\n-          }\n-        }\n-      });\n-\n-      // 处理节点点击事件\n-      // @ts-ignore\n-      myChart.on(\"click\", function (params: any) {\n-        if (params.dataType === \"node\") {\n-          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n-          onNodeClick(params.data);\n-        }\n-        if (params.dataType === \"edge\") {\n-          // 如果是边（edge）的点击事件，不执行任何操作\n-          console.log(\"Edge click detected, action will be ignored.\");\n-          setSelectedNodeId(null); // 更新选中节点的ID\n-          onNodeClick(null);\n-          return; // 直接返回，不执行后续代码\n-        }\n-        // 重新应用图表配置以更新节点样式\n-        // @ts-ignore\n-        myChart.setOption({\n-          series: [\n-            {\n-              data: updateNodesStyle(nodes, selectedNodeId),\n-            },\n-          ],\n-        });\n-      });\n-\n-      // @ts-ignore\n-      myChart.on(\"graphRoam\", function (event) {\n-        if (event.zoom) {\n-          // @ts-ignore\n-          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n-          setZoomFactor(zoomLevel); // 更新缩放因子状态\n-          // @ts-ignore\n-          myChart.setOption({\n-            series: [\n-              {\n-                label: {\n-                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n-                },\n-              },\n-            ],\n-          });\n-        }\n-      });\n-\n-      // 清理工作\n-\n-      return () => {\n-        // @ts-ignore\n-        myChart.off(\"graphRoam\");\n-        // @ts-ignore\n-        myChart.off(\"mouseover\");\n-        // @ts-ignore\n-        myChart.off(\"mouseout\");\n-      };\n-    }\n-  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n-\n-  return <div ref={chartRef} style={{ width: \"100%\", height: \"100%\" }} />;\n-};\n-\n-export default GraphRender;\n"
        },
        {
          "date": 1708535909491,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,9 +283,9 @@\n     }\n \n     if (myChart) {\n       const { nodes, links, minYear, maxYear } = advisorsReader(\n-        _id,\n+        parseInt(_id),\n         graphDegree\n       );\n \n       // 更新节点样式，为选中节点添加边框\n"
        },
        {
          "date": 1711854479868,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,24 +10,21 @@\n \n // 注册必要的组件\n echarts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\n interface Advisor {\n-  _id: number;\n+  _id: number;\n   name: string;\n   connections: {\n-    _id: number;\n+    _id: number;\n     relation: Array<{\n       class: string;\n       role: string;\n       duration: {\n         start: { year: number; month: number };\n         end: { year: number; month: number };\n       };\n     }>;\n-    collaborations: Array<{\n-      papername: string;\n-      year: number;\n-      url: string;\n+    \"collaborate-papers\": Array<{\n     }>;\n     latestCollaboration: number;\n     relationFactor: number;\n   }[];\n@@ -36,15 +33,15 @@\n let currentMain = 0; // 记录主要advisor的ID\n \n const advisors: Advisor[] = require(\"../../../data/advisors.json\");\n \n-const advisorsReader = (_id: number, graphDegree: number) => {\n+const advisorsReader = (_id: number, graphDegree: number) => {\n   let nodes: any[] = [];\n   let links: any[] = [];\n   let nodeQueue: Advisor[] = [];\n   let nodesSet = new Set<number>();\n   let linkSet = new Set<string>(); // 其实是冗余的，暂时先不管\n-  currentMain = _id; // 更新主要advisor的ID\n+  currentMain = _id; // 更新主要advisor的ID\n   let minYear = new Date().getFullYear(); // 初始化为当前年份\n   let maxYear = 0; // 初始化为0\n \n   if (!graphDegree || graphDegree < 1) {\n@@ -63,9 +60,9 @@\n   );\n \n   // 找到与currentMain匹配的advisor节点\n   const mainAdvisor = advisors.find(\n-    (advisor) => advisor._id === currentMain\n+    (advisor) => advisor._id === currentMain\n   );\n \n   // @ts-ignore\n   nodeQueue.push(mainAdvisor);\n@@ -75,29 +72,29 @@\n     advisor: Advisor,\n     symbolSize: number,\n     latestCollaboration: number\n   ) => {\n-    if (nodesSet.has(advisor._id)) {\n+    if (nodesSet.has(advisor._id)) {\n       return nodes;\n     }\n \n-    if (advisor._id === mainAdvisor?._id) {\n+    if (advisor._id === mainAdvisor?._id) {\n       nodes.push({\n-        id: String(mainAdvisor._id),\n+        id: String(mainAdvisor._id),\n         symbolSize: 200, // main节点的大小\n         itemStyle: { color: \"red\" }, // main节点为红色\n         latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n         ...mainAdvisor,\n       });\n     } else {\n       nodes.push({\n-        id: String(advisor?._id),\n+        id: String(advisor?._id),\n         symbolSize: symbolSize,\n         latestCollaboration: latestCollaboration,\n         ...advisor,\n       });\n     }\n-    nodesSet.add(advisor._id);\n+    nodesSet.add(advisor._id);\n     return nodes;\n   };\n \n   function addLink(\n@@ -170,9 +167,9 @@\n         )\n       );\n       currentAdvisor.connections.forEach((connection) => {\n         const connectedAdvisor = advisors.find(\n-          (advisor) => advisor._id === connection._id\n+          (advisor) => advisor._id === connection._id\n         );\n         if (connectedAdvisor) {\n           const latestYear = connection.collaborations.reduce(\n             (max, collab) => Math.max(max, collab.year),\n@@ -188,11 +185,11 @@\n           nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n           //@ts-ignore\n           links = addLink(\n             links,\n-            currentAdvisor._id,\n+            currentAdvisor._id,\n             // @ts-ignore\n-            connectedAdvisor?._id,\n+            connectedAdvisor?._id,\n             connection\n           );\n           nodeQueue.push(connectedAdvisor);\n         }\n@@ -202,24 +199,24 @@\n   }\n \n   // if (mainAdvisor) {\n   //   nodes.push({\n-  //     id: String(mainAdvisor._id),\n+  //     id: String(mainAdvisor._id),\n   //     symbolSize: 200, // main节点的大小\n   //     itemStyle: { color: \"red\" }, // main节点为红色\n   //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n   //     ...mainAdvisor,\n   //   });\n \n-  //   nodesSet.add(mainAdvisor._id);\n+  //   nodesSet.add(mainAdvisor._id);\n \n   //   mainAdvisor.connections.forEach((connection) => {\n   //     const connectedAdvisor = advisors.find(\n-  //       (advisor) => advisor._id === connection._id\n+  //       (advisor) => advisor._id === connection._id\n   //     );\n   //     if (connectedAdvisor) {\n   //       const connectedAdvisor = advisors.find(\n-  //         (advisor) => advisor._id === connection._id\n+  //         (advisor) => advisor._id === connection._id\n   //       );\n \n   //       const latestYear = connection.collaborations.reduce(\n   //         (max, collab) => Math.max(max, collab.year),\n@@ -235,11 +232,11 @@\n   //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n   //       //@ts-ignore\n   //       links = addLink(\n   //         links,\n-  //         mainAdvisor._id,\n+  //         mainAdvisor._id,\n   //         // @ts-ignore\n-  //         connectedAdvisor?._id,\n+  //         connectedAdvisor?._id,\n   //         connection\n   //       );\n   //     }\n   //   });\n@@ -247,22 +244,22 @@\n   //   if (graphDegree >= 2) {\n   //   }\n   // }\n \n-  return { nodes, links, minYear, maxYear, _id };\n+  return { nodes, links, minYear, maxYear, _id };\n };\n \n // @ts-ignore\n const GraphRender = ({\n   onNodeHover,\n   onNodeClick,\n-  _id,\n+  _id,\n   graphDegree,\n   graphType,\n }: {\n   onNodeHover: Function;\n   onNodeClick: Function;\n-  _id: string;\n+  _id: string;\n   graphDegree: number;\n   graphType: string;\n }) => {\n   const chartRef = useRef(null);\n@@ -283,9 +280,9 @@\n     }\n \n     if (myChart) {\n       const { nodes, links, minYear, maxYear } = advisorsReader(\n-        parseInt(_id),\n+        parseInt(_id),\n         graphDegree\n       );\n \n       // 更新节点样式，为选中节点添加边框\n"
        },
        {
          "date": 1711854487870,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,14 +15,8 @@\n   name: string;\n   connections: {\n     _id: number;\n     relation: Array<{\n-      class: string;\n-      role: string;\n-      duration: {\n-        start: { year: number; month: number };\n-        end: { year: number; month: number };\n-      };\n     }>;\n     \"collaborate-papers\": Array<{}>;\n     latestCollaboration: number;\n     relationFactor: number;\n"
        },
        {
          "date": 1711854557639,
          "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,10 +16,10 @@\n   connections: {\n     _id: number;\n     relation: Array<{}>;\n     \"collaborate-papers\": Array<{}>;\n-    latestCollaboration: number;\n-    relationFactor: number;\n+    \"last-connected\": number;\n+    \"connected-strength\": number;\n   }[];\n }\n \n let currentMain = 0; // 记录主要advisor的ID\n@@ -41,14 +41,14 @@\n   }\n   const currentYear = new Date().getFullYear();\n   const minRelationFactor = Math.min(\n     ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n+      advisor.connections.map((conn) => conn.connected-strength)\n     )\n   );\n   const maxRelationFactor = Math.max(\n     ...advisors.flatMap((advisor) =>\n-      advisor.connections.map((conn) => conn.relationFactor)\n+      advisor.connections.map((conn) => conn.connected-strength)\n     )\n   );\n \n   // 找到与currentMain匹配的advisor节点\n@@ -60,9 +60,9 @@\n   const addNode = (\n     nodes: any[],\n     advisor: Advisor,\n     symbolSize: number,\n-    latestCollaboration: number\n+    last-connected: number\n   ) => {\n     if (nodesSet.has(advisor._id)) {\n       return nodes;\n     }\n@@ -71,16 +71,16 @@\n       nodes.push({\n         id: String(mainAdvisor._id),\n         symbolSize: 200, // main节点的大小\n         itemStyle: { color: \"red\" }, // main节点为红色\n-        latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+        last-connected: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n         ...mainAdvisor,\n       });\n     } else {\n       nodes.push({\n         id: String(advisor?._id),\n         symbolSize: symbolSize,\n-        latestCollaboration: latestCollaboration,\n+        last-connected: last-connected,\n         ...advisor,\n       });\n     }\n     nodesSet.add(advisor._id);\n@@ -94,12 +94,12 @@\n     connection: any\n   ) {\n     const width =\n       1 +\n-      (4 * (connection.relationFactor - minRelationFactor)) /\n+      (4 * (connection.connected-strength - minRelationFactor)) /\n         (maxRelationFactor - minRelationFactor);\n     const formatter = `Relation factor: ${\n-      connection.relationFactor\n+      connection.connected-strength\n     }<br/>${connection.relation\n       .map(\n         (rel: any) =>\n           `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n@@ -121,9 +121,9 @@\n \n     links.push({\n       source: String(sourceId),\n       target: String(targetId),\n-      value: connection.relationFactor,\n+      value: connection.connected-strength,\n       lineStyle: {\n         width: width,\n         curveness: 0.1,\n       },\n@@ -151,9 +151,9 @@\n         nodes,\n         currentAdvisor,\n         200,\n         currentAdvisor?.connections.reduce(\n-          (max, conn) => Math.max(max, conn.latestCollaboration),\n+          (max, conn) => Math.max(max, conn.last-connected),\n           0\n         )\n       );\n       currentAdvisor.connections.forEach((connection) => {\n@@ -168,9 +168,9 @@\n \n           minYear = Math.min(minYear, latestYear);\n           maxYear = Math.max(maxYear, latestYear);\n \n-          const symbolSize = 20 + connection.relationFactor * 0.5;\n+          const symbolSize = 20 + connection.connected-strength * 0.5;\n \n           // @ts-ignore\n           nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n           //@ts-ignore\n@@ -192,9 +192,9 @@\n   //   nodes.push({\n   //     id: String(mainAdvisor._id),\n   //     symbolSize: 200, // main节点的大小\n   //     itemStyle: { color: \"red\" }, // main节点为红色\n-  //     latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n+  //     last-connected: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n   //     ...mainAdvisor,\n   //   });\n \n   //   nodesSet.add(mainAdvisor._id);\n@@ -215,9 +215,9 @@\n \n   //       minYear = Math.min(minYear, latestYear);\n   //       maxYear = Math.max(maxYear, latestYear);\n \n-  //       const symbolSize = 20 + connection.relationFactor * 0.5;\n+  //       const symbolSize = 20 + connection.connected-strength * 0.5;\n \n   //       // @ts-ignore\n   //       nodes = addNode(nodes, connectedAdvisor, symbolSize, latestYear);\n   //       //@ts-ignore\n@@ -314,9 +314,9 @@\n         // 主节点保持红色，其他节点颜色由 visualMap 控制\n         if (node.id !== currentMain) {\n           return {\n             ...node,\n-            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n+            value: node.last-connected, // 设置 value 以供 visualMap 使用\n           };\n         }\n         return node;\n       });\n"
        }
      ],
      "date": 1708501877160,
      "name": "Commit-0",
      "content": "import React, { useEffect, useRef, useState } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport * as echarts from \"echarts/core\";\nimport { GraphChart } from \"echarts/charts\";\nimport { useRouter } from \"next/router\";\n\nimport { TooltipComponent, VisualMapComponent } from \"echarts/components\";\n\nimport { SVGRenderer } from \"echarts/renderers\";\n\nconst generateGraphData = (nodesCount: number) => {\n  const nodes = [];\n  const links = [];\n\n  // 主节点\n  nodes.push({\n    name: \"Main Node\",\n    category: 0,\n    symbolSize: 70,\n    itemStyle: { color: \"red\" },\n  });\n\n  // 其他节点\n  for (let i = 1; i <= nodesCount; i++) {\n    nodes.push({\n      name: `Node ${i}`,\n      category: 1,\n      symbolSize: 20 + Math.random() * 40, // 20 ~ 60 的大小\n      itemStyle: { color: \"grey\" },\n    });\n    links.push({\n      source: \"Main Node\",\n      target: `Node ${i}`,\n    });\n  }\n\n  return { nodes, links };\n};\n\n// 注册必要的组件\necharts.use([TooltipComponent, GraphChart, SVGRenderer, VisualMapComponent]);\ninterface Advisor {\n  _id: number;\n  name: string;\n  connections: {\n    _id: number;\n    relation: Array<{\n      class: string;\n      role: string;\n      duration: {\n        start: { year: number; month: number };\n        end: { year: number; month: number };\n      };\n    }>;\n    collaborations: Array<{\n      papername: string;\n      year: number;\n      url: string;\n    }>;\n    latestCollaboration: number;\n    relationFactor: number;\n  }[];\n}\n\nlet currentMain = 0; // 记录主要advisor的ID\n\nconst advisors: Advisor[] = require(\"data/advisors.json\");\n\nconst advisorsReader = (_id: number) => {\n  const nodes: any[] = [];\n  const links: any[] = [];\n  currentMain = _id; // 更新主要advisor的ID\n  let minYear = new Date().getFullYear(); // 初始化为当前年份\n  let maxYear = 0; // 初始化为0\n  const currentYear = new Date().getFullYear();\n  const minRelationFactor = Math.min(\n    ...advisors.flatMap((advisor) =>\n      advisor.connections.map((conn) => conn.relationFactor)\n    )\n  );\n  const maxRelationFactor = Math.max(\n    ...advisors.flatMap((advisor) =>\n      advisor.connections.map((conn) => conn.relationFactor)\n    )\n  );\n\n  // 找到与currentMain匹配的advisor节点\n  const mainAdvisor = advisors.find(\n    (advisor) => advisor._id === currentMain\n  );\n\n  if (mainAdvisor) {\n    nodes.push({\n      id: String(mainAdvisor._id),\n      symbolSize: 200, // main节点的大小\n      itemStyle: { color: \"red\" }, // main节点为红色\n      latestCollaboration: new Date().getFullYear(), // 假设主节点的最近合作时间为当前年\n      ...mainAdvisor,\n    });\n\n    mainAdvisor.connections.forEach((connection) => {\n      const connectedAdvisor = advisors.find(\n        (advisor) => advisor._id === connection._id\n      );\n      if (connectedAdvisor) {\n        const connectedAdvisor = advisors.find(\n          (advisor) => advisor._id === connection._id\n        );\n\n        const latestYear = connection.collaborations.reduce(\n          (max, collab) => Math.max(max, collab.year),\n          0\n        );\n\n        minYear = Math.min(minYear, latestYear);\n        maxYear = Math.max(maxYear, latestYear);\n\n        const symbolSize = 20 + connection.relationFactor * 0.5;\n\n        nodes.push({\n          id: String(connectedAdvisor?._id),\n          symbolSize: symbolSize,\n          latestCollaboration: latestYear,\n          ...connectedAdvisor,\n        });\n\n        links.push({\n          source: String(mainAdvisor._id),\n          target: String(connectedAdvisor?._id),\n          value: connection.relationFactor,\n          lineStyle: {\n            width:\n              1 +\n              (4 * (connection.relationFactor - minRelationFactor)) /\n                (maxRelationFactor - minRelationFactor), // 根据relationFactor调整线条粗细\n            curveness: 0.1, // 连线的曲度\n          },\n          tooltip: {\n            show: true,\n            formatter: () =>\n              `Relation factor: ${\n                connection.relationFactor\n              }<br/>${connection.relation\n                .map(\n                  (rel) =>\n                    `${rel.role} in ${rel.class}, from ${rel.duration.start.year}-${rel.duration.start.month} to ${rel.duration.end.year}-${rel.duration.end.month}`\n                )\n                .join(\"; \")}<br/>Collaborations: ${connection.collaborations\n                .map(\n                  (collab) =>\n                    `<a href=\"${collab.url}\" target=\"_blank\">${collab.papername} (${collab.year})</a>`\n                )\n                .join(\", \")}`,\n          },\n        });\n      }\n    });\n  }\n\n  return { nodes, links, minYear, maxYear, _id };\n};\n\n// @ts-ignore\nconst GraphRender = ({ onNodeHover, onNodeClick, _id }) => {\n  const chartRef = useRef(null);\n  const [option, setOption] = useState({}); // 用于存储图表配置\n  const [zoomFactor, setZoomFactor] = useState(1); // 存储当前的缩放因子\n  const [selectedNode, setSelectedNode] = useState(null); // 新增状态来跟踪选中的节点\n  const [selectedNodeId, setSelectedNodeId] = useState(null); // 用于存储选中节点的ID\n  const [myChart, setMyChart] = useState(null); // 用于存储 echarts 实例\n  const router = useRouter();\n\n  useEffect(() => {\n    if (chartRef.current && !myChart) {\n      const initializedChart = echarts.init(chartRef.current, null, {\n        renderer: \"svg\",\n      });\n      // @ts-ignore\n      setMyChart(initializedChart); // 保存 echarts 实例\n    }\n\n    if (myChart) {\n      const { nodes, links, minYear, maxYear } = advisorsReader(_id);\n\n      // 更新节点样式，为选中节点添加边框\n      // @ts-ignore\n      const updateNodesStyle = (nodes, selectedNodeId) => {\n        // @ts-ignore\n        return nodes.map((node) => {\n          if (node.id === selectedNodeId) {\n            return {\n              ...node,\n              itemStyle: {\n                ...node.itemStyle,\n                borderColor: \"blue\",\n                borderWidth: 3,\n                borderType: \"solid\",\n              },\n            };\n          }\n          return {\n            ...node,\n            itemStyle: {\n              ...node.itemStyle,\n              borderColor: \"none\",\n              borderWidth: 0,\n            },\n          };\n        });\n      };\n\n      nodes.forEach((node) => {\n        node.label = {\n          show: true,\n          fontSize: 24 * zoomFactor, // 根据当前缩放因子设置初始字体大小\n          offset: [0, 10 + node.symbolSize / 4],\n        };\n      });\n\n      const updatedNodes = nodes.map((node) => {\n        // 主节点保持红色，其他节点颜色由 visualMap 控制\n        if (node.id !== currentMain) {\n          return {\n            ...node,\n            value: node.latestCollaboration, // 设置 value 以供 visualMap 使用\n          };\n        }\n        return node;\n      });\n\n      const initialOption = {\n        title: {\n          text: \"科研合作网络图\",\n          top: \"bottom\",\n          left: \"right\",\n        },\n        visualMap: {\n          show: true,\n          type: \"continuous\",\n          min: minYear,\n          max: maxYear,\n          calculable: false,\n          orient: \"horizontal\",\n          left: \"80%\",\n\n          inRange: {\n            color: [\"#eee\", \"#abc\"], // 从浅灰到深灰的颜色渐变\n          },\n          textStyle: {\n            color: \"#333\",\n          },\n          // 显示两端的数值\n          text: [maxYear.toString(), minYear.toString()], // visualMap 两端显示的文本，分别对应最大值和最小值\n          textGap: 5, // 文本与滑块之间的距离\n        },\n        tooltip: {\n          show: true,\n          formatter: (params: any) => {\n            if (params.dataType === \"edge\") {\n              return params.data.tooltip;\n            }\n            return params.data.name;\n          },\n        },\n        legend: {\n          data: [\"Main Node\", \"Other\"],\n        },\n        series: [\n          {\n            name: \"科研合作\",\n            type: \"graph\",\n            layout: \"force\",\n            layoutAnimation: false,\n            data: updateNodesStyle(updatedNodes, selectedNodeId),\n            links: links,\n            categories: [{ name: \"Main Node\" }, { name: \"Other\" }],\n            roam: true,\n            label: {\n              show: true,\n              position: \"top\", // 将标签放置在节点的上方\n              formatter: \"{b}\", // 使用节点的name作为标签文本\n            },\n            force: {\n              repulsion: 500,\n              edgeLength: 400,\n            },\n            lineStyle: {\n              color: \"source\",\n              curveness: 0.3,\n            },\n            emphasis: {\n              focus: \"self\", // 鼠标悬浮时只强调当前节点\n              itemStyle: {\n                color: \"#darkerColor\", // 强调时的颜色，需替换为实际更深的颜色值\n                borderColor: \"rgba(255, 255, 255, 0.8)\", // 强调时的边框颜色，使用半透明的白色\n                borderWidth: 3, // 强调时的边框宽度\n                borderType: \"solid\", // 边框类型\n                shadowBlur: 10, // 阴影的模糊大小\n                shadowColor: \"rgba(0, 0, 0, 0.3)\", // 阴影颜色\n              },\n            },\n            // 设置选中状态（如果需要）的样式\n          },\n        ],\n      };\n\n      setOption(initialOption); // 设置图表配置\n      // @ts-ignore\n      myChart.setOption(initialOption); // 初始化图表\n\n      // 监听节点的鼠标悬停事件\n      // @ts-ignore\n      myChart.on(\"mouseover\", \"series.graph\", function (params) {\n        if (params.dataType === \"node\") {\n          // 只有当节点未被选中时，才应用悬浮样式\n          // @ts-ignore\n          if (!selectedNode || params.data.id !== selectedNode.id) {\n            // 应用悬浮样式\n            onNodeHover(params.data);\n          }\n        }\n      });\n\n      // 监听鼠标离开图表事件\n      // @ts-ignore\n      myChart.on(\"mouseout\", \"series.graph\", function (params) {\n        if (params.dataType === \"node\") {\n          // 如果鼠标离开的节点不是被选中的节点，恢复原样式\n          // @ts-ignore\n          if (!selectedNode || params.data.id !== selectedNode.id) {\n            // 恢复节点原样式\n            onNodeHover(null); // 鼠标离开时清除选中的节点\n          }\n        }\n      });\n\n      // 处理节点点击事件\n      // @ts-ignore\n      myChart.on(\"click\", function (params: any) {\n        if (params.dataType === \"node\") {\n          setSelectedNodeId(params.data.id); // 更新选中节点的ID\n          onNodeClick(params.data);\n        }\n        if (params.dataType === \"edge\") {\n          // 如果是边（edge）的点击事件，不执行任何操作\n          console.log(\"Edge click detected, action will be ignored.\");\n          setSelectedNodeId(null); // 更新选中节点的ID\n          onNodeClick(null);\n          return; // 直接返回，不执行后续代码\n        }\n        // 重新应用图表配置以更新节点样式\n        // @ts-ignore\n        myChart.setOption({\n          series: [\n            {\n              data: updateNodesStyle(nodes, selectedNodeId),\n            },\n          ],\n        });\n      });\n\n      // @ts-ignore\n      myChart.on(\"graphRoam\", function (event) {\n        if (event.zoom) {\n          // @ts-ignore\n          const zoomLevel = myChart.getOption().series[0].zoom; // 获取当前的缩放级别\n          setZoomFactor(zoomLevel); // 更新缩放因子状态\n          // @ts-ignore\n          myChart.setOption({\n            series: [\n              {\n                label: {\n                  fontSize: 12 * zoomLevel, // 根据缩放级别调整字体大小\n                },\n              },\n            ],\n          });\n        }\n      });\n\n      // 清理工作\n\n      return () => {\n        // @ts-ignore\n        myChart.off(\"graphRoam\");\n        // @ts-ignore\n        myChart.off(\"mouseover\");\n        // @ts-ignore\n        myChart.off(\"mouseout\");\n      };\n    }\n  }, [zoomFactor, onNodeHover, selectedNodeId, myChart]);\n\n  return <div ref={chartRef} style={{ width: \"100%\", height: \"90vh\" }} />;\n};\n\nexport default GraphRender;\n"
    }
  ]
}
