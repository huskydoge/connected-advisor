{
    "sourceFile": "src/components/AvatarLoader.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1708344087162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708344304435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,18 @@\n-import React, { useState } from \"react\";\n+import React, { useState, useEffect } from \"react\";\n import { CircularProgress, Box, Avatar } from \"@mui/material\";\n \n const AvatarLoader = ({ src, alt, ...props }) => {\n   const [loaded, setLoaded] = useState(false);\n \n+  useEffect(() => {\n+    const imageToLoad = new Image();\n+    imageToLoad.src = src;\n+    imageToLoad.onload = () => {\n+      setLoaded(true); // 当图像加载完成时更新状态\n+    };\n+  }, [src]); // 依赖项为src，这意味着当src变化时，重新运行effect\n+\n   return (\n     <Box\n       sx={{\n         display: \"inline-flex\",\n@@ -22,11 +30,10 @@\n           }}\n         />\n       )}\n       <Avatar\n-        src={loaded ? src : undefined} // 只有当图像加载完成后才设置src属性\n+        src={loaded ? src : undefined} // 图像加载完成后设置src属性\n         alt={alt}\n-        onLoad={() => setLoaded(true)}\n         {...props}\n         sx={{\n           ...props.sx,\n           opacity: loaded ? 1 : 0, // 在加载过程中隐藏Avatar，直到图像加载完成\n"
                },
                {
                    "date": 1708447213260,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import React, { useState, useEffect } from \"react\";\n+import { CircularProgress, Box, Avatar } from \"@mui/material\";\n+\n+interface AvatarLoaderProps extends AvatarProps {\n+  src: string;\n+  alt: string;\n+}\n+\n+const AvatarLoader = ({ src, alt, ...props }) => {\n+  const [loaded, setLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    const imageToLoad = new Image();\n+    imageToLoad.src = src;\n+    imageToLoad.onload = () => {\n+      setLoaded(true); // 当图像加载完成时更新状态\n+    };\n+  }, [src]); // 依赖项为src，这意味着当src变化时，重新运行effect\n+\n+  return (\n+    <Box\n+      sx={{\n+        display: \"inline-flex\",\n+        position: \"relative\",\n+        alignItems: \"center\",\n+        justifyContent: \"center\",\n+      }}\n+    >\n+      {!loaded && (\n+        <CircularProgress\n+          size={24}\n+          sx={{\n+            position: \"absolute\",\n+            zIndex: 1,\n+          }}\n+        />\n+      )}\n+      <Avatar\n+        src={loaded ? src : undefined} // 图像加载完成后设置src属性\n+        alt={alt}\n+        {...props}\n+        sx={{\n+          ...props.sx,\n+          opacity: loaded ? 1 : 0, // 在加载过程中隐藏Avatar，直到图像加载完成\n+          transition: \"opacity 0.3s ease-in-out\", // 平滑过渡效果\n+        }}\n+      />\n+    </Box>\n+  );\n+};\n+\n+export default AvatarLoader;\n"
                },
                {
                    "date": 1708447220375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,51 +49,4 @@\n   );\n };\n \n export default AvatarLoader;\n-import React, { useState, useEffect } from \"react\";\n-import { CircularProgress, Box, Avatar } from \"@mui/material\";\n-\n-const AvatarLoader = ({ src, alt, ...props }) => {\n-  const [loaded, setLoaded] = useState(false);\n-\n-  useEffect(() => {\n-    const imageToLoad = new Image();\n-    imageToLoad.src = src;\n-    imageToLoad.onload = () => {\n-      setLoaded(true); // 当图像加载完成时更新状态\n-    };\n-  }, [src]); // 依赖项为src，这意味着当src变化时，重新运行effect\n-\n-  return (\n-    <Box\n-      sx={{\n-        display: \"inline-flex\",\n-        position: \"relative\",\n-        alignItems: \"center\",\n-        justifyContent: \"center\",\n-      }}\n-    >\n-      {!loaded && (\n-        <CircularProgress\n-          size={24}\n-          sx={{\n-            position: \"absolute\",\n-            zIndex: 1,\n-          }}\n-        />\n-      )}\n-      <Avatar\n-        src={loaded ? src : undefined} // 图像加载完成后设置src属性\n-        alt={alt}\n-        {...props}\n-        sx={{\n-          ...props.sx,\n-          opacity: loaded ? 1 : 0, // 在加载过程中隐藏Avatar，直到图像加载完成\n-          transition: \"opacity 0.3s ease-in-out\", // 平滑过渡效果\n-        }}\n-      />\n-    </Box>\n-  );\n-};\n-\n-export default AvatarLoader;\n"
                },
                {
                    "date": 1708447287874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useState, useEffect } from \"react\";\n-import { CircularProgress, Box, Avatar } from \"@mui/material\";\n+import { CircularProgress, Box, Avatar, AvatarProps } from \"@mui/material\";\n \n interface AvatarLoaderProps extends AvatarProps {\n   src: string;\n   alt: string;\n"
                },
                {
                    "date": 1708448031472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,52 @@\n+import React, { useState, useEffect } from \"react\";\n+import { CircularProgress, Box, Avatar, AvatarProps } from \"@mui/material\";\n+\n+interface AvatarLoaderProps extends AvatarProps {\n+  src: string;\n+  alt: string;\n+}\n+\n+const AvatarLoader = ({ src, alt, ...props }: AvatarLoaderProps) => {\n+  const [loaded, setLoaded] = useState(false);\n+\n+  useEffect(() => {\n+    const imageToLoad = new Image();\n+    imageToLoad.src = src;\n+    imageToLoad.onload = () => {\n+      setLoaded(true); // 当图像加载完成时更新状态\n+    };\n+  }, [src]); // 依赖项为src，这意味着当src变化时，重新运行effect\n+\n+  return (\n+    <Box\n+      sx={{\n+        display: \"inline-flex\",\n+        position: \"relative\",\n+        alignItems: \"center\",\n+        justifyContent: \"center\",\n+      }}\n+    >\n+      {!loaded && (\n+        <CircularProgress\n+          size={24}\n+          sx={{\n+            position: \"absolute\",\n+            zIndex: 1,\n+          }}\n+        />\n+      )}\n+      <Avatar\n+        src={loaded ? src : undefined} // 图像加载完成后设置src属性\n+        alt={alt}\n+        {...props}\n+        sx={{\n+          ...props.sx,\n+          opacity: loaded ? 1 : 0, // 在加载过程中隐藏Avatar，直到图像加载完成\n+          transition: \"opacity 0.3s ease-in-out\", // 平滑过渡效果\n+        }}\n+      />\n+    </Box>\n+  );\n+};\n+\n+export default AvatarLoader;\n"
                }
            ],
            "date": 1708344087162,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\nimport { CircularProgress, Box, Avatar } from \"@mui/material\";\n\nconst AvatarLoader = ({ src, alt, ...props }) => {\n  const [loaded, setLoaded] = useState(false);\n\n  return (\n    <Box\n      sx={{\n        display: \"inline-flex\",\n        position: \"relative\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      {!loaded && (\n        <CircularProgress\n          size={24}\n          sx={{\n            position: \"absolute\",\n            zIndex: 1,\n          }}\n        />\n      )}\n      <Avatar\n        src={loaded ? src : undefined} // 只有当图像加载完成后才设置src属性\n        alt={alt}\n        onLoad={() => setLoaded(true)}\n        {...props}\n        sx={{\n          ...props.sx,\n          opacity: loaded ? 1 : 0, // 在加载过程中隐藏Avatar，直到图像加载完成\n          transition: \"opacity 0.3s ease-in-out\", // 平滑过渡效果\n        }}\n      />\n    </Box>\n  );\n};\n\nexport default AvatarLoader;\n"
        }
    ]
}