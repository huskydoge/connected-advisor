{
    "sourceFile": "src/pages/api/fuzzySearchAdvisor.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1715429535235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715429800122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     res.status(405).end(`Method ${req.method} Not Allowed`);\n     return;\n   }\n \n-  const { oid, name, tags, position, affiliation } = req.body;\n+  const query = req.body;\n \n   console.log(\"oid\", oid);\n   console.log(\"name\", name);\n   console.log(\"tags\", tags);\n"
                },
                {
                    "date": 1715429809288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n   }\n \n   const query = req.body;\n \n-  if (!oid && !name && !tags && !position && !affiliation) {\n+  if (!query) {\n     res.status(400).json({ message: \"Missing query parameters\" });\n     return;\n   }\n \n"
                },
                {
                    "date": 1715429826909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,11 @@\n     res.status(405).end(`Method ${req.method} Not Allowed`);\n     return;\n   }\n \n-  const query = req.body;\n+  const query_text = req.body;\n \n-  if (!query) {\n+  if (!query_text) {\n     res.status(400).json({ message: \"Missing query parameters\" });\n     return;\n   }\n \n"
                }
            ],
            "date": 1715429535235,
            "name": "Commit-0",
            "content": "import { MongoClient, ObjectId } from \"mongodb\";\n\n// MongoDB URL and database name\nconst MONGO_URL = process.env.MONGO_URL || \"\";\nconst DB_NAME = \"ConnectedAdvisor\";\nconst COLLECTION_NAME = \"AdvisorTable\";\n\nasync function connectToDatabase() {\n  const client = new MongoClient(MONGO_URL);\n  await client.connect();\n  const db = client.db(DB_NAME);\n  return { db, client };\n}\n\nexport default async function handler(req, res) {\n  res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n  res.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n  res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n  if (req.method !== \"POST\") {\n    res.setHeader(\"Allow\", [\"POST\"]);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n    return;\n  }\n\n  const { oid, name, tags, position, affiliation } = req.body;\n\n  console.log(\"oid\", oid);\n  console.log(\"name\", name);\n  console.log(\"tags\", tags);\n  console.log(\"position\", position);\n  console.log(\"affiliation\", affiliation);\n\n  if (!oid && !name && !tags && !position && !affiliation) {\n    res.status(400).json({ message: \"Missing query parameters\" });\n    return;\n  }\n\n  try {\n    const { db, client } = await connectToDatabase();\n\n    let result;\n    if (oid) {\n      result = await db.collection(COLLECTION_NAME).findOne({ _id: new ObjectId(oid) });\n    } else {\n      let query = [];\n      if (name) {\n        let words = name.split(/\\s+/); // Split the input name into an array of words\n        let regexPattern = words.map(word => `(?=.*${word})`).join(\"\");\n        query.push({ name: { $regex: new RegExp(regexPattern, \"i\") } });\n      }\n      if (tags) {\n        query.push({ tags: { $in: tags } });\n      }\n      if (position) {\n        query.push({ position: { $regex: new RegExp(position, \"i\") } });\n      }\n      if (affiliation) {\n        query.push({ affiliation: { $regex: new RegExp(affiliation, \"i\") } });\n      }\n      \n      result = await db.collection(COLLECTION_NAME).find({\n        $or: query\n      }).toArray();\n    }\n\n    if (result && result.length > 0) {\n      res.status(200).json(result);\n    } else {\n      res.status(404).json({ message: \"No matching documents found\" });\n    }\n\n    client.close();\n  } catch (error) {\n    console.error(error);\n    res.status(500).json({ message: \"Internal Server Error\" });\n  }\n}\n"
        }
    ]
}