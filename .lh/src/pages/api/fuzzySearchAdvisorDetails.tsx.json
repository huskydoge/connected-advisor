{
    "sourceFile": "src/pages/api/fuzzySearchAdvisorDetails.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1715484952057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715484988464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,20 +1,25 @@\n // pages/api/getAdvisorDetails.tsx\n \n-import { NextApiRequest, NextApiResponse } from \"next\";\n-import { MongoClient, ObjectId } from \"mongodb\";\n-\n-// 环境变量中获取 MongoDB 的连接 URL\n-const MONGO_URL = process.env.MONGO_URL;\n+// MongoDB URL and database query_text\n+const MONGO_URL = process.env.MONGO_URL || \"\";\n const DB_NAME = \"ConnectedAdvisor\";\n+const COLLECTION_NAME = \"AdvisorTable\";\n \n async function connectToDatabase() {\n   const client = new MongoClient(MONGO_URL);\n   await client.connect();\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n \n+async function connectToDatabase() {\n+  const client = new MongoClient(MONGO_URL);\n+  await client.connect();\n+  const db = client.db(DB_NAME);\n+  return { db, client };\n+}\n+\n async function getAdvisorDetails(advisorId: string) {\n   const { db, client } = await connectToDatabase();\n \n   try {\n"
                },
                {
                    "date": 1715485299577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,8 @@\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n \n-\n-\n async function getAdvisorDetails(advisorId: string) {\n   const { db, client } = await connectToDatabase();\n \n   try {\n"
                },
                {
                    "date": 1715485377607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,8 +203,14 @@\n             ],\n           })\n           .toArray();\n       }\n+\n+      const detailedResults = await Promise.all(\n+        result.map(async (advisor) => {\n+          return await getAdvisorDetails(advisor._id);\n+        })\n+      );\n   \n       if (result) {\n         res.status(200).json(result);\n       } else {\n"
                }
            ],
            "date": 1715484952057,
            "name": "Commit-0",
            "content": "// pages/api/getAdvisorDetails.tsx\n\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\n// 环境变量中获取 MongoDB 的连接 URL\nconst MONGO_URL = process.env.MONGO_URL;\nconst DB_NAME = \"ConnectedAdvisor\";\n\nasync function connectToDatabase() {\n  const client = new MongoClient(MONGO_URL);\n  await client.connect();\n  const db = client.db(DB_NAME);\n  return { db, client };\n}\n\nasync function getAdvisorDetails(advisorId: string) {\n  const { db, client } = await connectToDatabase();\n\n  try {\n    const advisor = await db\n      .collection(\"AdvisorTable\")\n      .find({ _id: new ObjectId(advisorId) })\n      .toArray();\n    if (!advisor) {\n      return null;\n    }\n\n    const connectionIds = advisor[0].connections.map(\n      (id: string) => new ObjectId(id)\n    );\n    const connections = await db\n      .collection(\"connections\")\n      .find({\n        _id: { $in: connectionIds },\n      })\n      .toArray();\n\n    // 首先收集所有需要查询的relation ID和paper ID\n    const relationIds = [];\n    const paperIds = [];\n\n    for (const conn of connections) {\n      relationIds.push(...conn.relations.map((id) => new ObjectId(id)));\n      paperIds.push(\n        ...conn[\"collaborate-papers\"].map((paper) => new ObjectId(paper))\n      );\n    }\n\n    // 使用 $in 操作符一次性查询所有relations\n    const relations = await db\n      .collection(\"relations\")\n      .find({\n        _id: { $in: relationIds },\n      })\n      .toArray();\n\n    console.log(\"relations\", relations);\n\n    // 使用 $in 操作符一次性查询所有papers\n    const papers = await db\n      .collection(\"tmp-papers\")\n      .find({\n        _id: { $in: paperIds },\n      })\n      .toArray();\n\n    console.log(\"papers\", papers);\n\n    let finalConnections = [];\n\n    for (const conn of connections) {\n      const relationDetails = conn.relations.map((relId: string) => {\n        // 在已查询的关系数组中找到匹配的关系对象\n        const rel = relations.find((relation) => relation._id.equals(relId));\n        if (!rel) {\n          return null;\n        }\n        if (rel[\"id-1\"] === advisorId) {\n          return {\n            type: rel.type,\n            role: rel[\"role-1\"],\n            duration: rel.duration,\n          };\n        } else {\n          return {\n            type: rel.type,\n            role: rel[\"role-2\"],\n            duration: rel.duration,\n          };\n        }\n      });\n      const collaborateDetails = conn[\"collaborate-papers\"].map(\n        (paperId: string) => {\n          if (!paperId) {\n            return null;\n          }\n          const paper = papers.find((paper) => paper._id.equals(paperId));\n          return {\n            papername: paper?.name,\n            year: paper?.year,\n            url: paper?.url,\n          };\n        }\n      );\n\n      let connected_advisor_id;\n\n      if (conn[\"id-1\"] === advisorId) {\n        connected_advisor_id = conn[\"id-2\"];\n      } else {\n        connected_advisor_id = conn[\"id-1\"];\n      }\n\n      let tmp = {\n        _id: connected_advisor_id,\n        relations: relationDetails,\n        collaborations: collaborateDetails,\n        lastestCollaboration: Math.max(\n          ...collaborateDetails.map((collab: any) => collab.year)\n        )\n          ? Math.max(...collaborateDetails.map((collab: any) => collab.year))\n          : 2024, // TODO\n        relationFactor: 1,\n      };\n\n      if (tmp[\"lastestCollaboration\"] === -Infinity) {\n        tmp[\"lastestCollaboration\"] = 2024;\n      }\n\n      console.log(\"tmp\", tmp);\n\n      finalConnections.push(tmp);\n    }\n\n    let finalAdvisor = {\n      _id: advisor[0]._id,\n      name: advisor[0].name,\n      department: advisor[0].department,\n      tags: advisor[0].tags,\n      affiliation: advisor[0].affiliation,\n      position: advisor[0].position,\n      connections: finalConnections,\n      picture: advisor[0].picture,\n      twitter: advisor[0].contacts.twitter,\n      email: advisor[0].contacts.email,\n      homepage: advisor[0].homepage,\n      github: advisor[0].github,\n      description: advisor[0].descriptions,\n    };\n    return finalAdvisor;\n  } catch (error) {\n    console.error(\"Error fetching advisor details:\", error);\n    return null;\n  } finally {\n    client.close();\n  }\n}\n\nexport default async function handler(req, res) {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n  \n    if (req.method !== \"POST\") {\n      res.setHeader(\"Allow\", [\"POST\"]);\n      res.status(405).end(`Method ${req.method} Not Allowed`);\n      return;\n    }\n  \n    const { oid, name } = req.body;\n  \n    let query_text = name;\n    // console.log(\"oid\", oid);\n    // console.log(\"query_text\", query_text);\n  \n    if (!oid && !query_text) {\n      res.status(400).json({ message: \"Missing query parameters\" });\n      return;\n    }\n  \n    try {\n      const { db, client } = await connectToDatabase();\n  \n      let result;\n      if (oid) {\n        result = await db\n          .collection(COLLECTION_NAME)\n          .findOne({ _id: new ObjectId(oid) });\n      } else if (query_text) {\n        let words = query_text.split(/\\s+/); // 拆分输入的query_text为单词数组\n  \n        let regexPatterns = words.map((word) => `(?=.*${word})`);\n  \n        let regexQuery = new RegExp(regexPatterns.join(\"|\"), \"i\");\n  \n        result = await db\n          .collection(COLLECTION_NAME)\n          .find({\n            $or: [\n              { name: { $regex: regexQuery } },\n              { tags: { $regex: regexQuery } },\n              { position: { $regex: regexQuery } },\n              { affiliation: { $regex: regexQuery } },\n            ],\n          })\n          .toArray();\n      }\n  \n      if (result) {\n        res.status(200).json(result);\n      } else {\n        res.status(404).json({ message: \"No matching document found\" });\n      }\n  \n      client.close();\n    } catch (error) {\n      console.error(error);\n      res.status(500).json({ message: \"Internal Server Error\" });\n    }\n"
        }
    ]
}