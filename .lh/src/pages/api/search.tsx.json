{
    "sourceFile": "src/pages/api/search.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1708615858552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1708615913501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n-// pages/api/search.ts\n+// pages/api/search.tsx\n import type { NextApiRequest, NextApiResponse } from \"next\";\n-import client from \"../../lib/elasticsearch\"; // 引入你之前设置的 Elasticsearch 客户端实例\n+import client from \"../../lib/elasticSearch\"; // 引入你之前设置的 Elasticsearch 客户端实例\n \n export default async function handler(\n   req: NextApiRequest,\n   res: NextApiResponse\n@@ -14,8 +14,9 @@\n   }\n \n   try {\n     // 向 Elasticsearch 发送搜索请求\n+    // @ts-ignore\n     const { body } = await client.search({\n       index: \"your-index-name\", // 替换成你的索引名\n       body: {\n         query: {\n"
                },
                {
                    "date": 1708646181917,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,9 @@\n       body: {\n         query: {\n           multi_match: {\n             // 或者使用 match, term 或其他适合你数据的查询\n+            // @ts-ignore\n             query: query,\n             fields: [\"name\", \"description\"], // 根据你的数据结构调整\n           },\n         },\n"
                },
                {
                    "date": 1708705204892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+// pages/api/search.tsx\n+import type { NextApiRequest, NextApiResponse } from \"next\";\n+import client from \"../../lib/elasticSearch\"; // 引入你之前设置的 Elasticsearch 客户端实例\n+\n+export default async function handler(\n+  req: NextApiRequest,\n+  res: NextApiResponse\n+) {\n+  // 从请求中获取查询参数\n+  const { query } = req.query;\n+\n+  if (!query) {\n+    return res.status(400).json({ message: \"Query is required\" });\n+  }\n+\n+  try {\n+    // 向 Elasticsearch 发送搜索请求\n+    // @ts-ignore\n+    const { body } = await client.search({\n+      index: \"your-index-name\", // 替换成你的索引名\n+      body: {\n+        query: {\n+          multi_match: {\n+            // 或者使用 match, term 或其他适合你数据的查询\n+            // @ts-ignore\n+            query: query,\n+            fields: [\"name\", \"description\"], // 根据你的数据结构调整\n+          },\n+        },\n+      },\n+    });\n+\n+    // 返回搜索结果\n+    res.status(200).json(body.hits.hits);\n+  } catch (error) {\n+    console.error(\"Search error:\", error);\n+    res.status(500).json({ message: \"Error executing search\" });\n+  }\n+}\n"
                },
                {
                    "date": 1711691133385,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,39 +1,44 @@\n-// pages/api/search.tsx\n import type { NextApiRequest, NextApiResponse } from \"next\";\n-import client from \"../../lib/elasticSearch\"; // 引入你之前设置的 Elasticsearch 客户端实例\n+import { MongoClient, ObjectId } from \"mongodb\";\n \n-export default async function handler(\n-  req: NextApiRequest,\n-  res: NextApiResponse\n-) {\n-  // 从请求中获取查询参数\n-  const { query } = req.query;\n+// MongoDB URL and database name\n+const MONGO_URL = process.env.MONGO_URL;\n+const DB_NAME = \"ConnectedAdvisors\";\n+const COLLECTION_NAME = \"AdvisorTable\";\n \n-  if (!query) {\n-    return res.status(400).json({ message: \"Query is required\" });\n-  }\n+async function connectToDatabase() {\n+    const client = new MongoClient(MONGO_URL);\n+    await client.connect();\n+    const db = client.db(DB_NAME);\n+    return { db, client };\n+}\n \n-  try {\n-    // 向 Elasticsearch 发送搜索请求\n-    // @ts-ignore\n-    const { body } = await client.search({\n-      index: \"your-index-name\", // 替换成你的索引名\n-      body: {\n-        query: {\n-          multi_match: {\n-            // 或者使用 match, term 或其他适合你数据的查询\n-            // @ts-ignore\n-            query: query,\n-            fields: [\"name\", \"description\"], // 根据你的数据结构调整\n-          },\n-        },\n-      },\n-    });\n+export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n+    const { query: { oid, name } } = req;\n \n-    // 返回搜索结果\n-    res.status(200).json(body.hits.hits);\n-  } catch (error) {\n-    console.error(\"Search error:\", error);\n-    res.status(500).json({ message: \"Error executing search\" });\n-  }\n+    if (!oid && !name) {\n+        res.status(400).json({ message: 'Missing query parameters' });\n+        return;\n+    }\n+\n+    try {\n+        const { db, client } = await connectToDatabase();\n+        let result;\n+\n+        if (oid) {\n+            result = await db.collection(\"yourCollectionName\").findOne({ _id: new ObjectId(oid) });\n+        } else if (name) {\n+            result = await db.collection(\"yourCollectionName\").findOne({ name: name });\n+        }\n+\n+        if (result) {\n+            res.status(200).json(result);\n+        } else {\n+            res.status(404).json({ message: 'No matching document found' });\n+        }\n+        \n+        client.close();\n+    } catch (error) {\n+        res.status(500).json({ message: error.message });\n+    }\n }\n"
                },
                {
                    "date": 1711691153591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,13 +39,13 @@\n     let result;\n \n     if (oid) {\n       result = await db\n-        .collection(\"yourCollectionName\")\n+        .collection(COLLECTION_NAME)\n         .findOne({ _id: new ObjectId(oid) });\n     } else if (name) {\n       result = await db\n-        .collection(\"yourCollectionName\")\n+        .collection(COLLECTION_NAME)\n         .findOne({ name: name });\n     }\n \n     if (result) {\n"
                },
                {
                    "date": 1711691474173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n /*\n  * @Author: huskydoge hbh001098hbh@sjtu.edu.cn\n  * @Date: 2024-02-22 23:30:57\n  * @LastEditors: huskydoge hbh001098hbh@sjtu.edu.cn\n- * @LastEditTime: 2024-03-29 13:45:33\n+ * @LastEditTime: 2024-03-29 13:51:14\n  * @FilePath: /connected-advisor/src/pages/api/search.tsx\n  * @Description: 这是默认设置,请设置`customMade`, 打开koroFileHeader查看配置 进行设置: https://github.com/OBKoro1/koro1FileHeader/wiki/%E9%85%8D%E7%BD%AE\n  */\n import type { NextApiRequest, NextApiResponse } from \"next\";\n@@ -20,40 +20,39 @@\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n \n-export default async function handler(\n-  req: NextApiRequest,\n-  res: NextApiResponse\n-) {\n-  const {\n-    query: { oid, name },\n-  } = req;\n+export default async function handler(req: NextApiRequest, res: NextApiResponse) {\n+  if (req.method !== 'POST') {\n+      res.setHeader('Allow', ['POST']);\n+      res.status(405).end(`Method ${req.method} Not Allowed`);\n+      return;\n+  }\n \n+  const { oid, name } = req.body;\n+\n   if (!oid && !name) {\n-    res.status(400).json({ message: \"Missing query parameters\" });\n-    return;\n+      res.status(400).json({ message: 'Missing query parameters' });\n+      return;\n   }\n \n   try {\n-    const { db, client } = await connectToDatabase();\n-    let result;\n+      const { db, client } = await connectToDatabase();\n+      let result;\n \n-    if (oid) {\n-      result = await db\n-        .collection(COLLECTION_NAME)\n-        .findOne({ _id: new ObjectId(oid) });\n-    } else if (name) {\n-      result = await db.collection(COLLECTION_NAME).findOne({ name: name });\n-    }\n+      if (oid) {\n+          result = await db.collection(COLLECTION_NAME).findOne({ _id: new ObjectId(oid) });\n+      } else if (name) {\n+          result = await db.collection(COLLECTION_NAME).findOne({ name: name });\n+      }\n \n-    if (result) {\n-      res.status(200).json(result);\n-    } else {\n-      res.status(404).json({ message: \"No matching document found\" });\n-    }\n-\n-    client.close();\n+      if (result) {\n+          res.status(200).json(result);\n+      } else {\n+          res.status(404).json({ message: 'No matching document found' });\n+      }\n+      \n+      client.close();\n   } catch (error) {\n-    res.status(500).json({ message: error.message });\n+      res.status(500).json({ message: error.message });\n   }\n-}\n+}\n\\ No newline at end of file\n"
                }
            ],
            "date": 1708615858552,
            "name": "Commit-0",
            "content": "// pages/api/search.ts\nimport type { NextApiRequest, NextApiResponse } from \"next\";\nimport client from \"../../lib/elasticsearch\"; // 引入你之前设置的 Elasticsearch 客户端实例\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  // 从请求中获取查询参数\n  const { query } = req.query;\n\n  if (!query) {\n    return res.status(400).json({ message: \"Query is required\" });\n  }\n\n  try {\n    // 向 Elasticsearch 发送搜索请求\n    const { body } = await client.search({\n      index: \"your-index-name\", // 替换成你的索引名\n      body: {\n        query: {\n          multi_match: {\n            // 或者使用 match, term 或其他适合你数据的查询\n            query: query,\n            fields: [\"name\", \"description\"], // 根据你的数据结构调整\n          },\n        },\n      },\n    });\n\n    // 返回搜索结果\n    res.status(200).json(body.hits.hits);\n  } catch (error) {\n    console.error(\"Search error:\", error);\n    res.status(500).json({ message: \"Error executing search\" });\n  }\n}\n"
        }
    ]
}