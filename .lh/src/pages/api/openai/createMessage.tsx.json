{
    "sourceFile": "src/pages/api/openai/createMessage.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1715430693025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1715436526696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,31 +1,31 @@\n-import { NextApiRequest, NextApiResponse } from 'next'\n+import { NextApiRequest, NextApiResponse } from \"next\";\n \n export default async function createMessage(\n   req: NextApiRequest,\n   res: NextApiResponse\n ) {\n-  const { messages } = req.body\n-  const apiKey = process.env.OPENAI_API_KEY\n-  const url = 'https://api.openai.com/v1/chat/completions'\n+  const { messages } = req.body;\n+  const apiKey = process.env.OPENAI_API_KEY;\n+  const url = \"https://api.openai.com/v1/chat/completions\";\n \n   const body = JSON.stringify({\n     messages,\n-    model: 'gpt-3.5-turbo',\n+    model: \"gpt-3.5-turbo\",\n     stream: false,\n-  })\n+  });\n \n   try {\n     const response = await fetch(url, {\n-      method: 'POST',\n+      method: \"POST\",\n       headers: {\n-        'Content-Type': 'application/json',\n+        \"Content-Type\": \"application/json\",\n         Authorization: `Bearer ${apiKey}`,\n       },\n\\ No newline at end of file\n       body,\n-    })\n-    const data = await response.json()\n-    res.status(200).json({ data })\n+    });\n+    const data = await response.json();\n+    res.status(200).json({ data });\n   } catch (error) {\n-    res.status(500).json({ error: error.message })\n+    res.status(500).json({ error: error.message });\n   }\n-}\n+}\n"
                },
                {
                    "date": 1715478974355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   const body = JSON.stringify({\n     messages,\n     model: \"gpt-3.5-turbo\",\n     stream: false,\n+    tool_choice: \"auto\", // auto is default, but we'll be explicit\n   });\n \n   try {\n     const response = await fetch(url, {\n"
                },
                {
                    "date": 1715480067110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n   const body = JSON.stringify({\n     messages,\n     model: \"gpt-3.5-turbo\",\n     stream: false,\n-    tool_choice: \"auto\", // auto is default, but we'll be explicit\n   });\n \n   try {\n     const response = await fetch(url, {\n@@ -28,5 +27,5 @@\n     res.status(200).json({ data });\n   } catch (error) {\n     res.status(500).json({ error: error.message });\n   }\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1715480075710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n   const url = \"https://api.openai.com/v1/chat/completions\";\n \n   const body = JSON.stringify({\n     messages,\n-    model: \"gpt-3.5-turbo\",\n+    model: \"gpt-4-0125-preview\",\n     stream: false,\n   });\n \n   try {\n"
                },
                {
                    "date": 1715480227652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,16 +3,17 @@\n export default async function createMessage(\n   req: NextApiRequest,\n   res: NextApiResponse\n ) {\n-  const { messages } = req.body;\n+  const { messages, tools } = req.body;\n   const apiKey = process.env.OPENAI_API_KEY;\n   const url = \"https://api.openai.com/v1/chat/completions\";\n \n   const body = JSON.stringify({\n     messages,\n     model: \"gpt-4-0125-preview\",\n     stream: false,\n+    tool: \n   });\n \n   try {\n     const response = await fetch(url, {\n"
                },
                {
                    "date": 1715480236149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,10 @@\n   const body = JSON.stringify({\n     messages,\n     model: \"gpt-4-0125-preview\",\n     stream: false,\n-    tool: \n+    tool: tools,\n+    tool_choice: \"auto\"\n   });\n \n   try {\n     const response = await fetch(url, {\n"
                },
                {
                    "date": 1715480251255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n   const body = JSON.stringify({\n     messages,\n     model: \"gpt-4-0125-preview\",\n     stream: false,\n-    tool: tools,\n     tool_choice: \"auto\",\n   });\n \n   try {\n"
                },
                {
                    "date": 1715480265128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n   req: NextApiRequest,\n   res: NextApiResponse\n ) {\n   const { messages, tools } = req.body;\n+  console.log(\"createMessage\", messages, tools);\n   const apiKey = process.env.OPENAI_API_KEY;\n   const url = \"https://api.openai.com/v1/chat/completions\";\n \n   const body = JSON.stringify({\n"
                }
            ],
            "date": 1715430693025,
            "name": "Commit-0",
            "content": "import { NextApiRequest, NextApiResponse } from 'next'\n\nexport default async function createMessage(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  const { messages } = req.body\n  const apiKey = process.env.OPENAI_API_KEY\n  const url = 'https://api.openai.com/v1/chat/completions'\n\n  const body = JSON.stringify({\n    messages,\n    model: 'gpt-3.5-turbo',\n    stream: false,\n  })\n\n  try {\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${apiKey}`,\n      },\n      body,\n    })\n    const data = await response.json()\n    res.status(200).json({ data })\n  } catch (error) {\n    res.status(500).json({ error: error.message })\n  }\n}"
        }
    ]
}