{
    "sourceFile": "src/pages/api/searchConnectionByList.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1711857823549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713926724358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import { MongoClient, ObjectId } from \"mongodb\";\n \n-const MONGO_URL = process.env.MONGO_URL;\n+const MONGO_URL = process.env.MONGO_URL || \"\";\n const DB_NAME = \"ConnectedAdvisor\";\n const COLLECTION_NAME = \"connections\";\n \n async function connectToDatabase() {\n"
                }
            ],
            "date": 1711857823549,
            "name": "Commit-0",
            "content": "import { MongoClient, ObjectId } from \"mongodb\";\n\nconst MONGO_URL = process.env.MONGO_URL;\nconst DB_NAME = \"ConnectedAdvisor\";\nconst COLLECTION_NAME = \"connections\";\n\nasync function connectToDatabase() {\n    const client = new MongoClient(MONGO_URL);\n    await client.connect();\n    const db = client.db(DB_NAME);\n    return { db, client };\n}\n\nexport default async function handler(req, res) {\n    res.setHeader(\"Access-Control-Allow-Origin\", \"*\");\n    res.setHeader(\"Access-Control-Allow-Methods\", \"POST, GET, OPTIONS\");\n    res.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\");\n\n    if (req.method !== \"POST\") {\n        res.setHeader(\"Allow\", [\"POST\"]);\n        res.status(405).end(`Method ${req.method} Not Allowed`);\n        return;\n    }\n\n    const ids = req.body.ids;\n\n    if (!ids || !Array.isArray(ids) || ids.length === 0) {\n        res.status(400).json({ message: \"Missing or invalid parameters\" });\n        return;\n    }\n\n    try {\n        const { db, client } = await connectToDatabase();\n        \n        const objectIds = ids.map(id => new ObjectId(id));\n        const results = await db.collection(COLLECTION_NAME).find({ _id: { $in: objectIds } }).toArray();\n\n        if (results.length > 0) {\n            res.status(200).json(results);\n        } else {\n            res.status(404).json({ message: \"No matching connections found\" });\n        }\n\n        client.close();\n    } catch (error) {\n        console.error(error);\n        res.status(500).json({ message: \"Internal Server Error\" });\n    }\n}\n"
        }
    ]
}