{
    "sourceFile": "src/pages/api/updateAdvisor.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1711814650399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1716435580377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n // MongoDB URL and database name\n const MONGO_URL = process.env.MONGO_URL;\n const DB_NAME = \"ConnectedAdvisor\";\n-const COLLECTION_NAME = \"AdvisorTable\";\n+const COLLECTION_NAME = \"advisors\";\n \n // Function to connect to the database\n async function connectToDatabase() {\n   const client = new MongoClient(MONGO_URL);\n"
                }
            ],
            "date": 1711814650399,
            "name": "Commit-0",
            "content": "import type { NextApiRequest, NextApiResponse } from \"next\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\n// MongoDB URL and database name\nconst MONGO_URL = process.env.MONGO_URL;\nconst DB_NAME = \"ConnectedAdvisor\";\nconst COLLECTION_NAME = \"AdvisorTable\";\n\n// Function to connect to the database\nasync function connectToDatabase() {\n  const client = new MongoClient(MONGO_URL);\n  await client.connect();\n  return client.db(DB_NAME);\n}\n\n// API handler function to update advisor information\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  console.log(\"Received request:\", req.method, req.body);\n  if (req.method === \"PUT\") { // Ensure the request method is PUT for updating\n    try {\n      const db = await connectToDatabase();\n      console.log(\"Database connected\");\n      const collection = db.collection(COLLECTION_NAME);\n\n      // Extract _id from request body and convert it to ObjectId\n      const { _id, ...updateData } = req.body;\n      if (!_id) {\n        res.status(400).json({ error: \"Missing _id in request body\" });\n        return;\n      }\n\n      // Perform the update operation\n      const result = await collection.updateOne(\n        { _id: new ObjectId(_id) },\n        { $set: updateData }\n      );\n\n      if (result.modifiedCount === 0) {\n        res.status(404).json({ message: \"No matching document found to update\" });\n      } else {\n        console.log(\"Document updated\", result);\n        res.status(200).json(result);\n      }\n    } catch (error) {\n      console.error(\"Error occurred:\", error);\n      res.status(500).json({ error: \"Internal Server Error\" });\n    }\n  } else {\n    res.setHeader(\"Allow\", [\"PUT\"]);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n  }\n}\n"
        }
    ]
}