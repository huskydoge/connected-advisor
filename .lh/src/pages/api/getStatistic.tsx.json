{
    "sourceFile": "src/pages/api/getStatistic.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1713959251880,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1713959269178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n \n-async function getAdvisorDetails(advisorId: string) {\n+async function getStatistic(advisorId: string) {\n   const { db, client } = await connectToDatabase();\n \n   try {\n     const advisor = await db\n"
                },
                {
                    "date": 1713959277958,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,13 +3,13 @@\n import { NextApiRequest, NextApiResponse } from \"next\";\n import { MongoClient, ObjectId } from \"mongodb\";\n \n // 环境变量中获取 MongoDB 的连接 URL\n-const MONGO_URL = process.env.MONGO_URL;\n+const MONGO_URL = process.env.MONGO_URL || \"\";\n const DB_NAME = \"ConnectedAdvisor\";\n \n async function connectToDatabase() {\n-  const client = new MongoClient(MONGO_URL) || \"\";\n+  const client = new MongoClient(MONGO_URL) ;\n   await client.connect();\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n"
                },
                {
                    "date": 1713959298094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,9 +173,9 @@\n     res.status(400).json({ error: \"Advisor ID is required\" });\n     return;\n   }\n \n-  const advisorDetails = await getAdvisorDetails(_id);\n+  const statistics = await getStatistic(_id);\n   if (advisorDetails) {\n     res.status(200).json(advisorDetails);\n   } else {\n     res.status(404).json({ error: \"Advisor not found\" });\n"
                },
                {
                    "date": 1713959304370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,10 +174,10 @@\n     return;\n   }\n \n   const statistics = await getStatistic(_id);\n-  if (advisorDetails) {\n-    res.status(200).json(advisorDetails);\n+  if (statistics) {\n+    res.status(200).json(statistics);\n   } else {\n     res.status(404).json({ error: \"Advisor not found\" });\n   }\n }\n"
                },
                {
                    "date": 1713961471676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n-// pages/api/getAdvisorDetails.tsx\n+// pages/api/statistics.tsx\n \n import { NextApiRequest, NextApiResponse } from \"next\";\n-import { MongoClient, ObjectId } from \"mongodb\";\n+import { MongoClient } from \"mongodb\";\n \n // 环境变量中获取 MongoDB 的连接 URL\n const MONGO_URL = process.env.MONGO_URL || \"\";\n const DB_NAME = \"ConnectedAdvisor\";\n@@ -13,145 +13,42 @@\n   const db = client.db(DB_NAME);\n   return { db, client };\n }\n \n-async function getStatistic(advisorId: string) {\n+async function getStatistics() {\n   const { db, client } = await connectToDatabase();\n \n   try {\n-    const advisor = await db\n-      .collection(\"AdvisorTable\")\n-      .find({ _id: new ObjectId(advisorId) })\n-      .toArray();\n-    if (!advisor) {\n-      return null;\n-    }\n+    const advisors = await db.collection(\"AdvisorTable\").find().toArray();\n \n-    const connectionIds = advisor[0].connections.map(\n-      (id: string) => new ObjectId(id)\n-    );\n-    const connections = await db\n-      .collection(\"connections\")\n-      .find({\n-        _id: { $in: connectionIds },\n-      })\n-      .toArray();\n+    const affiliationCounts = {};\n+    const positionCounts = {};\n+    const tagCounts = {};\n \n-    // 首先收集所有需要查询的relation ID和paper ID\n-    const relationIds = [];\n-    const paperIds = [];\n+    advisors.forEach((advisor) => {\n+      const { affiliation, position, tags } = advisor;\n \n-    for (const conn of connections) {\n-      relationIds.push(...conn.relations.map((id) => new ObjectId(id)));\n-      paperIds.push(\n-        ...conn[\"collaborate-papers\"].map((paper) => new ObjectId(paper))\n-      );\n-    }\n+      // Count affiliations\n+      if (affiliation) {\n+        affiliationCounts[affiliation] = (affiliationCounts[affiliation] || 0) + 1;\n+      }\n \n-    // 使用 $in 操作符一次性查询所有relations\n-    const relations = await db\n-      .collection(\"relations\")\n-      .find({\n-        _id: { $in: relationIds },\n-      })\n-      .toArray();\n-\n-    console.log(\"relations\", relations);\n-\n-    // 使用 $in 操作符一次性查询所有papers\n-    const papers = await db\n-      .collection(\"tmp-papers\")\n-      .find({\n-        _id: { $in: paperIds },\n-      })\n-      .toArray();\n-\n-    console.log(\"papers\", papers);\n-\n-    let finalConnections = [];\n-\n-    for (const conn of connections) {\n-      const relationDetails = conn.relations.map((relId: string) => {\n-        // 在已查询的关系数组中找到匹配的关系对象\n-        const rel = relations.find((relation) => relation._id.equals(relId));\n-        if (!rel) {\n-          return null;\n-        }\n-        if (rel[\"id-1\"] === advisorId) {\n-          return {\n-            type: rel.type,\n-            role: rel[\"role-1\"],\n-            duration: rel.duration,\n-          };\n-        } else {\n-          return {\n-            type: rel.type,\n-            role: rel[\"role-2\"],\n-            duration: rel.duration,\n-          };\n-        }\n-      });\n-      const collaborateDetails = conn[\"collaborate-papers\"].map(\n-        (paperId: string) => {\n-          if (!paperId) {\n-            return null;\n-          }\n-          const paper = papers.find((paper) => paper._id.equals(paperId));\n-          return {\n-            papername: paper?.name,\n-            year: paper?.year,\n-            url: paper?.url,\n-          };\n-        }\n-      );\n-\n-      let connected_advisor_id;\n-\n-      if (conn[\"id-1\"] === advisorId) {\n-        connected_advisor_id = conn[\"id-2\"];\n-      } else {\n-        connected_advisor_id = conn[\"id-1\"];\n+      // Count positions\n+      if (position) {\n+        positionCounts[position] = (positionCounts[position] || 0) + 1;\n       }\n \n-      let tmp = {\n-        _id: connected_advisor_id,\n-        relations: relationDetails,\n-        collaborations: collaborateDetails,\n-        lastestCollaboration: Math.max(\n-          ...collaborateDetails.map((collab: any) => collab.year)\n-        )\n-          ? Math.max(...collaborateDetails.map((collab: any) => collab.year))\n-          : 2024, // TODO\n-        relationFactor: 1,\n-      };\n-\n-      if (tmp[\"lastestCollaboration\"] === -Infinity) {\n-        tmp[\"lastestCollaboration\"] = 2024;\n+      // Count tags\n+      if (tags && Array.isArray(tags)) {\n+        tags.forEach((tag) => {\n+          tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n+        });\n       }\n+    });\n \n-      console.log(\"tmp\", tmp);\n-\n-      finalConnections.push(tmp);\n-    }\n-\n-    let finalAdvisor = {\n-      _id: advisor[0]._id,\n-      name: advisor[0].name,\n-      department: advisor[0].department,\n-      tags: advisor[0].tags,\n-      affiliation: advisor[0].affiliation,\n-      position: advisor[0].position,\n-      connections: finalConnections,\n-      picture: advisor[0].picture,\n-      twitter: advisor[0].contacts.twitter,\n-      email: advisor[0].contacts.email,\n-      homepage: advisor[0].homepage,\n-      github: advisor[0].contacts.github,\n-      description: advisor[0].descriptions,\n-    };\n-    return finalAdvisor;\n+    return { affiliationCounts, positionCounts, tagCounts };\n   } catch (error) {\n-    console.error(\"Error fetching advisor details:\", error);\n+    console.error(\"Error fetching statistics:\", error);\n     return null;\n   } finally {\n     client.close();\n   }\n@@ -160,24 +57,17 @@\n export default async function handler(\n   req: NextApiRequest,\n   res: NextApiResponse\n ) {\n-  if (req.method !== \"POST\") {\n-    res.setHeader(\"Allow\", [\"POST\"]);\n+  if (req.method !== \"GET\") {\n+    res.setHeader(\"Allow\", [\"GET\"]);\n     res.status(405).end(`Method ${req.method} Not Allowed`);\n     return;\n   }\n \n-  const { _id } = req.body;\n-  console.log(\"_id\", _id);\n-  if (!_id) {\n-    res.status(400).json({ error: \"Advisor ID is required\" });\n-    return;\n-  }\n-\n-  const statistics = await getStatistic(_id);\n+  const statistics = await getStatistics();\n   if (statistics) {\n     res.status(200).json(statistics);\n   } else {\n-    res.status(404).json({ error: \"Advisor not found\" });\n+    res.status(500).json({ error: \"Failed to fetch statistics\" });\n   }\n }\n"
                },
                {
                    "date": 1713961512462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     const positionCounts = {};\n     const tagCounts = {};\n \n     advisors.forEach((advisor) => {\n-      const { affiliation, position, tags } = advisor;\n+      const { affiliation, position, tags, ... } = advisor;\n \n       // Count affiliations\n       if (affiliation) {\n         affiliationCounts[affiliation] =\n"
                },
                {
                    "date": 1713961525455,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,9 @@\n     const tagCounts = {};\n \n     advisors.forEach((advisor) => {\n       const { affiliation, position, tags } = advisor;\n+      affiliation = advisor.affiliation\n \n       // Count affiliations\n       if (affiliation) {\n         affiliationCounts[affiliation] =\n"
                }
            ],
            "date": 1713959251880,
            "name": "Commit-0",
            "content": "// pages/api/getAdvisorDetails.tsx\n\nimport { NextApiRequest, NextApiResponse } from \"next\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\n// 环境变量中获取 MongoDB 的连接 URL\nconst MONGO_URL = process.env.MONGO_URL;\nconst DB_NAME = \"ConnectedAdvisor\";\n\nasync function connectToDatabase() {\n  const client = new MongoClient(MONGO_URL) || \"\";\n  await client.connect();\n  const db = client.db(DB_NAME);\n  return { db, client };\n}\n\nasync function getAdvisorDetails(advisorId: string) {\n  const { db, client } = await connectToDatabase();\n\n  try {\n    const advisor = await db\n      .collection(\"AdvisorTable\")\n      .find({ _id: new ObjectId(advisorId) })\n      .toArray();\n    if (!advisor) {\n      return null;\n    }\n\n    const connectionIds = advisor[0].connections.map(\n      (id: string) => new ObjectId(id)\n    );\n    const connections = await db\n      .collection(\"connections\")\n      .find({\n        _id: { $in: connectionIds },\n      })\n      .toArray();\n\n    // 首先收集所有需要查询的relation ID和paper ID\n    const relationIds = [];\n    const paperIds = [];\n\n    for (const conn of connections) {\n      relationIds.push(...conn.relations.map((id) => new ObjectId(id)));\n      paperIds.push(\n        ...conn[\"collaborate-papers\"].map((paper) => new ObjectId(paper))\n      );\n    }\n\n    // 使用 $in 操作符一次性查询所有relations\n    const relations = await db\n      .collection(\"relations\")\n      .find({\n        _id: { $in: relationIds },\n      })\n      .toArray();\n\n    console.log(\"relations\", relations);\n\n    // 使用 $in 操作符一次性查询所有papers\n    const papers = await db\n      .collection(\"tmp-papers\")\n      .find({\n        _id: { $in: paperIds },\n      })\n      .toArray();\n\n    console.log(\"papers\", papers);\n\n    let finalConnections = [];\n\n    for (const conn of connections) {\n      const relationDetails = conn.relations.map((relId: string) => {\n        // 在已查询的关系数组中找到匹配的关系对象\n        const rel = relations.find((relation) => relation._id.equals(relId));\n        if (!rel) {\n          return null;\n        }\n        if (rel[\"id-1\"] === advisorId) {\n          return {\n            type: rel.type,\n            role: rel[\"role-1\"],\n            duration: rel.duration,\n          };\n        } else {\n          return {\n            type: rel.type,\n            role: rel[\"role-2\"],\n            duration: rel.duration,\n          };\n        }\n      });\n      const collaborateDetails = conn[\"collaborate-papers\"].map(\n        (paperId: string) => {\n          if (!paperId) {\n            return null;\n          }\n          const paper = papers.find((paper) => paper._id.equals(paperId));\n          return {\n            papername: paper?.name,\n            year: paper?.year,\n            url: paper?.url,\n          };\n        }\n      );\n\n      let connected_advisor_id;\n\n      if (conn[\"id-1\"] === advisorId) {\n        connected_advisor_id = conn[\"id-2\"];\n      } else {\n        connected_advisor_id = conn[\"id-1\"];\n      }\n\n      let tmp = {\n        _id: connected_advisor_id,\n        relations: relationDetails,\n        collaborations: collaborateDetails,\n        lastestCollaboration: Math.max(\n          ...collaborateDetails.map((collab: any) => collab.year)\n        )\n          ? Math.max(...collaborateDetails.map((collab: any) => collab.year))\n          : 2024, // TODO\n        relationFactor: 1,\n      };\n\n      if (tmp[\"lastestCollaboration\"] === -Infinity) {\n        tmp[\"lastestCollaboration\"] = 2024;\n      }\n\n      console.log(\"tmp\", tmp);\n\n      finalConnections.push(tmp);\n    }\n\n    let finalAdvisor = {\n      _id: advisor[0]._id,\n      name: advisor[0].name,\n      department: advisor[0].department,\n      tags: advisor[0].tags,\n      affiliation: advisor[0].affiliation,\n      position: advisor[0].position,\n      connections: finalConnections,\n      picture: advisor[0].picture,\n      twitter: advisor[0].contacts.twitter,\n      email: advisor[0].contacts.email,\n      homepage: advisor[0].homepage,\n      github: advisor[0].contacts.github,\n      description: advisor[0].descriptions,\n    };\n    return finalAdvisor;\n  } catch (error) {\n    console.error(\"Error fetching advisor details:\", error);\n    return null;\n  } finally {\n    client.close();\n  }\n}\n\nexport default async function handler(\n  req: NextApiRequest,\n  res: NextApiResponse\n) {\n  if (req.method !== \"POST\") {\n    res.setHeader(\"Allow\", [\"POST\"]);\n    res.status(405).end(`Method ${req.method} Not Allowed`);\n    return;\n  }\n\n  const { _id } = req.body;\n  console.log(\"_id\", _id);\n  if (!_id) {\n    res.status(400).json({ error: \"Advisor ID is required\" });\n    return;\n  }\n\n  const advisorDetails = await getAdvisorDetails(_id);\n  if (advisorDetails) {\n    res.status(200).json(advisorDetails);\n  } else {\n    res.status(404).json({ error: \"Advisor not found\" });\n  }\n}\n"
        }
    ]
}