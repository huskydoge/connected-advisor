{
    "sourceFile": "node_modules/aframe/docs/introduction/hosting-and-publishing.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713791839834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713791839834,
            "name": "Commit-0",
            "content": "---\ntitle: \"Hosting & Publishing\"\ntype: introduction\nlayout: docs\nparent_section: introduction\norder: 12\n---\n\nThis section will show several ways to deploy, host, and publish an A-Frame\nsite and its assets onto the Web for the world to see.\n\n<!--toc-->\n\n## Publishing a Site\n\nThere are many free services to deploy and host a site. We'll go over some of\nthe more easy or popular options, but there are certainly other options such\nas AWS, Heroku, or self-hosting. An important note is that these sites should\nbe served with SSL/HTTPS due to a common security restriction of the browser's\nWebVR API. All the options below serve with SSL/HTTPS.\n\n### Glitch\n\n![Glitch](https://cloud.githubusercontent.com/assets/674727/25643449/b5ee2542-2f54-11e7-9d45-22f3aa0b208f.jpg)\n\n*\"Glitch is the friendly community where you'll build the app of your dreams\nWith working example apps to remix, a code editor to modify them, instant\nhosting and deployment - anybody can build a web app on Glitch, for free.\"*\n\n[Glitch](https://glitch.com) is the easiest and fastest way to create and\npublish a site from within the browser. Glitch lets us add code and files,\nupload assets, edit with other people, define our own URL name, and instantly\ndeploy changes on every change. We don't even need to make an account nor\nlogin:\n\n1. Try going to the [A-Frame Starter Glitch](https://glitch.com/~aframe/).\n2. Hit **Remix your own** to copy the project.\n3. Click the *Project info and options* icon on the top-left to rename our\napplication (e.g., `https://yoursitename.glitch.me`).\n4. Edit the HTML, add files, modify the project.\n5. Click **Show** to view the application (e.g., the starter glitch is hosted at `https://aframe.glitch.me`).\n6. Every change to the project will update the application instantly. This can\nbe toggled off by signing in, clicking your user avatar, and toggling **Refresh\nApp on Changes**.\n\n### Neocities\n\n![Neocities](https://cloud.githubusercontent.com/assets/674727/25643397/6db47790-2f54-11e7-9eb3-ac18a1513e9f.jpg)\n\n*\"Create your own free homepage.  Unlimited creativity, zero ads.  Neocities is\na social network of 129,100 web sites that are bringing back the lost\nindividual creativity of the web. We offer free web hosting and tools that\nallow you to create your own web site. Join us!\"*\n\n[Neocities](https://neocities.org) is also another free and easy way to create\nand publish a site from within the browser. While it doesn't have some of the\nfeatures of Glitch, Neocities is friendly and lets us upload assets into the\nproject directory versus a CDN.  This makes Neocities at least better at\nhosting models. With Neocities, we can create and edit files. They'll then be\nhosted and published for us (e.g., `ngokevin.neocities.org`):\n\n![Neocities Editor](https://cloud.githubusercontent.com/assets/674727/25643399/704cffe0-2f54-11e7-8d32-868b51407f81.jpg)\n\n## Hosting Assets\n\nWe'll also go over hosting assets such as audio, textures, models, and video.\n\nIf the A-Frame site is being published alongside its assets in the same\ndirectory (i.e., the same domain), then we don't need to worry much about\nhosting assets. The A-Frame site can use relative URLs to reference the asset,\nand since they're on the same domain, there is no issue with fetching that\nasset. For example, if we have all your resources in the same root directory\nand we publish everything via Neocities, GitHub Pages, or Surge, there will be\nno issues.\n\n## Content Delivery Network (CDN)\n\nIf we're hosting assets externally, like on a CDN, then we need to take in\nconsiderations .The primary requirement for assets is that they be served with\n[cross-origin resource sharing\n(CORS)](https://developer.mozilla.org/docs/Web/HTTP/Access_control_CORS)\nenabled. This allows the A-Frame site to fetch the asset to display in the\nscene. Plus, if we're using `<a-assets>`, we should usually set\n`crossorigin=\"anonymous\"` on assets such as `<img>`, `<audio>`, and `<video>`.\n\nThere are several simple options to host assets via a CDN:\n\n- [Glitch Asset Uploader](https://glitch.com/) - The Glitch code editor has a\n  panel to upload assets and get CDN URLs in return.\n- [imgur](https://imgur.com/) - For images, we could use imgur, a popular image\n  hosting service.\n\n### Hosting Models\n\nHosting models is not as simple. Models usually come as groups of files in a\nfolder, where the model file relatively references other files such as images.\nThus, models have to be uploaded as a single folder in the same directory. Many\nof the free asset hosting services support only uploading one file a time. One\nsolution would be to rename all of the image paths to the CDN paths after the\nimages are individually uploaded, but that is tedious. There are a couple known\nsolutions for easily hosting models via CDN:\n\nIf publishing a site via Neocities, we can upload any number of files and\ndirectories into the site directory:\n\n![Neocities](https://cloud.githubusercontent.com/assets/674727/25639880/713c8266-2f42-11e7-9f2a-8e552bda80fa.jpg)\n\n*Neocities Asset Uploader*\n\n[jsdelivr]: https://www.jsdelivr.com/?docs=gh\n\nOr we can upload assets to a GitHub repository, and use GitHub to serve the\nmodel files.\n\n1. Go to one of our GitHub repositories.\n2. Click **Upload files**.\n3. Upload our assets and wait for the upload to finish.\n4. Type a quick message at the bottom and hit **Commit changes**.\n5. Wait for processing.\n6. Once finished, click on the primary asset file.\n7. Click on **Raw**.\n8. Then we have our asset URL hosted on GitHub. Then the asset can be\nhosted and referenced via [JSDelivr CDN][jsdelivr].\n\nBelow is a video of the workflow:\n\n<div style=\"position:relative;height:0;padding-bottom:56.25%\"><iframe src=\"https://www.youtube.com/embed/_D_C_oSKp9Y?ecver=2\" width=\"640\" height=\"360\" frameborder=\"0\" style=\"position:absolute;width:100%;height:100%;left:0\" allowfullscreen></iframe></div>\n\nThough ee can also host the model the same as we serve all of our other assets,\nand let the server and CDN handle it. If we want a special place to host them,\nS3 is another option.\n\n## Sharing Our Project\n\nOnce we've published our awesome project, we'll want to share it so other\npeople dive inside!\n\n### Creating Media\n\n[gifpardy]: https://github.com/ngokevin/gifpardy\n[obs]: https://obsproject.com/\n\nA-Frame and VR are very visual; we'll want to create videos and GIFs of our\nproject.\n\nFirst, we want to record the screen. On OS X, record the screen using built-in\nQuickTime Player's Screen Recording or [OBS Studio][obs]. On Windows, we can\nuse [OBS Studio][obs]. OBS Studio also supports streaming and compositing a\nwebcam image on top of the screen, which is useful to show the person using the\nheadset in reality (even with mixed reality).\n\nThen, we can possibly want to trim the video. On OS X, we can use QuickTime\nPlayer's trim tool (`<cmd> + t`).\n\nTo convert to a GIF with one command, use [gifpardy][gifpardy]. `gifpardy` uses ffmpeg\nand gifsicle under the hood:\n\n```\ngifpardy in.mp4\ngifpardy in.mp4 out.gif\ngifpardy -r 320x240 --delay 8 in.mp4\n```\n\n[brewery]: https://itunes.apple.com/us/app/gif-brewery-by-gfycat-capture-make-video-gifs/id1081413713?mt=12\n\nAlternatively, we can use [GIF Brewery][brewery] which has UI to trim, resize,\ncrop, and preview a GIF before exporting. Or capture straight to GIF using\n[LICECap](https://licecap.en.softonic.com/).\n\n### Sharing Media\n\n[blog]: https://aframe.io/blog/\n[reddit-webvr]: https://www.reddit.com/r/webvr\n[slack-webvr]: https://webvr-slack.herokuapp.com/\n\nIf you create something with A-Frame, please share it with us! If you share\nyour project, we'll feature it on [*A Week of\nA-Frame*](https://aframe.io/blog/) for the community to see. Great channels\ninclude:\n\n- [Twitter](https://twitter.com) - Mention `@aframevr` or include the `#webvr`\n  hashtag.\n- [`#projects` channel on Slack](http://aframevr.slackarchive.io/projects/)\n- [WebVR Slack channel][slack-webvr].\n- [/r/WebVR subreddit][reddit-webvr].\n- Write a case study and tell us to feature on the [A-Frame Blog][blog].\n\n## Embedding\n\nIf we want to embed an A-Frame scene into the layout of 2D web page, we can use\nthe [embedded component](../components/embedded.md) to remove fullscreen styles\nand allow us to style the canvas with CSS.\n\nNote we can only embed one scene at a time into a page. If we need multiple\nscenes, we can use\n[`<iframe>`s](https://developer.mozilla.org/docs/Web/HTML/Element/iframe).\n"
        }
    ]
}