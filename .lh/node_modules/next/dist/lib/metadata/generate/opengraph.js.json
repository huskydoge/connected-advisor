{
    "sourceFile": "node_modules/next/dist/lib/metadata/generate/opengraph.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1713791839842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1713791839842,
            "name": "Commit-0",
            "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n0 && (module.exports = {\n    OpenGraphMetadata: null,\n    TwitterMetadata: null,\n    AppLinksMeta: null\n});\nfunction _export(target, all) {\n    for(var name in all)Object.defineProperty(target, name, {\n        enumerable: true,\n        get: all[name]\n    });\n}\n_export(exports, {\n    OpenGraphMetadata: function() {\n        return OpenGraphMetadata;\n    },\n    TwitterMetadata: function() {\n        return TwitterMetadata;\n    },\n    AppLinksMeta: function() {\n        return AppLinksMeta;\n    }\n});\nconst _meta = require(\"./meta\");\nfunction OpenGraphMetadata({ openGraph }) {\n    var _openGraph_title, _openGraph_url, _openGraph_ttl;\n    if (!openGraph) {\n        return null;\n    }\n    let typedOpenGraph;\n    if (\"type\" in openGraph) {\n        const openGraphType = openGraph.type;\n        switch(openGraphType){\n            case \"homepage\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"homepage\"\n                    })\n                ];\n                break;\n            case \"article\":\n                var _openGraph_publishedTime, _openGraph_modifiedTime, _openGraph_expirationTime;\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"article\"\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"article:published_time\",\n                        content: (_openGraph_publishedTime = openGraph.publishedTime) == null ? void 0 : _openGraph_publishedTime.toString()\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"article:modified_time\",\n                        content: (_openGraph_modifiedTime = openGraph.modifiedTime) == null ? void 0 : _openGraph_modifiedTime.toString()\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"article:expiration_time\",\n                        content: (_openGraph_expirationTime = openGraph.expirationTime) == null ? void 0 : _openGraph_expirationTime.toString()\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"article:author\",\n                        contents: openGraph.authors\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"article:section\",\n                        content: openGraph.section\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"article:tag\",\n                        contents: openGraph.tags\n                    })\n                ];\n                break;\n            case \"book\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"book\"\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"book:isbn\",\n                        content: openGraph.isbn\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"book:release_date\",\n                        content: openGraph.releaseDate\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"book:author\",\n                        contents: openGraph.authors\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"book:tag\",\n                        contents: openGraph.tags\n                    })\n                ];\n                break;\n            case \"profile\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"profile\"\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"profile:first_name\",\n                        content: openGraph.firstName\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"profile:last_name\",\n                        content: openGraph.lastName\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"profile:username\",\n                        content: openGraph.username\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"profile:gender\",\n                        content: openGraph.gender\n                    })\n                ];\n                break;\n            case \"music.song\":\n                var _openGraph_duration;\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"music.song\"\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"music:duration\",\n                        content: (_openGraph_duration = openGraph.duration) == null ? void 0 : _openGraph_duration.toString()\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:album\",\n                        contents: openGraph.albums\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:musician\",\n                        contents: openGraph.musicians\n                    })\n                ];\n                break;\n            case \"music.album\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"music.album\"\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:song\",\n                        contents: openGraph.songs\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:musician\",\n                        contents: openGraph.musicians\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"music:release_date\",\n                        content: openGraph.releaseDate\n                    })\n                ];\n                break;\n            case \"music.playlist\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"music.playlist\"\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:song\",\n                        contents: openGraph.songs\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:creator\",\n                        contents: openGraph.creators\n                    })\n                ];\n                break;\n            case \"music.radio_station\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"music.radio_station\"\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"music:creator\",\n                        contents: openGraph.creators\n                    })\n                ];\n                break;\n            case \"video.movie\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"video.movie\"\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:actor\",\n                        contents: openGraph.actors\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:director\",\n                        contents: openGraph.directors\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:writer\",\n                        contents: openGraph.writers\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"video:duration\",\n                        content: openGraph.duration\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"video:release_date\",\n                        content: openGraph.releaseDate\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:tag\",\n                        contents: openGraph.tags\n                    })\n                ];\n                break;\n            case \"video.episode\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"video.episode\"\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:actor\",\n                        contents: openGraph.actors\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:director\",\n                        contents: openGraph.directors\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:writer\",\n                        contents: openGraph.writers\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"video:duration\",\n                        content: openGraph.duration\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"video:release_date\",\n                        content: openGraph.releaseDate\n                    }),\n                    (0, _meta.MultiMeta)({\n                        propertyPrefix: \"video:tag\",\n                        contents: openGraph.tags\n                    }),\n                    (0, _meta.Meta)({\n                        property: \"video:series\",\n                        content: openGraph.series\n                    })\n                ];\n                break;\n            case \"video.tv_show\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"video.tv_show\"\n                    })\n                ];\n                break;\n            case \"video.other\":\n                typedOpenGraph = [\n                    (0, _meta.Meta)({\n                        property: \"og:type\",\n                        content: \"video.other\"\n                    })\n                ];\n                break;\n            default:\n                const _exhaustiveCheck = openGraphType;\n                throw new Error(`Invalid OpenGraph type: ${_exhaustiveCheck}`);\n        }\n    }\n    return (0, _meta.MetaFilter)([\n        (0, _meta.Meta)({\n            property: \"og:determiner\",\n            content: openGraph.determiner\n        }),\n        (0, _meta.Meta)({\n            property: \"og:title\",\n            content: (_openGraph_title = openGraph.title) == null ? void 0 : _openGraph_title.absolute\n        }),\n        (0, _meta.Meta)({\n            property: \"og:description\",\n            content: openGraph.description\n        }),\n        (0, _meta.Meta)({\n            property: \"og:url\",\n            content: (_openGraph_url = openGraph.url) == null ? void 0 : _openGraph_url.toString()\n        }),\n        (0, _meta.Meta)({\n            property: \"og:site_name\",\n            content: openGraph.siteName\n        }),\n        (0, _meta.Meta)({\n            property: \"og:locale\",\n            content: openGraph.locale\n        }),\n        (0, _meta.Meta)({\n            property: \"og:country_name\",\n            content: openGraph.countryName\n        }),\n        (0, _meta.Meta)({\n            property: \"og:ttl\",\n            content: (_openGraph_ttl = openGraph.ttl) == null ? void 0 : _openGraph_ttl.toString()\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:image\",\n            contents: openGraph.images\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:video\",\n            contents: openGraph.videos\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:audio\",\n            contents: openGraph.audio\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:email\",\n            contents: openGraph.emails\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:phone_number\",\n            contents: openGraph.phoneNumbers\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:fax_number\",\n            contents: openGraph.faxNumbers\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"og:locale:alternate\",\n            contents: openGraph.alternateLocale\n        }),\n        ...typedOpenGraph ? typedOpenGraph : []\n    ]);\n}\nfunction TwitterAppItem({ app, type }) {\n    var _app_url_type, _app_url;\n    return [\n        (0, _meta.Meta)({\n            name: `twitter:app:name:${type}`,\n            content: app.name\n        }),\n        (0, _meta.Meta)({\n            name: `twitter:app:id:${type}`,\n            content: app.id[type]\n        }),\n        (0, _meta.Meta)({\n            name: `twitter:app:url:${type}`,\n            content: (_app_url = app.url) == null ? void 0 : (_app_url_type = _app_url[type]) == null ? void 0 : _app_url_type.toString()\n        })\n    ];\n}\nfunction TwitterMetadata({ twitter }) {\n    var _twitter_title;\n    if (!twitter) return null;\n    const { card } = twitter;\n    return (0, _meta.MetaFilter)([\n        (0, _meta.Meta)({\n            name: \"twitter:card\",\n            content: card\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:site\",\n            content: twitter.site\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:site:id\",\n            content: twitter.siteId\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:creator\",\n            content: twitter.creator\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:creator:id\",\n            content: twitter.creatorId\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:title\",\n            content: (_twitter_title = twitter.title) == null ? void 0 : _twitter_title.absolute\n        }),\n        (0, _meta.Meta)({\n            name: \"twitter:description\",\n            content: twitter.description\n        }),\n        (0, _meta.MultiMeta)({\n            namePrefix: \"twitter:image\",\n            contents: twitter.images\n        }),\n        ...card === \"player\" ? twitter.players.flatMap((player)=>[\n                (0, _meta.Meta)({\n                    name: \"twitter:player\",\n                    content: player.playerUrl.toString()\n                }),\n                (0, _meta.Meta)({\n                    name: \"twitter:player:stream\",\n                    content: player.streamUrl.toString()\n                }),\n                (0, _meta.Meta)({\n                    name: \"twitter:player:width\",\n                    content: player.width\n                }),\n                (0, _meta.Meta)({\n                    name: \"twitter:player:height\",\n                    content: player.height\n                })\n            ]) : [],\n        ...card === \"app\" ? [\n            TwitterAppItem({\n                app: twitter.app,\n                type: \"iphone\"\n            }),\n            TwitterAppItem({\n                app: twitter.app,\n                type: \"ipad\"\n            }),\n            TwitterAppItem({\n                app: twitter.app,\n                type: \"googleplay\"\n            })\n        ] : []\n    ]);\n}\nfunction AppLinksMeta({ appLinks }) {\n    if (!appLinks) return null;\n    return (0, _meta.MetaFilter)([\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:ios\",\n            contents: appLinks.ios\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:iphone\",\n            contents: appLinks.iphone\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:ipad\",\n            contents: appLinks.ipad\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:android\",\n            contents: appLinks.android\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:windows_phone\",\n            contents: appLinks.windows_phone\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:windows\",\n            contents: appLinks.windows\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:windows_universal\",\n            contents: appLinks.windows_universal\n        }),\n        (0, _meta.MultiMeta)({\n            propertyPrefix: \"al:web\",\n            contents: appLinks.web\n        })\n    ]);\n}\n\n//# sourceMappingURL=opengraph.js.map"
        }
    ]
}